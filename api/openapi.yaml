openapi: 3.0.0
info:
  title: Turing LLM API
  description: The Turing LLM REST API.
  contact:
    name: Developer
    url: giovanni.oliveira@turing.com
  version: 2.3.0
servers:
- url: https://virtserver.swaggerhub.com/turing-f7b/Turing-LLM-Service/2.3.0
  description: SwaggerHub API Auto Mocking
security:
- ApiKeyAuth: []
tags:
- name: Assistants
  description: Build Assistants that can call models and use tools.
- name: Audio
  description: Turn audio into text or text into audio.
- name: Chat
  description: "Given a list of messages comprising a conversation, the model will\
    \ return a response."
- name: Completions
  description: "Given a prompt, the model will return one or more predicted completions,\
    \ and can also return the probabilities of alternative tokens at each position."
- name: Embeddings
  description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
- name: Evals
  description: Manage and run evals in the OpenAI platform.
- name: Fine-tuning
  description: Manage fine-tuning jobs to tailor a model to your specific training
    data.
- name: Batch
  description: Create large batches of API requests to run asynchronously.
- name: Files
  description: Files are used to upload documents that can be used with features like
    Assistants and Fine-tuning.
- name: Uploads
  description: Use Uploads to upload large files in multiple parts.
- name: Images
  description: "Given a prompt and/or an input image, the model will generate a new\
    \ image."
- name: Models
  description: List and describe the various models available in the API.
- name: Moderations
  description: "Given text and/or image inputs, classifies if those inputs are potentially\
    \ harmful."
- name: Audit Logs
  description: List user actions and configuration changes within this organization.
paths:
  /chat/completions:
    get:
      tags:
      - Chat
      summary: |
        List stored Chat Completions. Only Chat Completions that have been stored
        with the `store` parameter set to `true` will be returned.
      operationId: listChatCompletions
      parameters:
      - name: model
        in: query
        description: The model used to generate the Chat Completions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: metadata
        in: query
        description: |
          A list of metadata keys to filter the Chat Completions by. Example:

          `metadata[key1]=value1&metadata[key2]=value2`
        required: false
        style: form
        explode: true
        schema:
          $ref: "#/components/schemas/Metadata"
      - name: after
        in: query
        description: Identifier for the last chat completion from the previous pagination
          request.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: Number of Chat Completions to retrieve.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: Sort order for Chat Completions by timestamp. Use `asc` for ascending
          order or `desc` for descending order. Defaults to `asc`.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      responses:
        "200":
          description: A list of Chat Completions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatCompletionList"
      x-oaiMeta:
        name: List Chat Completions
        group: chat
        returns: "A list of [Chat Completions](/docs/api-reference/chat/list-object)\
          \ matching the specified filters."
        path: list
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json"
            python: |
              from openai import OpenAI
              client = OpenAI()

              completions = client.chat.completions.list()
              print(completions)
          response: |
            {
              "object": "list",
              "data": [
                {
                  "object": "chat.completion",
                  "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
                  "model": "gpt-4.1-2025-04-14",
                  "created": 1738960610,
                  "request_id": "req_ded8ab984ec4bf840f37566c1011c417",
                  "tool_choice": null,
                  "usage": {
                    "total_tokens": 31,
                    "completion_tokens": 18,
                    "prompt_tokens": 13
                  },
                  "seed": 4944116822809979520,
                  "top_p": 1.0,
                  "temperature": 1.0,
                  "presence_penalty": 0.0,
                  "frequency_penalty": 0.0,
                  "system_fingerprint": "fp_50cad350e4",
                  "input_user": null,
                  "service_tier": "default",
                  "tools": null,
                  "metadata": {},
                  "choices": [
                    {
                      "index": 0,
                      "message": {
                        "content": "Mind of circuits hum,  \nLearning patterns in silenceâ€”  \nFuture's quiet spark.",
                        "role": "assistant",
                        "tool_calls": null,
                        "function_call": null
                      },
                      "finish_reason": "stop",
                      "logprobs": null
                    }
                  ],
                  "response_format": null
                }
              ],
              "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
              "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
              "has_more": false
            }
      x-swagger-router-controller: Chat
    post:
      tags:
      - Chat
      summary: "**Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses)\
        \ \nto take advantage of the latest OpenAI platform features. Compare\n[Chat\
        \ Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).\n\
        \n---\n\nCreates a model response for the given chat conversation. Learn more\
        \ in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\n\
        and [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending\
        \ on the model used to generate the\nresponse, particularly for newer reasoning\
        \ models. Parameters that are only\nsupported for reasoning models are noted\
        \ below. For the current state of \nunsupported parameters in reasoning models,\
        \ \n[refer to the reasoning guide](/docs/guides/reasoning).\n"
      operationId: createChatCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatCompletionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateChatCompletionResponse"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/CreateChatCompletionStreamResponse"
      x-oaiMeta:
        name: Create chat completion
        group: chat
        returns: |
          Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.
        path: create
        examples:
        - title: Default
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_chat_model_id",
                  "messages": [
                    {
                      "role": "developer",
                      "content": "You are a helpful assistant."
                    },
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ]
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_chat_model_id",
                messages=[
                  {"role": "developer", "content": "You are a helpful assistant."},
                  {"role": "user", "content": "Hello!"}
                ]
              )

              print(completion.choices[0].message)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  messages: [{ role: "developer", content: "You are a helpful assistant." }],
                  model: "VAR_chat_model_id",
                  store: true,
                });

                console.log(completion.choices[0]);
              }

              main();
            csharp: |
              using System;
              using System.Collections.Generic;

              using OpenAI.Chat;

              ChatClient client = new(
                  model: "gpt-4.1",
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              List<ChatMessage> messages =
              [
                  new SystemChatMessage("You are a helpful assistant."),
                  new UserChatMessage("Hello!")
              ];

              ChatCompletion completion = client.CompleteChat(messages);

              Console.WriteLine(completion.Content[0].Text);
          response: |
            {
              "id": "chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT",
              "object": "chat.completion",
              "created": 1741569952,
              "model": "gpt-4.1-2025-04-14",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "Hello! How can I assist you today?",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              ],
              "usage": {
                "prompt_tokens": 19,
                "completion_tokens": 10,
                "total_tokens": 29,
                "prompt_tokens_details": {
                  "cached_tokens": 0,
                  "audio_tokens": 0
                },
                "completion_tokens_details": {
                  "reasoning_tokens": 0,
                  "audio_tokens": 0,
                  "accepted_prediction_tokens": 0,
                  "rejected_prediction_tokens": 0
                }
              },
              "service_tier": "default"
            }
        - title: Image input
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "gpt-4.1",
                  "messages": [
                    {
                      "role": "user",
                      "content": [
                        {
                          "type": "text",
                          "text": "What is in this image?"
                        },
                        {
                          "type": "image_url",
                          "image_url": {
                            "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"
                          }
                        }
                      ]
                    }
                  ],
                  "max_tokens": 300
                }'
            python: |
              from openai import OpenAI

              client = OpenAI()

              response = client.chat.completions.create(
                  model="gpt-4.1",
                  messages=[
                      {
                          "role": "user",
                          "content": [
                              {"type": "text", "text": "What's in this image?"},
                              {
                                  "type": "image_url",
                                  "image_url": {
                                      "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                                  }
                              },
                          ],
                      }
                  ],
                  max_tokens=300,
              )

              print(response.choices[0])
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const response = await openai.chat.completions.create({
                  model: "gpt-4.1",
                  messages: [
                    {
                      role: "user",
                      content: [
                        { type: "text", text: "What's in this image?" },
                        {
                          type: "image_url",
                          image_url: {
                            "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
                          },
                        }
                      ],
                    },
                  ],
                });
                console.log(response.choices[0]);
              }
              main();
            csharp: |
              using System;
              using System.Collections.Generic;

              using OpenAI.Chat;

              ChatClient client = new(
                  model: "gpt-4.1",
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              List<ChatMessage> messages =
              [
                  new UserChatMessage(
                  [
                      ChatMessageContentPart.CreateTextPart("What's in this image?"),
                      ChatMessageContentPart.CreateImagePart(new Uri("https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg"))
                  ])
              ];

              ChatCompletion completion = client.CompleteChat(messages);

              Console.WriteLine(completion.Content[0].Text);
          response: |
            {
              "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
              "object": "chat.completion",
              "created": 1741570283,
              "model": "gpt-4.1-2025-04-14",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                    "refusal": null,
                    "annotations": []
                  },
                  "logprobs": null,
                  "finish_reason": "stop"
                }
              ],
              "usage": {
                "prompt_tokens": 1117,
                "completion_tokens": 46,
                "total_tokens": 1163,
                "prompt_tokens_details": {
                  "cached_tokens": 0,
                  "audio_tokens": 0
                },
                "completion_tokens_details": {
                  "reasoning_tokens": 0,
                  "audio_tokens": 0,
                  "accepted_prediction_tokens": 0,
                  "rejected_prediction_tokens": 0
                }
              },
              "service_tier": "default"
            }
        - title: Streaming
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_chat_model_id",
                  "messages": [
                    {
                      "role": "developer",
                      "content": "You are a helpful assistant."
                    },
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ],
                  "stream": true
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_chat_model_id",
                messages=[
                  {"role": "developer", "content": "You are a helpful assistant."},
                  {"role": "user", "content": "Hello!"}
                ],
                stream=True
              )

              for chunk in completion:
                print(chunk.choices[0].delta)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  model: "VAR_chat_model_id",
                  messages: [
                    {"role": "developer", "content": "You are a helpful assistant."},
                    {"role": "user", "content": "Hello!"}
                  ],
                  stream: true,
                });

                for await (const chunk of completion) {
                  console.log(chunk.choices[0].delta.content);
                }
              }

              main();
            csharp: |
              using System;
              using System.ClientModel;
              using System.Collections.Generic;
              using System.Threading.Tasks;

              using OpenAI.Chat;

              ChatClient client = new(
                  model: "gpt-4.1",
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              List<ChatMessage> messages =
              [
                  new SystemChatMessage("You are a helpful assistant."),
                  new UserChatMessage("Hello!")
              ];

              AsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);

              await foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)
              {
                  if (completionUpdate.ContentUpdate.Count > 0)
                  {
                      Console.Write(completionUpdate.ContentUpdate[0].Text);
                  }
              }
          response: |
            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

            ....

            {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
        - title: Functions
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d '{
                "model": "gpt-4.1",
                "messages": [
                  {
                    "role": "user",
                    "content": "What is the weather like in Boston today?"
                  }
                ],
                "tools": [
                  {
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "description": "Get the current weather in a given location",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "string",
                            "description": "The city and state, e.g. San Francisco, CA"
                          },
                          "unit": {
                            "type": "string",
                            "enum": ["celsius", "fahrenheit"]
                          }
                        },
                        "required": ["location"]
                      }
                    }
                  }
                ],
                "tool_choice": "auto"
              }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              tools = [
                {
                  "type": "function",
                  "function": {
                    "name": "get_current_weather",
                    "description": "Get the current weather in a given location",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and state, e.g. San Francisco, CA",
                        },
                        "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                      },
                      "required": ["location"],
                    },
                  }
                }
              ]
              messages = [{"role": "user", "content": "What's the weather like in Boston today?"}]
              completion = client.chat.completions.create(
                model="VAR_chat_model_id",
                messages=messages,
                tools=tools,
                tool_choice="auto"
              )

              print(completion)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const messages = [{"role": "user", "content": "What's the weather like in Boston today?"}];
                const tools = [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "description": "The city and state, e.g. San Francisco, CA",
                            },
                            "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]},
                          },
                          "required": ["location"],
                        },
                      }
                    }
                ];

                const response = await openai.chat.completions.create({
                  model: "gpt-4.1",
                  messages: messages,
                  tools: tools,
                  tool_choice: "auto",
                });

                console.log(response);
              }

              main();
            csharp: |
              using System;
              using System.Collections.Generic;

              using OpenAI.Chat;

              ChatClient client = new(
                  model: "gpt-4.1",
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              ChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(
                  functionName: "get_current_weather",
                  functionDescription: "Get the current weather in a given location",
                  functionParameters: BinaryData.FromString("""
                      {
                          "type": "object",
                          "properties": {
                              "location": {
                                  "type": "string",
                                  "description": "The city and state, e.g. San Francisco, CA"
                              },
                              "unit": {
                                  "type": "string",
                                  "enum": [ "celsius", "fahrenheit" ]
                              }
                          },
                          "required": [ "location" ]
                      }
                  """)
              );

              List<ChatMessage> messages =
              [
                  new UserChatMessage("What's the weather like in Boston today?"),
              ];

              ChatCompletionOptions options = new()
              {
                  Tools =
                  {
                      getCurrentWeatherTool
                  },
                  ToolChoice = ChatToolChoice.CreateAutoChoice(),
              };

              ChatCompletion completion = client.CompleteChat(messages, options);
          response: |
            {
              "id": "chatcmpl-abc123",
              "object": "chat.completion",
              "created": 1699896916,
              "model": "gpt-4o-mini",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": null,
                    "tool_calls": [
                      {
                        "id": "call_abc123",
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "arguments": "{\n\"location\": \"Boston, MA\"\n}"
                        }
                      }
                    ]
                  },
                  "logprobs": null,
                  "finish_reason": "tool_calls"
                }
              ],
              "usage": {
                "prompt_tokens": 82,
                "completion_tokens": 17,
                "total_tokens": 99,
                "completion_tokens_details": {
                  "reasoning_tokens": 0,
                  "accepted_prediction_tokens": 0,
                  "rejected_prediction_tokens": 0
                }
              }
            }
        - title: Logprobs
          request:
            curl: |
              curl https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -d '{
                  "model": "VAR_chat_model_id",
                  "messages": [
                    {
                      "role": "user",
                      "content": "Hello!"
                    }
                  ],
                  "logprobs": true,
                  "top_logprobs": 2
                }'
            python: |
              from openai import OpenAI
              client = OpenAI()

              completion = client.chat.completions.create(
                model="VAR_chat_model_id",
                messages=[
                  {"role": "user", "content": "Hello!"}
                ],
                logprobs=True,
                top_logprobs=2
              )

              print(completion.choices[0].message)
              print(completion.choices[0].logprobs)
            node.js: |
              import OpenAI from "openai";

              const openai = new OpenAI();

              async function main() {
                const completion = await openai.chat.completions.create({
                  messages: [{ role: "user", content: "Hello!" }],
                  model: "VAR_chat_model_id",
                  logprobs: true,
                  top_logprobs: 2,
                });

                console.log(completion.choices[0]);
              }

              main();
            csharp: |
              using System;
              using System.Collections.Generic;

              using OpenAI.Chat;

              ChatClient client = new(
                  model: "gpt-4.1",
                  apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
              );

              List<ChatMessage> messages =
              [
                  new UserChatMessage("Hello!")
              ];

              ChatCompletionOptions options = new()
              {
                  IncludeLogProbabilities = true,
                  TopLogProbabilityCount = 2
              };

              ChatCompletion completion = client.CompleteChat(messages, options);

              Console.WriteLine(completion.Content[0].Text);
          response: |
            {
              "id": "chatcmpl-123",
              "object": "chat.completion",
              "created": 1702685778,
              "model": "gpt-4o-mini",
              "choices": [
                {
                  "index": 0,
                  "message": {
                    "role": "assistant",
                    "content": "Hello! How can I assist you today?"
                  },
                  "logprobs": {
                    "content": [
                      {
                        "token": "Hello",
                        "logprob": -0.31725305,
                        "bytes": [72, 101, 108, 108, 111],
                        "top_logprobs": [
                          {
                            "token": "Hello",
                            "logprob": -0.31725305,
                            "bytes": [72, 101, 108, 108, 111]
                          },
                          {
                            "token": "Hi",
                            "logprob": -1.3190403,
                            "bytes": [72, 105]
                          }
                        ]
                      },
                      {
                        "token": "!",
                        "logprob": -0.02380986,
                        "bytes": [
                          33
                        ],
                        "top_logprobs": [
                          {
                            "token": "!",
                            "logprob": -0.02380986,
                            "bytes": [33]
                          },
                          {
                            "token": " there",
                            "logprob": -3.787621,
                            "bytes": [32, 116, 104, 101, 114, 101]
                          }
                        ]
                      },
                      {
                        "token": " How",
                        "logprob": -0.000054669687,
                        "bytes": [32, 72, 111, 119],
                        "top_logprobs": [
                          {
                            "token": " How",
                            "logprob": -0.000054669687,
                            "bytes": [32, 72, 111, 119]
                          },
                          {
                            "token": "<|end|>",
                            "logprob": -10.953937,
                            "bytes": null
                          }
                        ]
                      },
                      {
                        "token": " can",
                        "logprob": -0.015801601,
                        "bytes": [32, 99, 97, 110],
                        "top_logprobs": [
                          {
                            "token": " can",
                            "logprob": -0.015801601,
                            "bytes": [32, 99, 97, 110]
                          },
                          {
                            "token": " may",
                            "logprob": -4.161023,
                            "bytes": [32, 109, 97, 121]
                          }
                        ]
                      },
                      {
                        "token": " I",
                        "logprob": -3.7697225e-6,
                        "bytes": [
                          32,
                          73
                        ],
                        "top_logprobs": [
                          {
                            "token": " I",
                            "logprob": -3.7697225e-6,
                            "bytes": [32, 73]
                          },
                          {
                            "token": " assist",
                            "logprob": -13.596657,
                            "bytes": [32, 97, 115, 115, 105, 115, 116]
                          }
                        ]
                      },
                      {
                        "token": " assist",
                        "logprob": -0.04571125,
                        "bytes": [32, 97, 115, 115, 105, 115, 116],
                        "top_logprobs": [
                          {
                            "token": " assist",
                            "logprob": -0.04571125,
                            "bytes": [32, 97, 115, 115, 105, 115, 116]
                          },
                          {
                            "token": " help",
                            "logprob": -3.1089056,
                            "bytes": [32, 104, 101, 108, 112]
                          }
                        ]
                      },
                      {
                        "token": " you",
                        "logprob": -5.4385737e-6,
                        "bytes": [32, 121, 111, 117],
                        "top_logprobs": [
                          {
                            "token": " you",
                            "logprob": -5.4385737e-6,
                            "bytes": [32, 121, 111, 117]
                          },
                          {
                            "token": " today",
                            "logprob": -12.807695,
                            "bytes": [32, 116, 111, 100, 97, 121]
                          }
                        ]
                      },
                      {
                        "token": " today",
                        "logprob": -0.0040071653,
                        "bytes": [32, 116, 111, 100, 97, 121],
                        "top_logprobs": [
                          {
                            "token": " today",
                            "logprob": -0.0040071653,
                            "bytes": [32, 116, 111, 100, 97, 121]
                          },
                          {
                            "token": "?",
                            "logprob": -5.5247097,
                            "bytes": [63]
                          }
                        ]
                      },
                      {
                        "token": "?",
                        "logprob": -0.0008108172,
                        "bytes": [63],
                        "top_logprobs": [
                          {
                            "token": "?",
                            "logprob": -0.0008108172,
                            "bytes": [63]
                          },
                          {
                            "token": "?\n",
                            "logprob": -7.184561,
                            "bytes": [63, 10]
                          }
                        ]
                      }
                    ]
                  },
                  "finish_reason": "stop"
                }
              ],
              "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 9,
                "total_tokens": 18,
                "completion_tokens_details": {
                  "reasoning_tokens": 0,
                  "accepted_prediction_tokens": 0,
                  "rejected_prediction_tokens": 0
                }
              },
              "system_fingerprint": null
            }
      x-swagger-router-controller: Chat
components:
  schemas:
    AddUploadPartRequest:
      required:
      - data
      type: object
      properties:
        data:
          type: string
          description: |
            The chunk of bytes for this Part.
          format: binary
      additionalProperties: false
    AdminApiKey:
      required:
      - created_at
      - id
      - last_used_at
      - name
      - object
      - owner
      - redacted_value
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.admin_api_key`"
          example: organization.admin_api_key
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
          example: key_abc
        name:
          type: string
          description: The name of the API key
          example: Administration Key
        redacted_value:
          type: string
          description: The redacted value of the API key
          example: sk-admin...def
        value:
          type: string
          description: The value of the API key. Only shown on create.
          example: sk-admin-1234abcd
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was created
          format: int64
          example: 1711471533
        last_used_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was last
            used
          format: int64
          nullable: true
          example: 1711471534
        owner:
          $ref: "#/components/schemas/AdminApiKey_owner"
      description: Represents an individual Admin API key in an org.
      x-oaiMeta:
        name: The admin API key object
        example: |
          {
            "object": "organization.admin_api_key",
            "id": "key_abc",
            "name": "Main Admin Key",
            "redacted_value": "sk-admin...xyz",
            "created_at": 1711471533,
            "last_used_at": 1711471534,
            "owner": {
              "type": "user",
              "object": "organization.user",
              "id": "user_123",
              "name": "John Doe",
              "created_at": 1711471533,
              "role": "owner"
            }
          }
    ApiKeyList:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminApiKey"
        has_more:
          type: boolean
          example: false
        first_id:
          type: string
          example: key_abc
        last_id:
          type: string
          example: key_xyz
    AssistantObject:
      title: Assistant
      required:
      - created_at
      - description
      - id
      - instructions
      - metadata
      - model
      - name
      - object
      - tools
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `assistant`."
          enum:
          - assistant
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the assistant was
            created.
        name:
          maxLength: 256
          type: string
          description: |
            The name of the assistant. The maximum length is 256 characters.
          nullable: true
        description:
          maxLength: 512
          type: string
          description: |
            The description of the assistant. The maximum length is 512 characters.
          nullable: true
        model:
          type: string
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
        instructions:
          maxLength: 256000
          type: string
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          nullable: true
        tools:
          maxItems: 128
          type: array
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
          default: []
        tool_resources:
          $ref: "#/components/schemas/AssistantObject_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          nullable: true
          example: 1
          default: 1
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      description: Represents an `assistant` that can call the model and use tools.
      x-oaiMeta:
        name: The assistant object
        beta: true
        example: |
          {
            "id": "asst_abc123",
            "object": "assistant",
            "created_at": 1698984975,
            "name": "Math Tutor",
            "description": null,
            "model": "gpt-4o",
            "instructions": "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
            "tools": [
              {
                "type": "code_interpreter"
              }
            ],
            "metadata": {},
            "top_p": 1.0,
            "temperature": 1.0,
            "response_format": "auto"
          }
    AssistantStreamEvent:
      description: |
        Represents an event emitted when streaming a Run.

        Each event in a server-sent events stream has an `event` and `data` property:

        ```
        event: thread.created
        data: {"id": "thread_123", "object": "thread", ...}
        ```

        We emit events whenever a new object is created, transitions to a new state, or is being
        streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
        is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
        to create a message during a run, we emit a `thread.message.created event`, a
        `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
        `thread.message.completed` event.

        We may add additional events over time, so we recommend handling unknown events gracefully
        in your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to
        integrate the Assistants API with streaming.
      oneOf:
      - $ref: "#/components/schemas/ThreadStreamEvent"
      - $ref: "#/components/schemas/RunStreamEvent"
      - $ref: "#/components/schemas/RunStepStreamEvent"
      - $ref: "#/components/schemas/MessageStreamEvent"
      - $ref: "#/components/schemas/ErrorEvent"
      - $ref: "#/components/schemas/DoneEvent"
      x-oaiMeta:
        name: Assistant stream events
        beta: true
    AssistantSupportedModels:
      type: string
      enum:
      - gpt-4.1
      - gpt-4.1-mini
      - gpt-4.1-nano
      - gpt-4.1-2025-04-14
      - gpt-4.1-mini-2025-04-14
      - gpt-4.1-nano-2025-04-14
      - o3-mini
      - o3-mini-2025-01-31
      - o1
      - o1-2024-12-17
      - gpt-4o
      - gpt-4o-2024-11-20
      - gpt-4o-2024-08-06
      - gpt-4o-2024-05-13
      - gpt-4o-mini
      - gpt-4o-mini-2024-07-18
      - gpt-4.5-preview
      - gpt-4.5-preview-2025-02-27
      - gpt-4-turbo
      - gpt-4-turbo-2024-04-09
      - gpt-4-0125-preview
      - gpt-4-turbo-preview
      - gpt-4-1106-preview
      - gpt-4-vision-preview
      - gpt-4
      - gpt-4-0314
      - gpt-4-0613
      - gpt-4-32k
      - gpt-4-32k-0314
      - gpt-4-32k-0613
      - gpt-3.5-turbo
      - gpt-3.5-turbo-16k
      - gpt-3.5-turbo-0613
      - gpt-3.5-turbo-1106
      - gpt-3.5-turbo-0125
      - gpt-3.5-turbo-16k-0613
    AssistantToolsCode:
      title: Code interpreter tool
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of tool being defined: `code_interpreter`"
          enum:
          - code_interpreter
          x-stainless-const: true
    AssistantToolsFileSearch:
      title: FileSearch tool
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of tool being defined: `file_search`"
          enum:
          - file_search
          x-stainless-const: true
        file_search:
          $ref: "#/components/schemas/AssistantToolsFileSearch_file_search"
    AssistantToolsFileSearchTypeOnly:
      title: FileSearch tool
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of tool being defined: `file_search`"
          enum:
          - file_search
          x-stainless-const: true
    AssistantToolsFunction:
      title: Function tool
      required:
      - function
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of tool being defined: `function`"
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/FunctionObject"
    AssistantsApiResponseFormatOption:
      description: |
        Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.

        Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).

        Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.

        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
      oneOf:
      - type: string
        description: |
          `auto` is the default value
        enum:
        - auto
        x-stainless-const: true
      - $ref: "#/components/schemas/ResponseFormatText"
      - $ref: "#/components/schemas/ResponseFormatJsonObject"
      - $ref: "#/components/schemas/ResponseFormatJsonSchema"
    AssistantsApiToolChoiceOption:
      description: |
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tools and instead generates a message.
        `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
        `required` means the model must call one or more tools before responding to the user.
        Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
      oneOf:
      - type: string
        description: |
          `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
        enum:
        - none
        - auto
        - required
      - $ref: "#/components/schemas/AssistantsNamedToolChoice"
    AssistantsNamedToolChoice:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of the tool. If type is `function`, the function\
            \ name must be set"
          enum:
          - function
          - code_interpreter
          - file_search
        function:
          $ref: "#/components/schemas/AssistantsNamedToolChoice_function"
      description: Specifies a tool the model should use. Use to force the model to
        call a specific tool.
    AudioResponseFormat:
      type: string
      description: |
        The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
      default: json
      enum:
      - json
      - text
      - srt
      - verbose_json
      - vtt
    AuditLog:
      required:
      - actor
      - effective_at
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The ID of this log.
        type:
          $ref: "#/components/schemas/AuditLogEventType"
        effective_at:
          type: integer
          description: The Unix timestamp (in seconds) of the event.
        project:
          $ref: "#/components/schemas/AuditLog_project"
        actor:
          $ref: "#/components/schemas/AuditLogActor"
        api_key.created:
          $ref: "#/components/schemas/AuditLog_api_key.created"
        api_key.updated:
          $ref: "#/components/schemas/AuditLog_api_key.updated"
        api_key.deleted:
          $ref: "#/components/schemas/AuditLog_api_key.deleted"
        checkpoint_permission.created:
          $ref: "#/components/schemas/AuditLog_checkpoint_permission.created"
        checkpoint_permission.deleted:
          $ref: "#/components/schemas/AuditLog_checkpoint_permission.deleted"
        invite.sent:
          $ref: "#/components/schemas/AuditLog_invite.sent"
        invite.accepted:
          $ref: "#/components/schemas/AuditLog_invite.accepted"
        invite.deleted:
          $ref: AuditLog_invite.accepted
        login.failed:
          $ref: "#/components/schemas/AuditLog_login.failed"
        logout.failed:
          $ref: AuditLog_login.failed
        organization.updated:
          $ref: "#/components/schemas/AuditLog_organization.updated"
        project.created:
          $ref: "#/components/schemas/AuditLog_project.created"
        project.updated:
          $ref: "#/components/schemas/AuditLog_project.updated"
        project.archived:
          $ref: "#/components/schemas/AuditLog_project.archived"
        rate_limit.updated:
          $ref: "#/components/schemas/AuditLog_rate_limit.updated"
        rate_limit.deleted:
          $ref: "#/components/schemas/AuditLog_rate_limit.deleted"
        service_account.created:
          $ref: "#/components/schemas/AuditLog_service_account.created"
        service_account.updated:
          $ref: "#/components/schemas/AuditLog_service_account.updated"
        service_account.deleted:
          $ref: "#/components/schemas/AuditLog_service_account.deleted"
        user.added:
          $ref: "#/components/schemas/AuditLog_user.added"
        user.updated:
          $ref: "#/components/schemas/AuditLog_user.updated"
        user.deleted:
          $ref: "#/components/schemas/AuditLog_user.deleted"
        certificate.created:
          $ref: "#/components/schemas/AuditLog_certificate.created"
        certificate.updated:
          $ref: AuditLog_certificate.created
        certificate.deleted:
          $ref: "#/components/schemas/AuditLog_certificate.deleted"
        certificates.activated:
          $ref: "#/components/schemas/AuditLog_certificates.activated"
        certificates.deactivated:
          $ref: AuditLog_certificates.activated
      description: A log of a user action or configuration change within this organization.
      x-oaiMeta:
        name: The audit log object
        example: |
          {
              "id": "req_xxx_20240101",
              "type": "api_key.created",
              "effective_at": 1720804090,
              "actor": {
                  "type": "session",
                  "session": {
                      "user": {
                          "id": "user-xxx",
                          "email": "user@example.com"
                      },
                      "ip_address": "127.0.0.1",
                      "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                  }
              },
              "api_key.created": {
                  "id": "key_xxxx",
                  "data": {
                      "scopes": ["resource.operation"]
                  }
              }
          }
    AuditLogActor:
      type: object
      properties:
        type:
          type: string
          description: The type of actor. Is either `session` or `api_key`.
          enum:
          - session
          - api_key
        session:
          $ref: "#/components/schemas/AuditLogActorSession"
        api_key:
          $ref: "#/components/schemas/AuditLogActorApiKey"
      description: The actor who performed the audit logged action.
    AuditLogActorApiKey:
      type: object
      properties:
        id:
          type: string
          description: The tracking id of the API key.
        type:
          type: string
          description: The type of API key. Can be either `user` or `service_account`.
          enum:
          - user
          - service_account
        user:
          $ref: "#/components/schemas/AuditLogActorUser"
        service_account:
          $ref: "#/components/schemas/AuditLogActorServiceAccount"
      description: The API Key used to perform the audit logged action.
    AuditLogActorServiceAccount:
      type: object
      properties:
        id:
          type: string
          description: The service account id.
      description: The service account that performed the audit logged action.
    AuditLogActorSession:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/AuditLogActorUser"
        ip_address:
          type: string
          description: The IP address from which the action was performed.
      description: The session in which the audit logged action was performed.
    AuditLogActorUser:
      type: object
      properties:
        id:
          type: string
          description: The user id.
        email:
          type: string
          description: The user email.
      description: The user who performed the audit logged action.
    AuditLogEventType:
      type: string
      description: The event type.
      enum:
      - api_key.created
      - api_key.updated
      - api_key.deleted
      - checkpoint_permission.created
      - checkpoint_permission.deleted
      - invite.sent
      - invite.accepted
      - invite.deleted
      - login.succeeded
      - login.failed
      - logout.succeeded
      - logout.failed
      - organization.updated
      - project.created
      - project.updated
      - project.archived
      - service_account.created
      - service_account.updated
      - service_account.deleted
      - rate_limit.updated
      - rate_limit.deleted
      - user.added
      - user.updated
      - user.deleted
    AutoChunkingStrategyRequestParam:
      title: Auto Chunking Strategy
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `auto`.
          enum:
          - auto
          x-stainless-const: true
      additionalProperties: false
      description: The default strategy. This strategy currently uses a `max_chunk_size_tokens`
        of `800` and `chunk_overlap_tokens` of `400`.
    Batch:
      required:
      - completion_window
      - created_at
      - endpoint
      - id
      - input_file_id
      - object
      - status
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          description: "The object type, which is always `batch`."
          enum:
          - batch
          x-stainless-const: true
        endpoint:
          type: string
          description: The OpenAI API endpoint used by the batch.
        errors:
          $ref: "#/components/schemas/Batch_errors"
        input_file_id:
          type: string
          description: The ID of the input file for the batch.
        completion_window:
          type: string
          description: The time frame within which the batch should be processed.
        status:
          type: string
          description: The current status of the batch.
          enum:
          - validating
          - failed
          - in_progress
          - finalizing
          - completed
          - expired
          - cancelling
          - cancelled
        output_file_id:
          type: string
          description: The ID of the file containing the outputs of successfully executed
            requests.
        error_file_id:
          type: string
          description: The ID of the file containing the outputs of requests with
            errors.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch was created.
        in_progress_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch started
            processing.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch will expire.
        finalizing_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch started
            finalizing.
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch was completed.
        failed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch failed.
        expired_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch expired.
        cancelling_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch started
            cancelling.
        cancelled_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the batch was cancelled.
        request_counts:
          $ref: "#/components/schemas/Batch_request_counts"
        metadata:
          $ref: "#/components/schemas/Metadata"
      x-oaiMeta:
        name: The batch object
        example: |
          {
            "id": "batch_abc123",
            "object": "batch",
            "endpoint": "/v1/completions",
            "errors": null,
            "input_file_id": "file-abc123",
            "completion_window": "24h",
            "status": "completed",
            "output_file_id": "file-cvaTdG",
            "error_file_id": "file-HOWS94",
            "created_at": 1711471533,
            "in_progress_at": 1711471538,
            "expires_at": 1711557933,
            "finalizing_at": 1711493133,
            "completed_at": 1711493163,
            "failed_at": null,
            "expired_at": null,
            "cancelling_at": null,
            "cancelled_at": null,
            "request_counts": {
              "total": 100,
              "completed": 95,
              "failed": 5
            },
            "metadata": {
              "customer_id": "user_123456789",
              "batch_description": "Nightly eval job",
            }
          }
    BatchRequestInput:
      type: object
      properties:
        custom_id:
          type: string
          description: A developer-provided per-request id that will be used to match
            outputs to inputs. Must be unique for each request in a batch.
        method:
          type: string
          description: The HTTP method to be used for the request. Currently only
            `POST` is supported.
          enum:
          - POST
          x-stainless-const: true
        url:
          type: string
          description: "The OpenAI API relative URL to be used for the request. Currently\
            \ `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are\
            \ supported."
      description: The per-line object of the batch input file
      x-oaiMeta:
        name: The request input object
        example: |
          {"custom_id": "request-1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is 2+2?"}]}}
    BatchRequestOutput:
      type: object
      properties:
        id:
          type: string
        custom_id:
          type: string
          description: A developer-provided per-request id that will be used to match
            outputs to inputs.
        response:
          $ref: "#/components/schemas/BatchRequestOutput_response"
        error:
          $ref: "#/components/schemas/BatchRequestOutput_error"
      description: The per-line object of the batch output and error files
      x-oaiMeta:
        name: The request output object
        example: |
          {"id": "batch_req_wnaDys", "custom_id": "request-2", "response": {"status_code": 200, "request_id": "req_c187b3", "body": {"id": "chatcmpl-9758Iw", "object": "chat.completion", "created": 1711475054, "model": "gpt-4o-mini", "choices": [{"index": 0, "message": {"role": "assistant", "content": "2 + 2 equals 4."}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 24, "completion_tokens": 15, "total_tokens": 39}, "system_fingerprint": null}}, "error": null}
    Certificate:
      required:
      - certificate_details
      - created_at
      - id
      - name
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The object type.

            - If creating, updating, or getting a specific certificate, the object type is `certificate`.
            - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
            - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.
          enum:
          - certificate
          - organization.certificate
          - organization.project.certificate
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        name:
          type: string
          description: The name of the certificate.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the certificate was
            uploaded.
        certificate_details:
          $ref: "#/components/schemas/Certificate_certificate_details"
        active:
          type: boolean
          description: Whether the certificate is currently active at the specified
            scope. Not returned when getting details for a specific certificate.
      description: Represents an individual `certificate` uploaded to the organization.
      x-oaiMeta:
        name: The certificate object
        example: |
          {
            "object": "certificate",
            "id": "cert_abc",
            "name": "My Certificate",
            "created_at": 1234567,
            "certificate_details": {
              "valid_at": 1234567,
              "expires_at": 12345678,
              "content": "-----BEGIN CERTIFICATE----- MIIGAjCCA...6znFlOW+ -----END CERTIFICATE-----"
            }
          }
    ChatCompletionDeleted:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          description: The type of object being deleted.
          enum:
          - chat.completion.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the chat completion that was deleted.
        deleted:
          type: boolean
          description: Whether the chat completion was deleted.
    ChatCompletionFunctionCallOption:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
      description: |
        Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
    ChatCompletionFunctions:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: "A description of what the function does, used by the model\
            \ to choose when and how to call the function."
        name:
          type: string
          description: "The name of the function to be called. Must be a-z, A-Z, 0-9,\
            \ or contain underscores and dashes, with a maximum length of 64."
        parameters:
          $ref: "#/components/schemas/FunctionParameters"
      deprecated: true
    ChatCompletionList:
      title: ChatCompletionList
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The type of this object. It is always set to "list".
          default: list
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of chat completion objects.
          items:
            $ref: "#/components/schemas/CreateChatCompletionResponse"
        first_id:
          type: string
          description: The identifier of the first chat completion in the data array.
        last_id:
          type: string
          description: The identifier of the last chat completion in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more Chat Completions available.
      description: |
        An object representing a list of Chat Completions.
      example:
        first_id: first_id
        data:
        - created: 3
          usage:
            completion_tokens: 2
            prompt_tokens: 4
            completion_tokens_details:
              accepted_prediction_tokens: 1
              audio_tokens: 1
              reasoning_tokens: 1
              rejected_prediction_tokens: 6
            prompt_tokens_details:
              audio_tokens: 7
              cached_tokens: 1
            total_tokens: 7
          model: model
          service_tier: auto
          id: id
          choices:
          - finish_reason: stop
            index: 0
            message:
              role: assistant
              function_call:
                name: name
                arguments: arguments
              refusal: refusal
              annotations:
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              audio:
                expires_at: 5
                transcript: transcript
                data: data
                id: id
              content: content
            logprobs:
              refusal:
              - null
              - null
              content:
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
          - finish_reason: stop
            index: 0
            message:
              role: assistant
              function_call:
                name: name
                arguments: arguments
              refusal: refusal
              annotations:
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              audio:
                expires_at: 5
                transcript: transcript
                data: data
                id: id
              content: content
            logprobs:
              refusal:
              - null
              - null
              content:
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
          system_fingerprint: system_fingerprint
          object: chat.completion
        - created: 3
          usage:
            completion_tokens: 2
            prompt_tokens: 4
            completion_tokens_details:
              accepted_prediction_tokens: 1
              audio_tokens: 1
              reasoning_tokens: 1
              rejected_prediction_tokens: 6
            prompt_tokens_details:
              audio_tokens: 7
              cached_tokens: 1
            total_tokens: 7
          model: model
          service_tier: auto
          id: id
          choices:
          - finish_reason: stop
            index: 0
            message:
              role: assistant
              function_call:
                name: name
                arguments: arguments
              refusal: refusal
              annotations:
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              audio:
                expires_at: 5
                transcript: transcript
                data: data
                id: id
              content: content
            logprobs:
              refusal:
              - null
              - null
              content:
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
          - finish_reason: stop
            index: 0
            message:
              role: assistant
              function_call:
                name: name
                arguments: arguments
              refusal: refusal
              annotations:
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              - type: url_citation
                url_citation:
                  start_index: 1
                  end_index: 6
                  title: title
                  url: url
              tool_calls:
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              - function:
                  name: name
                  arguments: arguments
                id: id
                type: function
              audio:
                expires_at: 5
                transcript: transcript
                data: data
                id: id
              content: content
            logprobs:
              refusal:
              - null
              - null
              content:
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
              - top_logprobs:
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                - logprob: 7.061401241503109
                  bytes:
                  - 9
                  - 9
                  token: token
                logprob: 5.637376656633329
                bytes:
                - 2
                - 2
                token: token
          system_fingerprint: system_fingerprint
          object: chat.completion
        last_id: last_id
        has_more: true
        object: list
      x-oaiMeta:
        name: The chat completion list object
        group: chat
        example: |
          {
            "object": "list",
            "data": [
              {
                "object": "chat.completion",
                "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
                "model": "gpt-4o-2024-08-06",
                "created": 1738960610,
                "request_id": "req_ded8ab984ec4bf840f37566c1011c417",
                "tool_choice": null,
                "usage": {
                  "total_tokens": 31,
                  "completion_tokens": 18,
                  "prompt_tokens": 13
                },
                "seed": 4944116822809979520,
                "top_p": 1.0,
                "temperature": 1.0,
                "presence_penalty": 0.0,
                "frequency_penalty": 0.0,
                "system_fingerprint": "fp_50cad350e4",
                "input_user": null,
                "service_tier": "default",
                "tools": null,
                "metadata": {},
                "choices": [
                  {
                    "index": 0,
                    "message": {
                      "content": "Mind of circuits hum,  \nLearning patterns in silenceâ€”  \nFuture's quiet spark.",
                      "role": "assistant",
                      "tool_calls": null,
                      "function_call": null
                    },
                    "finish_reason": "stop",
                    "logprobs": null
                  }
                ],
                "response_format": null
              }
            ],
            "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
            "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2",
            "has_more": false
          }
    ChatCompletionMessageList:
      title: ChatCompletionMessageList
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The type of this object. It is always set to "list".
          default: list
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of chat completion message objects.
          items:
            allOf:
            - $ref: "#/components/schemas/ChatCompletionResponseMessage"
            - required:
              - id
              type: object
              properties:
                id:
                  type: string
                  description: The identifier of the chat message.
        first_id:
          type: string
          description: The identifier of the first chat message in the data array.
        last_id:
          type: string
          description: The identifier of the last chat message in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more chat messages available.
      description: |
        An object representing a list of chat completion messages.
      x-oaiMeta:
        name: The chat completion message list object
        group: chat
        example: |
          {
            "object": "list",
            "data": [
              {
                "id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
                "role": "user",
                "content": "write a haiku about ai",
                "name": null,
                "content_parts": null
              }
            ],
            "first_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
            "last_id": "chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0",
            "has_more": false
          }
    ChatCompletionMessageToolCall:
      required:
      - function
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/ChatCompletionMessageToolCall_function"
      example:
        function:
          name: name
          arguments: arguments
        id: id
        type: function
    ChatCompletionMessageToolCallChunk:
      required:
      - index
      type: object
      properties:
        index:
          type: integer
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/ChatCompletionMessageToolCallChunk_function"
    ChatCompletionMessageToolCalls:
      type: array
      description: "The tool calls generated by the model, such as function calls."
      items:
        $ref: "#/components/schemas/ChatCompletionMessageToolCall"
    ChatCompletionModalities:
      type: array
      description: |
        Output types that you would like the model to generate for this request.
        Most models are capable of generating text, which is the default:

        `["text"]`

        The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
        request that this model generate both text and audio responses, you can
        use:

        `["text", "audio"]`
      nullable: true
      items:
        type: string
        enum:
        - text
        - audio
    ChatCompletionNamedToolChoice:
      required:
      - function
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/AssistantsNamedToolChoice_function"
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
    ChatCompletionRequestAssistantMessage:
      title: Assistant message
      required:
      - role
      type: object
      properties:
        content:
          description: |
            The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
          nullable: true
          oneOf:
          - title: Text content
            type: string
            description: The contents of the assistant message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. Can be one\
              \ or more of type `text`, or exactly one of type `refusal`."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
        refusal:
          type: string
          description: The refusal message by the assistant.
          nullable: true
        role:
          type: string
          description: "The role of the messages author, in this case `assistant`."
          enum:
          - assistant
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
        audio:
          $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage_audio"
        tool_calls:
          $ref: "#/components/schemas/ChatCompletionMessageToolCalls"
        function_call:
          $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage_function_call"
      description: |
        Messages sent by the model in response to user messages.
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartRefusal"
    ChatCompletionRequestDeveloperMessage:
      title: Developer message
      required:
      - content
      - role
      type: object
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
          - title: Text content
            type: string
            description: The contents of the developer message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. For developer\
              \ messages, only type `text` is supported."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
        role:
          type: string
          description: "The role of the messages author, in this case `developer`."
          enum:
          - developer
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      description: |
        Developer-provided instructions that the model should follow, regardless of
        messages sent by the user. With o1 models and newer, `developer` messages
        replace the previous `system` messages.
    ChatCompletionRequestFunctionMessage:
      title: Function message
      required:
      - content
      - name
      - role
      type: object
      properties:
        role:
          type: string
          description: "The role of the messages author, in this case `function`."
          enum:
          - function
          x-stainless-const: true
        content:
          type: string
          description: The contents of the function message.
          nullable: true
        name:
          type: string
          description: The name of the function to call.
      deprecated: true
    ChatCompletionRequestMessage:
      oneOf:
      - $ref: "#/components/schemas/ChatCompletionRequestDeveloperMessage"
      - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
      - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
      - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
      - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
      - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
    ChatCompletionRequestMessageContentPartAudio:
      title: Audio content part
      required:
      - input_audio
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part. Always `input_audio`.
          enum:
          - input_audio
          x-stainless-const: true
        input_audio:
          $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartAudio_input_audio"
      description: |
        Learn about [audio inputs](/docs/guides/audio).
    ChatCompletionRequestMessageContentPartFile:
      title: File content part
      required:
      - file
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part. Always `file`.
          enum:
          - file
          x-stainless-const: true
        file:
          $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartFile_file"
      description: |
        Learn about [file inputs](/docs/guides/text) for text generation.
    ChatCompletionRequestMessageContentPartImage:
      title: Image content part
      required:
      - image_url
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part.
          enum:
          - image_url
          x-stainless-const: true
        image_url:
          $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartImage_image_url"
      description: |
        Learn about [image inputs](/docs/guides/vision).
    ChatCompletionRequestMessageContentPartRefusal:
      title: Refusal content part
      required:
      - refusal
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part.
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal message generated by the model.
    ChatCompletionRequestMessageContentPartText:
      title: Text content part
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part.
          enum:
          - text
          x-stainless-const: true
        text:
          type: string
          description: The text content.
      description: |
        Learn about [text inputs](/docs/guides/text-generation).
    ChatCompletionRequestSystemMessage:
      title: System message
      required:
      - content
      - role
      type: object
      properties:
        content:
          description: The contents of the system message.
          oneOf:
          - title: Text content
            type: string
            description: The contents of the system message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. For system\
              \ messages, only type `text` is supported."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
        role:
          type: string
          description: "The role of the messages author, in this case `system`."
          enum:
          - system
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      description: |
        Developer-provided instructions that the model should follow, regardless of
        messages sent by the user. With o1 models and newer, use `developer` messages
        for this purpose instead.
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
    ChatCompletionRequestToolMessage:
      title: Tool message
      required:
      - content
      - role
      - tool_call_id
      type: object
      properties:
        role:
          type: string
          description: "The role of the messages author, in this case `tool`."
          enum:
          - tool
          x-stainless-const: true
        content:
          description: The contents of the tool message.
          oneOf:
          - title: Text content
            type: string
            description: The contents of the tool message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. For tool\
              \ messages, only type `text` is supported."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
    ChatCompletionRequestUserMessage:
      title: User message
      required:
      - content
      - role
      type: object
      properties:
        content:
          description: |
            The contents of the user message.
          oneOf:
          - title: Text content
            type: string
            description: The text contents of the message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. Supported\
              \ options differ based on the [model](/docs/models) being used to generate\
              \ the response. Can contain text, image, or audio inputs."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestUserMessageContentPart"
        role:
          type: string
          description: "The role of the messages author, in this case `user`."
          enum:
          - user
          x-stainless-const: true
        name:
          type: string
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
      description: |
        Messages sent by an end user, containing prompts or additional context
        information.
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartAudio"
      - $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartFile"
    ChatCompletionResponseMessage:
      required:
      - content
      - refusal
      - role
      type: object
      properties:
        content:
          type: string
          description: The contents of the message.
          nullable: true
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
        tool_calls:
          $ref: "#/components/schemas/ChatCompletionMessageToolCalls"
        annotations:
          type: array
          description: |
            Annotations for the message, when applicable, as when using the
            [web search tool](/docs/guides/tools-web-search?api-mode=chat).
          items:
            $ref: "#/components/schemas/ChatCompletionResponseMessage_annotations"
        role:
          type: string
          description: The role of the author of this message.
          enum:
          - assistant
          x-stainless-const: true
        function_call:
          $ref: "#/components/schemas/ChatCompletionResponseMessage_function_call"
        audio:
          $ref: "#/components/schemas/ChatCompletionResponseMessage_audio"
      description: A chat completion message generated by the model.
      example:
        role: assistant
        function_call:
          name: name
          arguments: arguments
        refusal: refusal
        annotations:
        - type: url_citation
          url_citation:
            start_index: 1
            end_index: 6
            title: title
            url: url
        - type: url_citation
          url_citation:
            start_index: 1
            end_index: 6
            title: title
            url: url
        tool_calls:
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
        - function:
            name: name
            arguments: arguments
          id: id
          type: function
        audio:
          expires_at: 5
          transcript: transcript
          data: data
          id: id
        content: content
    ChatCompletionRole:
      type: string
      description: The role of the author of a message
      enum:
      - developer
      - system
      - user
      - assistant
      - tool
      - function
    ChatCompletionStreamOptions:
      type: object
      properties:
        include_usage:
          type: boolean
          description: "If set, an additional chunk will be streamed before the `data:\
            \ [DONE]`\nmessage. The `usage` field on this chunk shows the token usage\
            \ statistics\nfor the entire request, and the `choices` field will always\
            \ be an empty\narray. \n\nAll other chunks will also include a `usage`\
            \ field, but with a null\nvalue. **NOTE:** If the stream is interrupted,\
            \ you may not receive the\nfinal usage chunk which contains the total\
            \ token usage for the request.\n"
      description: |
        Options for streaming response. Only set this when you set `stream: true`.
      nullable: true
    ChatCompletionStreamResponseDelta:
      type: object
      properties:
        content:
          type: string
          description: The contents of the chunk message.
          nullable: true
        function_call:
          $ref: "#/components/schemas/ChatCompletionStreamResponseDelta_function_call"
        tool_calls:
          type: array
          items:
            $ref: "#/components/schemas/ChatCompletionMessageToolCallChunk"
        role:
          type: string
          description: The role of the author of this message.
          enum:
          - developer
          - system
          - user
          - assistant
          - tool
        refusal:
          type: string
          description: The refusal message generated by the model.
          nullable: true
      description: A chat completion delta generated by streamed model responses.
    ChatCompletionTokenLogprob:
      required:
      - bytes
      - logprob
      - token
      - top_logprobs
      type: object
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          description: "The log probability of this token, if it is within the top\
            \ 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify\
            \ that the token is very unlikely."
        bytes:
          type: array
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          nullable: true
          items:
            type: integer
        top_logprobs:
          type: array
          description: "List of the most likely tokens and their log probability,\
            \ at this token position. In rare cases, there may be fewer than the number\
            \ of requested `top_logprobs` returned."
          items:
            $ref: "#/components/schemas/ChatCompletionTokenLogprob_top_logprobs"
      example:
        top_logprobs:
        - logprob: 7.061401241503109
          bytes:
          - 9
          - 9
          token: token
        - logprob: 7.061401241503109
          bytes:
          - 9
          - 9
          token: token
        logprob: 5.637376656633329
        bytes:
        - 2
        - 2
        token: token
    ChatCompletionTool:
      required:
      - function
      - type
      type: object
      properties:
        type:
          type: string
          description: "The type of the tool. Currently, only `function` is supported."
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/FunctionObject"
    ChatCompletionToolChoiceOption:
      description: |
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tool and instead generates a message.
        `auto` means the model can pick between generating a message or calling one or more tools.
        `required` means the model must call one or more tools.
        Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.

        `none` is the default when no tools are present. `auto` is the default if tools are present.
      oneOf:
      - type: string
        description: |
          `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
        enum:
        - none
        - auto
        - required
      - $ref: "#/components/schemas/ChatCompletionNamedToolChoice"
    ChunkingStrategyRequestParam:
      type: object
      description: "The chunking strategy used to chunk the file(s). If not set, will\
        \ use the `auto` strategy."
      oneOf:
      - $ref: "#/components/schemas/AutoChunkingStrategyRequestParam"
      - $ref: "#/components/schemas/StaticChunkingStrategyRequestParam"
    Click:
      title: Click
      required:
      - button
      - type
      - x
      - "y"
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a click action, this property\
            \ is \nalways set to `click`.\n"
          default: click
          enum:
          - click
          x-stainless-const: true
        button:
          type: string
          description: |
            Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.
          enum:
          - left
          - right
          - wheel
          - back
          - forward
        x:
          type: integer
          description: |
            The x-coordinate where the click occurred.
        "y":
          type: integer
          description: |
            The y-coordinate where the click occurred.
      description: |
        A click action.
    CodeInterpreterFileOutput:
      title: Code interpreter file output
      required:
      - files
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the code interpreter file output. Always `files`.
          enum:
          - files
          x-stainless-const: true
        files:
          type: array
          items:
            $ref: "#/components/schemas/CodeInterpreterFileOutput_files"
      description: |
        The output of a code interpreter tool call that is a file.
    CodeInterpreterTextOutput:
      title: Code interpreter text output
      required:
      - logs
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the code interpreter text output. Always `logs`.
          enum:
          - logs
          x-stainless-const: true
        logs:
          type: string
          description: |
            The logs of the code interpreter tool call.
      description: |
        The output of a code interpreter tool call that is text.
    CodeInterpreterToolCall:
      title: Code interpreter tool call
      required:
      - code
      - id
      - results
      - status
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the code interpreter tool call.
        type:
          type: string
          description: |
            The type of the code interpreter tool call. Always `code_interpreter_call`.
          enum:
          - code_interpreter_call
          x-stainless-const: true
        code:
          type: string
          description: |
            The code to run.
        status:
          type: string
          description: |
            The status of the code interpreter tool call.
          enum:
          - in_progress
          - interpreting
          - completed
        results:
          type: array
          description: |
            The results of the code interpreter tool call.
          items:
            $ref: "#/components/schemas/CodeInterpreterToolOutput"
      description: |
        A tool call to run code.
    CodeInterpreterToolOutput:
      oneOf:
      - $ref: "#/components/schemas/CodeInterpreterTextOutput"
      - $ref: "#/components/schemas/CodeInterpreterFileOutput"
    ComparisonFilter:
      title: Comparison Filter
      required:
      - key
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: |
            Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
            - `eq`: equals
            - `ne`: not equal
            - `gt`: greater than
            - `gte`: greater than or equal
            - `lt`: less than
            - `lte`: less than or equal
          default: eq
          enum:
          - eq
          - ne
          - gt
          - gte
          - lt
          - lte
        key:
          type: string
          description: The key to compare against the value.
        value:
          description: "The value to compare against the attribute key; supports string,\
            \ number, or boolean types."
          oneOf:
          - type: string
          - type: number
          - type: boolean
      additionalProperties: false
      description: |
        A filter used to compare a specified attribute key to a given value using a defined comparison operation.
      x-oaiMeta:
        name: ComparisonFilter
    CompleteUploadRequest:
      required:
      - part_ids
      type: object
      properties:
        part_ids:
          type: array
          description: |
            The ordered list of Part IDs.
          items:
            type: string
        md5:
          type: string
          description: |
            The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
      additionalProperties: false
    CompletionUsage:
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
          description: Number of tokens in the generated completion.
          default: 0
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt.
          default: 0
        total_tokens:
          type: integer
          description: Total number of tokens used in the request (prompt + completion).
          default: 0
        completion_tokens_details:
          $ref: "#/components/schemas/CompletionUsage_completion_tokens_details"
        prompt_tokens_details:
          $ref: "#/components/schemas/CompletionUsage_prompt_tokens_details"
      description: Usage statistics for the completion request.
      example:
        completion_tokens: 2
        prompt_tokens: 4
        completion_tokens_details:
          accepted_prediction_tokens: 1
          audio_tokens: 1
          reasoning_tokens: 1
          rejected_prediction_tokens: 6
        prompt_tokens_details:
          audio_tokens: 7
          cached_tokens: 1
        total_tokens: 7
    CompoundFilter:
      title: Compound Filter
      required:
      - filters
      - type
      type: object
      properties:
        type:
          type: string
          description: "Type of operation: `and` or `or`."
          enum:
          - and
          - or
        filters:
          type: array
          description: Array of filters to combine. Items can be `ComparisonFilter`
            or `CompoundFilter`.
          items:
            oneOf:
            - $ref: "#/components/schemas/ComparisonFilter"
            - {}
      additionalProperties: false
      description: Combine multiple filters using `and` or `or`.
      x-oaiMeta:
        name: CompoundFilter
    ComputerAction:
      oneOf:
      - $ref: "#/components/schemas/Click"
      - $ref: "#/components/schemas/DoubleClick"
      - $ref: "#/components/schemas/Drag"
      - $ref: "#/components/schemas/KeyPress"
      - $ref: "#/components/schemas/Move"
      - $ref: "#/components/schemas/Screenshot"
      - $ref: "#/components/schemas/Scroll"
      - $ref: "#/components/schemas/Type"
      - $ref: "#/components/schemas/Wait"
    ComputerScreenshotImage:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a computer screenshot, this\
            \ property is \nalways set to `computer_screenshot`.\n"
          default: computer_screenshot
          enum:
          - computer_screenshot
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the screenshot image.
        file_id:
          type: string
          description: The identifier of an uploaded file that contains the screenshot.
      description: |
        A computer screenshot image used with the computer use tool.
    ComputerToolCall:
      title: Computer tool call
      required:
      - action
      - call_id
      - id
      - pending_safety_checks
      - status
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          default: computer_call
          enum:
          - computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: |
            An identifier used when responding to the tool call with output.
        action:
          $ref: "#/components/schemas/ComputerAction"
        pending_safety_checks:
          type: array
          description: |
            The pending safety checks for the computer call.
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use)\
        \ for more information.\n"
    ComputerToolCallOutput:
      title: Computer tool call output
      required:
      - call_id
      - output
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the computer tool call output. Always `computer_call_output`.
          default: computer_call_output
          enum:
          - computer_call_output
          x-stainless-const: true
        id:
          type: string
          description: |
            The ID of the computer tool call output.
        call_id:
          type: string
          description: |
            The ID of the computer tool call that produced the output.
        acknowledged_safety_checks:
          type: array
          description: "The safety checks reported by the API that have been acknowledged\
            \ by the \ndeveloper.\n"
          items:
            $ref: "#/components/schemas/ComputerToolCallSafetyCheck"
        output:
          $ref: "#/components/schemas/ComputerScreenshotImage"
        status:
          type: string
          description: |
            The status of the message input. One of `in_progress`, `completed`, or
            `incomplete`. Populated when input items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: |
        The output of a computer tool call.
    ComputerToolCallOutputResource:
      allOf:
      - $ref: "#/components/schemas/ComputerToolCallOutput"
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: |
              The unique ID of the computer call tool output.
    ComputerToolCallSafetyCheck:
      required:
      - code
      - id
      - message
      type: object
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          type: string
          description: The type of the pending safety check.
        message:
          type: string
          description: Details about the pending safety check.
      description: |
        A pending safety check for the computer call.
    Content:
      description: |
        Multi-modal input and output contents.
      oneOf:
      - $ref: "#/components/schemas/InputContent"
      - $ref: "#/components/schemas/OutputContent"
    Coordinate:
      title: Coordinate
      required:
      - x
      - "y"
      type: object
      properties:
        x:
          type: integer
          description: |
            The x-coordinate.
        "y":
          type: integer
          description: |
            The y-coordinate.
      description: |
        An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
    CostsResult:
      required:
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.costs.result
          x-stainless-const: true
        amount:
          $ref: "#/components/schemas/CostsResult_amount"
        line_item:
          type: string
          description: "When `group_by=line_item`, this field provides the line item\
            \ of the grouped costs result."
          nullable: true
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped costs result."
          nullable: true
      description: The aggregated costs details of the specific time bucket.
      x-oaiMeta:
        name: Costs object
        example: |
          {
              "object": "organization.costs.result",
              "amount": {
                "value": 0.06,
                "currency": "usd"
              },
              "line_item": "Image models",
              "project_id": "proj_abc"
          }
    CreateAssistantRequest:
      required:
      - model
      type: object
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
          example: gpt-4o
          anyOf:
          - type: string
          - $ref: "#/components/schemas/AssistantSupportedModels"
          x-oaiTypeLabel: string
        name:
          maxLength: 256
          type: string
          description: |
            The name of the assistant. The maximum length is 256 characters.
          nullable: true
        description:
          maxLength: 512
          type: string
          description: |
            The description of the assistant. The maximum length is 512 characters.
          nullable: true
        instructions:
          maxLength: 256000
          type: string
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          nullable: true
        reasoning_effort:
          $ref: "#/components/schemas/ReasoningEffort"
        tools:
          maxItems: 128
          type: array
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
          default: []
        tool_resources:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          nullable: true
          example: 1
          default: 1
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      additionalProperties: false
    CreateChatCompletionRequest:
      allOf:
      - $ref: "#/components/schemas/CreateModelResponseProperties"
      - required:
        - messages
        - model
        type: object
        properties:
          messages:
            minItems: 1
            type: array
            description: |
              A list of messages comprising the conversation so far. Depending on the
              [model](/docs/models) you use, different message types (modalities) are
              supported, like [text](/docs/guides/text-generation),
              [images](/docs/guides/vision), and [audio](/docs/guides/audio).
            items:
              $ref: "#/components/schemas/ChatCompletionRequestMessage"
          model:
            $ref: "#/components/schemas/ModelIdsShared"
          modalities:
            $ref: "#/components/schemas/ResponseModalities"
          reasoning_effort:
            $ref: "#/components/schemas/ReasoningEffort"
          max_completion_tokens:
            type: integer
            description: |
              An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
            nullable: true
          frequency_penalty:
            maximum: 2
            minimum: -2
            type: number
            description: |
              Number between -2.0 and 2.0. Positive values penalize new tokens based on
              their existing frequency in the text so far, decreasing the model's
              likelihood to repeat the same line verbatim.
            nullable: true
            default: 0
          presence_penalty:
            maximum: 2
            minimum: -2
            type: number
            description: |
              Number between -2.0 and 2.0. Positive values penalize new tokens based on
              whether they appear in the text so far, increasing the model's likelihood
              to talk about new topics.
            nullable: true
            default: 0
          web_search_options:
            $ref: "#/components/schemas/Web search"
          top_logprobs:
            maximum: 20
            minimum: 0
            type: integer
            description: |
              An integer between 0 and 20 specifying the number of most likely tokens to
              return at each token position, each with an associated log probability.
              `logprobs` must be set to `true` if this parameter is used.
            nullable: true
          response_format:
            description: |
              An object specifying the format that the model must output.

              Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
              Structured Outputs which ensures the model will match your supplied JSON
              schema. Learn more in the [Structured Outputs
              guide](/docs/guides/structured-outputs).

              Setting to `{ "type": "json_object" }` enables the older JSON mode, which
              ensures the message the model generates is valid JSON. Using `json_schema`
              is preferred for models that support it.
            oneOf:
            - $ref: "#/components/schemas/ResponseFormatText"
            - $ref: "#/components/schemas/ResponseFormatJsonSchema"
            - $ref: "#/components/schemas/ResponseFormatJsonObject"
          audio:
            $ref: "#/components/schemas/CreateChatCompletionRequest_audio"
          store:
            type: boolean
            description: "Whether or not to store the output of this chat completion\
              \ request for \nuse in our [model distillation](/docs/guides/distillation)\
              \ or\n[evals](/docs/guides/evals) products.\n"
            nullable: true
            default: false
          stream:
            type: boolean
            description: |
              If set to true, the model response data will be streamed to the client
              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
              See the [Streaming section below](/docs/api-reference/chat/streaming)
              for more information, along with the [streaming responses](/docs/guides/streaming-responses)
              guide for more information on how to handle the streaming events.
            nullable: true
            default: false
          stop:
            $ref: "#/components/schemas/StopConfiguration"
          logit_bias:
            type: object
            additionalProperties:
              type: integer
            description: |
              Modify the likelihood of specified tokens appearing in the completion.

              Accepts a JSON object that maps tokens (specified by their token ID in the
              tokenizer) to an associated bias value from -100 to 100. Mathematically,
              the bias is added to the logits generated by the model prior to sampling.
              The exact effect will vary per model, but values between -1 and 1 should
              decrease or increase likelihood of selection; values like -100 or 100
              should result in a ban or exclusive selection of the relevant token.
            nullable: true
            x-oaiTypeLabel: map
          logprobs:
            type: boolean
            description: |
              Whether to return log probabilities of the output tokens or not. If true,
              returns the log probabilities of each output token returned in the
              `content` of `message`.
            nullable: true
            default: false
          max_tokens:
            type: integer
            description: |
              The maximum number of [tokens](/tokenizer) that can be generated in the
              chat completion. This value can be used to control
              [costs](https://openai.com/api/pricing/) for text generated via API.

              This value is now deprecated in favor of `max_completion_tokens`, and is
              not compatible with [o-series models](/docs/guides/reasoning).
            nullable: true
            deprecated: true
          "n":
            maximum: 128
            minimum: 1
            type: integer
            description: How many chat completion choices to generate for each input
              message. Note that you will be charged based on the number of generated
              tokens across all of the choices. Keep `n` as `1` to minimize costs.
            nullable: true
            example: 1
            default: 1
          prediction:
            description: |
              Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
              which can greatly improve response times when large parts of the model
              response are known ahead of time. This is most common when you are
              regenerating a file with only minor changes to most of the content.
            nullable: true
            oneOf:
            - $ref: "#/components/schemas/PredictionContent"
          seed:
            maximum: 9223372036854776000
            minimum: -9223372036854776000
            type: integer
            description: |
              This feature is in Beta.
              If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
              Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            nullable: true
            x-oaiMeta:
              beta: true
          stream_options:
            $ref: "#/components/schemas/ChatCompletionStreamOptions"
          tools:
            type: array
            description: |
              A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
            items:
              $ref: "#/components/schemas/ChatCompletionTool"
          tool_choice:
            $ref: "#/components/schemas/ChatCompletionToolChoiceOption"
          parallel_tool_calls:
            $ref: "#/components/schemas/ParallelToolCalls"
          function_call:
            description: |
              Deprecated in favor of `tool_choice`.

              Controls which (if any) function is called by the model.

              `none` means the model will not call a function and instead generates a
              message.

              `auto` means the model can pick between generating a message or calling a
              function.

              Specifying a particular function via `{"name": "my_function"}` forces the
              model to call that function.

              `none` is the default when no functions are present. `auto` is the default
              if functions are present.
            deprecated: true
            oneOf:
            - type: string
              description: |
                `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
              enum:
              - none
              - auto
            - $ref: "#/components/schemas/ChatCompletionFunctionCallOption"
          functions:
            maxItems: 128
            minItems: 1
            type: array
            description: |
              Deprecated in favor of `tools`.

              A list of functions the model may generate JSON inputs for.
            deprecated: true
            items:
              $ref: "#/components/schemas/ChatCompletionFunctions"
    CreateChatCompletionResponse:
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            $ref: "#/components/schemas/CreateChatCompletionResponse_choices"
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
        model:
          type: string
          description: The model used for the chat completion.
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
        system_fingerprint:
          type: string
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          description: "The object type, which is always `chat.completion`."
          enum:
          - chat.completion
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      description: "Represents a chat completion response returned by model, based\
        \ on the provided input."
      example:
        created: 3
        usage:
          completion_tokens: 2
          prompt_tokens: 4
          completion_tokens_details:
            accepted_prediction_tokens: 1
            audio_tokens: 1
            reasoning_tokens: 1
            rejected_prediction_tokens: 6
          prompt_tokens_details:
            audio_tokens: 7
            cached_tokens: 1
          total_tokens: 7
        model: model
        service_tier: auto
        id: id
        choices:
        - finish_reason: stop
          index: 0
          message:
            role: assistant
            function_call:
              name: name
              arguments: arguments
            refusal: refusal
            annotations:
            - type: url_citation
              url_citation:
                start_index: 1
                end_index: 6
                title: title
                url: url
            - type: url_citation
              url_citation:
                start_index: 1
                end_index: 6
                title: title
                url: url
            tool_calls:
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            audio:
              expires_at: 5
              transcript: transcript
              data: data
              id: id
            content: content
          logprobs:
            refusal:
            - null
            - null
            content:
            - top_logprobs:
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              logprob: 5.637376656633329
              bytes:
              - 2
              - 2
              token: token
            - top_logprobs:
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              logprob: 5.637376656633329
              bytes:
              - 2
              - 2
              token: token
        - finish_reason: stop
          index: 0
          message:
            role: assistant
            function_call:
              name: name
              arguments: arguments
            refusal: refusal
            annotations:
            - type: url_citation
              url_citation:
                start_index: 1
                end_index: 6
                title: title
                url: url
            - type: url_citation
              url_citation:
                start_index: 1
                end_index: 6
                title: title
                url: url
            tool_calls:
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            - function:
                name: name
                arguments: arguments
              id: id
              type: function
            audio:
              expires_at: 5
              transcript: transcript
              data: data
              id: id
            content: content
          logprobs:
            refusal:
            - null
            - null
            content:
            - top_logprobs:
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              logprob: 5.637376656633329
              bytes:
              - 2
              - 2
              token: token
            - top_logprobs:
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              - logprob: 7.061401241503109
                bytes:
                - 9
                - 9
                token: token
              logprob: 5.637376656633329
              bytes:
              - 2
              - 2
              token: token
        system_fingerprint: system_fingerprint
        object: chat.completion
      x-oaiMeta:
        name: The chat completion object
        group: chat
        example: |
          {
            "id": "chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG",
            "object": "chat.completion",
            "created": 1741570283,
            "model": "gpt-4o-2024-08-06",
            "choices": [
              {
                "index": 0,
                "message": {
                  "role": "assistant",
                  "content": "The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.",
                  "refusal": null,
                  "annotations": []
                },
                "logprobs": null,
                "finish_reason": "stop"
              }
            ],
            "usage": {
              "prompt_tokens": 1117,
              "completion_tokens": 46,
              "total_tokens": 1163,
              "prompt_tokens_details": {
                "cached_tokens": 0,
                "audio_tokens": 0
              },
              "completion_tokens_details": {
                "reasoning_tokens": 0,
                "audio_tokens": 0,
                "accepted_prediction_tokens": 0,
                "rejected_prediction_tokens": 0
              }
            },
            "service_tier": "default",
            "system_fingerprint": "fp_fc9f1d7035"
          }
    CreateChatCompletionStreamResponse:
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has
            the same ID.
        choices:
          type: array
          description: |
            A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            last chunk if you set `stream_options: {"include_usage": true}`.
          items:
            $ref: "#/components/schemas/CreateChatCompletionStreamResponse_choices"
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion
            was created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
        system_fingerprint:
          type: string
          description: |
            This fingerprint represents the backend configuration that the model runs with.
            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          description: "The object type, which is always `chat.completion.chunk`."
          enum:
          - chat.completion.chunk
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      description: "Represents a streamed chunk of a chat completion response returned\n\
        by the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n"
      x-oaiMeta:
        name: The chat completion chunk object
        group: chat
        example: |
          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}

          ....

          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini", "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}
    CreateCompletionRequest:
      required:
      - model
      - prompt
      type: object
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
          anyOf:
          - type: string
          - type: string
            enum:
            - gpt-3.5-turbo-instruct
            - davinci-002
            - babbage-002
          x-oaiTypeLabel: string
        prompt:
          description: |
            The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

            Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
          nullable: true
          oneOf:
          - type: string
            example: This is a test.
            default: ""
          - type: array
            items:
              type: string
              example: This is a test.
              default: ""
          - minItems: 1
            type: array
            example: "[1212, 318, 257, 1332, 13]"
            items:
              type: integer
          - minItems: 1
            type: array
            example: "[[1212, 318, 257, 1332, 13]]"
            items:
              minItems: 1
              type: array
              items:
                type: integer
          default: <|endoftext|>
        best_of:
          maximum: 20
          minimum: 0
          type: integer
          description: |
            Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

            When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          nullable: true
          default: 1
        echo:
          type: boolean
          description: |
            Echo back the prompt in addition to the completion
          nullable: true
          default: false
        frequency_penalty:
          maximum: 2
          minimum: -2
          type: number
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation)
          nullable: true
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: integer
          description: |
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
          nullable: true
          x-oaiTypeLabel: map
        logprobs:
          maximum: 5
          minimum: 0
          type: integer
          description: |
            Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

            The maximum value for `logprobs` is 5.
          nullable: true
        max_tokens:
          minimum: 0
          type: integer
          description: |
            The maximum number of [tokens](/tokenizer) that can be generated in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
          nullable: true
          example: 16
          default: 16
        "n":
          maximum: 128
          minimum: 1
          type: integer
          description: |
            How many completions to generate for each prompt.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          nullable: true
          example: 1
          default: 1
        presence_penalty:
          maximum: 2
          minimum: -2
          type: number
          description: |
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation)
          nullable: true
          default: 0
        seed:
          type: integer
          description: |
            If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
          format: int64
          nullable: true
        stop:
          $ref: "#/components/schemas/StopConfiguration"
        stream:
          type: boolean
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
          nullable: true
          default: false
        stream_options:
          $ref: "#/components/schemas/ChatCompletionStreamOptions"
        suffix:
          type: string
          description: |
            The suffix that comes after a completion of inserted text.

            This parameter is only supported for `gpt-3.5-turbo-instruct`.
          nullable: true
          example: test.
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          nullable: true
          example: 1
          default: 1
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
    CreateCompletionResponse:
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the completion.
        choices:
          type: array
          description: The list of completion choices the model generated for the
            input prompt.
          items:
            $ref: "#/components/schemas/CreateCompletionResponse_choices"
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the completion was
            created.
        model:
          type: string
          description: The model used for completion.
        system_fingerprint:
          type: string
          description: |
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          description: "The object type, which is always \"text_completion\""
          enum:
          - text_completion
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CompletionUsage"
      description: |
        Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
      x-oaiMeta:
        name: The completion object
        legacy: true
        example: |
          {
            "id": "cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7",
            "object": "text_completion",
            "created": 1589478378,
            "model": "gpt-4-turbo",
            "choices": [
              {
                "text": "\n\nThis is indeed a test",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
              }
            ],
            "usage": {
              "prompt_tokens": 5,
              "completion_tokens": 7,
              "total_tokens": 12
            }
          }
    CreateEmbeddingRequest:
      required:
      - input
      - model
      type: object
      properties:
        input:
          description: |
            Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.
          example: The quick brown fox jumped over the lazy dog
          oneOf:
          - title: string
            type: string
            description: The string that will be turned into an embedding.
            example: This is a test.
            default: ""
          - title: array
            maxItems: 2048
            minItems: 1
            type: array
            description: The array of strings that will be turned into an embedding.
            items:
              type: string
              example: "['This is a test.']"
              default: ""
          - title: array
            maxItems: 2048
            minItems: 1
            type: array
            description: The array of integers that will be turned into an embedding.
            example: "[1212, 318, 257, 1332, 13]"
            items:
              type: integer
          - title: array
            maxItems: 2048
            minItems: 1
            type: array
            description: The array of arrays containing integers that will be turned
              into an embedding.
            example: "[[1212, 318, 257, 1332, 13]]"
            items:
              minItems: 1
              type: array
              items:
                type: integer
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
          example: text-embedding-3-small
          anyOf:
          - type: string
          - type: string
            enum:
            - text-embedding-ada-002
            - text-embedding-3-small
            - text-embedding-3-large
          x-oaiTypeLabel: string
        encoding_format:
          type: string
          description: "The format to return the embeddings in. Can be either `float`\
            \ or [`base64`](https://pypi.org/project/pybase64/)."
          example: float
          default: float
          enum:
          - float
          - base64
        dimensions:
          minimum: 1
          type: integer
          description: |
            The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
      additionalProperties: false
    CreateEmbeddingResponse:
      required:
      - data
      - model
      - object
      - usage
      type: object
      properties:
        data:
          type: array
          description: The list of embeddings generated by the model.
          items:
            $ref: "#/components/schemas/Embedding"
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          description: "The object type, which is always \"list\"."
          enum:
          - list
          x-stainless-const: true
        usage:
          $ref: "#/components/schemas/CreateEmbeddingResponse_usage"
    CreateEvalCompletionsRunDataSource:
      title: CompletionsRunDataSource
      required:
      - source
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of run data source. Always `completions`.
          default: completions
          enum:
          - completions
        input_messages:
          oneOf:
          - title: TemplateInputMessages
            required:
            - template
            - type
            type: object
            properties:
              type:
                type: string
                description: The type of input messages. Always `template`.
                enum:
                - template
              template:
                type: array
                description: "A list of chat messages forming the prompt or context.\
                  \ May include variable references to the \"item\" namespace, ie\
                  \ {{item.name}}."
                items:
                  oneOf:
                  - $ref: "#/components/schemas/EasyInputMessage"
                  - $ref: "#/components/schemas/EvalItem"
          - title: ItemReferenceInputMessages
            required:
            - item_reference
            - type
            type: object
            properties:
              type:
                type: string
                description: The type of input messages. Always `item_reference`.
                enum:
                - item_reference
              item_reference:
                type: string
                description: "A reference to a variable in the \"item\" namespace.\
                  \ Ie, \"item.name\""
        sampling_params:
          $ref: "#/components/schemas/CreateEvalCompletionsRunDataSource_sampling_params"
        model:
          type: string
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
        source:
          oneOf:
          - $ref: "#/components/schemas/EvalJsonlFileContentSource"
          - $ref: "#/components/schemas/EvalJsonlFileIdSource"
          - $ref: "#/components/schemas/EvalStoredCompletionsSource"
      description: |
        A CompletionsRunDataSource object describing a model sampling configuration.
      x-oaiMeta:
        name: The completions data source object used to configure an individual run
        group: eval runs
        example: |
          {
            "name": "gpt-4o-mini-2024-07-18",
            "data_source": {
              "type": "completions",
              "input_messages": {
                "type": "item_reference",
                "item_reference": "item.input"
              },
              "model": "gpt-4o-mini-2024-07-18",
              "source": {
                "type": "stored_completions",
                "model": "gpt-4o-mini-2024-07-18"
              }
            }
          }
    CreateEvalCustomDataSourceConfig:
      title: CustomDataSourceConfig
      required:
      - item_schema
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of data source. Always `custom`.
          default: custom
          enum:
          - custom
          x-stainless-const: true
        item_schema:
          type: object
          additionalProperties: true
          description: The json schema for each row in the data source.
          example: |
            {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "age": {"type": "integer"}
              },
              "required": ["name", "age"]
            }
        include_sample_schema:
          type: boolean
          description: "Whether the eval should expect you to populate the sample\
            \ namespace (ie, by generating responses off of your data source)"
          default: false
      description: |
        A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.
        This schema is used to define the shape of the data that will be:
        - Used to define your testing criteria and
        - What data is required when creating a run
      x-oaiMeta:
        name: The eval file data source config object
        group: evals
        example: |
          {
            "type": "custom",
            "item_schema": {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "age": {"type": "integer"}
              },
              "required": ["name", "age"]
            },
            "include_sample_schema": true
          }
    CreateEvalItem:
      title: CreateEvalItem
      type: object
      description: "A chat message that makes up the prompt or context. May include\
        \ variable references to the \"item\" namespace, ie {{item.name}}."
      oneOf:
      - title: SimpleInputMessage
        required:
        - content
        - role
        type: object
        properties:
          role:
            type: string
            description: "The role of the message (e.g. \"system\", \"assistant\"\
              , \"user\")."
          content:
            type: string
            description: The content of the message.
      - $ref: "#/components/schemas/EvalItem"
      x-oaiMeta:
        name: The chat message object used to configure an individual run
    CreateEvalJsonlRunDataSource:
      title: JsonlRunDataSource
      required:
      - source
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of data source. Always `jsonl`.
          default: jsonl
          enum:
          - jsonl
          x-stainless-const: true
        source:
          oneOf:
          - $ref: "#/components/schemas/EvalJsonlFileContentSource"
          - $ref: "#/components/schemas/EvalJsonlFileIdSource"
      description: "A JsonlRunDataSource object with that specifies a JSONL file that\
        \ matches the eval \n"
      x-oaiMeta:
        name: The file data source object for the eval run configuration
        group: evals
        example: |
          {
           "type": "jsonl",
           "source": {
             "type": "file_id",
             "id": "file-9GYS6xbkWgWhmE7VoLUWFg"
           }
          }
    CreateEvalLabelModelGrader:
      title: LabelModelGrader
      required:
      - input
      - labels
      - model
      - name
      - passing_labels
      - type
      type: object
      properties:
        type:
          type: string
          description: "The object type, which is always `label_model`."
          enum:
          - label_model
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation. Must support structured
            outputs.
        input:
          type: array
          description: "A list of chat messages forming the prompt or context. May\
            \ include variable references to the \"item\" namespace, ie {{item.name}}."
          items:
            $ref: "#/components/schemas/CreateEvalItem"
        labels:
          type: array
          description: The labels to classify to each item in the evaluation.
          items:
            type: string
        passing_labels:
          type: array
          description: The labels that indicate a passing result. Must be a subset
            of labels.
          items:
            type: string
      description: |
        A LabelModelGrader object which uses a model to assign labels to each item
        in the evaluation.
      x-oaiMeta:
        name: The eval label model grader object
        group: evals
        example: |
          {
            "type": "label_model",
            "model": "gpt-4o-2024-08-06",
            "input": [
              {
                "role": "system",
                "content": "Classify the sentiment of the following statement as one of 'positive', 'neutral', or 'negative'"
              },
              {
                "role": "user",
                "content": "Statement: {{item.response}}"
              }
            ],
            "passing_labels": ["positive"],
            "labels": ["positive", "neutral", "negative"],
            "name": "Sentiment label grader"
          }
    CreateEvalLogsDataSourceConfig:
      title: LogsDataSourceConfig
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of data source. Always `logs`.
          default: logs
          enum:
          - logs
          x-stainless-const: true
        metadata:
          type: object
          additionalProperties: true
          description: Metadata filters for the logs data source.
          example: |
            {
              "use_case": "customer_support_agent"
            }
      description: |
        A data source config which specifies the metadata property of your stored completions query.
        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
      x-oaiMeta:
        name: The logs data source object for evals
        group: evals
        example: |
          {
            "type": "logs",
            "metadata": {
              "use_case": "customer_support_agent"
            }
          }
    CreateEvalRequest:
      title: CreateEvalRequest
      required:
      - data_source_config
      - testing_criteria
      type: object
      properties:
        name:
          type: string
          description: The name of the evaluation.
        metadata:
          $ref: "#/components/schemas/Metadata"
        data_source_config:
          type: object
          description: The configuration for the data source used for the evaluation
            runs.
          oneOf:
          - $ref: "#/components/schemas/CreateEvalCustomDataSourceConfig"
          - $ref: "#/components/schemas/CreateEvalLogsDataSourceConfig"
        testing_criteria:
          type: array
          description: A list of graders for all eval runs in this group.
          items:
            oneOf:
            - $ref: "#/components/schemas/CreateEvalLabelModelGrader"
            - $ref: "#/components/schemas/EvalStringCheckGrader"
            - $ref: "#/components/schemas/EvalTextSimilarityGrader"
            - $ref: "#/components/schemas/EvalPythonGrader"
            - $ref: "#/components/schemas/EvalScoreModelGrader"
    CreateEvalResponsesRunDataSource:
      title: ResponsesRunDataSource
      required:
      - source
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of run data source. Always `completions`.
          default: completions
          enum:
          - completions
        input_messages:
          oneOf:
          - required:
            - template
            - type
            type: object
            properties:
              type:
                type: string
                description: The type of input messages. Always `template`.
                enum:
                - template
              template:
                type: array
                description: "A list of chat messages forming the prompt or context.\
                  \ May include variable references to the \"item\" namespace, ie\
                  \ {{item.name}}."
                items:
                  oneOf:
                  - title: ChatMessage
                    required:
                    - content
                    - role
                    type: object
                    properties:
                      role:
                        type: string
                        description: "The role of the message (e.g. \"system\", \"\
                          assistant\", \"user\")."
                      content:
                        type: string
                        description: The content of the message.
                  - $ref: "#/components/schemas/EvalItem"
          - required:
            - item_reference
            - type
            type: object
            properties:
              type:
                type: string
                description: The type of input messages. Always `item_reference`.
                enum:
                - item_reference
              item_reference:
                type: string
                description: "A reference to a variable in the \"item\" namespace.\
                  \ Ie, \"item.name\""
        sampling_params:
          $ref: "#/components/schemas/CreateEvalCompletionsRunDataSource_sampling_params"
        model:
          type: string
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
        source:
          oneOf:
          - $ref: "#/components/schemas/EvalJsonlFileContentSource"
          - $ref: "#/components/schemas/EvalJsonlFileIdSource"
          - $ref: "#/components/schemas/EvalResponsesSource"
      description: |
        A ResponsesRunDataSource object describing a model sampling configuration.
      x-oaiMeta:
        name: The completions data source object used to configure an individual run
        group: eval runs
        example: |
          {
            "name": "gpt-4o-mini-2024-07-18",
            "data_source": {
              "type": "completions",
              "input_messages": {
                "type": "item_reference",
                "item_reference": "item.input"
              },
              "model": "gpt-4o-mini-2024-07-18",
              "source": {
                "type": "stored_completions",
                "model": "gpt-4o-mini-2024-07-18"
              }
            }
          }
    CreateEvalRunRequest:
      title: CreateEvalRunRequest
      required:
      - data_source
      type: object
      properties:
        name:
          type: string
          description: The name of the run.
        metadata:
          $ref: "#/components/schemas/Metadata"
        data_source:
          type: object
          description: Details about the run's data source.
          oneOf:
          - $ref: "#/components/schemas/CreateEvalJsonlRunDataSource"
          - $ref: "#/components/schemas/CreateEvalCompletionsRunDataSource"
          - $ref: "#/components/schemas/CreateEvalResponsesRunDataSource"
    CreateFileRequest:
      required:
      - file
      - purpose
      type: object
      properties:
        file:
          type: string
          description: |
            The File object (not file name) to be uploaded.
          format: binary
        purpose:
          type: string
          description: |
            The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
          - user_data
          - evals
      additionalProperties: false
    CreateFineTuningCheckpointPermissionRequest:
      required:
      - project_ids
      type: object
      properties:
        project_ids:
          type: array
          description: The project identifiers to grant access to.
          items:
            type: string
      additionalProperties: false
    CreateFineTuningJobRequest:
      required:
      - model
      - training_file
      type: object
      properties:
        model:
          description: |
            The name of the model to fine-tune. You can select one of the
            [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
          example: gpt-4o-mini
          anyOf:
          - type: string
          - type: string
            enum:
            - babbage-002
            - davinci-002
            - gpt-3.5-turbo
            - gpt-4o-mini
          x-oaiTypeLabel: string
        training_file:
          type: string
          description: |
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/create) for how to upload a file.

            Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

            The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
          example: file-abc123
        hyperparameters:
          $ref: "#/components/schemas/CreateFineTuningJobRequest_hyperparameters"
        suffix:
          maxLength: 64
          minLength: 1
          type: string
          description: |
            A string of up to 64 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
          nullable: true
        validation_file:
          type: string
          description: |
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation
            metrics periodically during fine-tuning. These metrics can be viewed in
            the fine-tuning results file.
            The same data should not be present in both train and validation files.

            Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
          nullable: true
          example: file-abc123
        integrations:
          type: array
          description: A list of integrations to enable for your fine-tuning job.
          nullable: true
          items:
            $ref: "#/components/schemas/CreateFineTuningJobRequest_integrations"
        seed:
          maximum: 2147483647
          minimum: 0
          type: integer
          description: |
            The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            If a seed is not specified, one will be generated for you.
          nullable: true
          example: 42
        method:
          $ref: "#/components/schemas/FineTuneMethod"
        metadata:
          $ref: "#/components/schemas/Metadata"
    CreateImageEditRequest:
      required:
      - image
      - prompt
      type: object
      properties:
        image:
          description: "The image(s) to edit. Must be a supported image file or an\
            \ array of images.\n\nFor `gpt-image-1`, each image should be a `png`,\
            \ `webp`, or `jpg` file less \nthan 25MB. You can provide up to 16 images.\n\
            \nFor `dall-e-2`, you can only provide one image, and it should be a square\
            \ \n`png` file less than 4MB.\n"
          anyOf:
          - type: string
            format: binary
          - maxItems: 16
            type: array
            items:
              type: string
              format: binary
        prompt:
          type: string
          description: "A text description of the desired image(s). The maximum length\
            \ is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`."
          example: A cute baby sea otter wearing a beret
        mask:
          type: string
          description: "An additional image whose fully transparent areas (e.g. where\
            \ alpha is zero) indicate where `image` should be edited. If there are\
            \ multiple images provided, the mask will be applied on the first image.\
            \ Must be a valid PNG file, less than 4MB, and have the same dimensions\
            \ as `image`."
          format: binary
        model:
          description: The model to use for image generation. Only `dall-e-2` and
            `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter
            specific to `gpt-image-1` is used.
          nullable: true
          example: gpt-image-1
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            - gpt-image-1
            x-stainless-const: true
          default: dall-e-2
          x-oaiTypeLabel: string
        "n":
          maximum: 10
          minimum: 1
          type: integer
          description: The number of images to generate. Must be between 1 and 10.
          nullable: true
          example: 1
          default: 1
        size:
          type: string
          description: "The size of the generated images. Must be one of `1024x1024`,\
            \ `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default\
            \ value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024`\
            \ for `dall-e-2`."
          nullable: true
          example: 1024x1024
          default: 1024x1024
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - auto
        response_format:
          type: string
          description: "The format in which the generated images are returned. Must\
            \ be one of `url` or `b64_json`. URLs are only valid for 60 minutes after\
            \ the image has been generated. This parameter is only supported for `dall-e-2`,\
            \ as `gpt-image-1` will always return base64-encoded images."
          nullable: true
          example: url
          default: url
          enum:
          - url
          - b64_json
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
        quality:
          type: string
          description: |
            The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`.
          nullable: true
          example: high
          default: auto
          enum:
          - standard
          - low
          - medium
          - high
          - auto
    CreateImageRequest:
      required:
      - prompt
      type: object
      properties:
        prompt:
          type: string
          description: "A text description of the desired image(s). The maximum length\
            \ is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2`\
            \ and 4000 characters for `dall-e-3`."
          example: A cute baby sea otter
        model:
          description: "The model to use for image generation. One of `dall-e-2`,\
            \ `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter\
            \ specific to `gpt-image-1` is used."
          nullable: true
          example: gpt-image-1
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            - dall-e-3
            - gpt-image-1
          default: dall-e-2
          x-oaiTypeLabel: string
        "n":
          maximum: 10
          minimum: 1
          type: integer
          description: "The number of images to generate. Must be between 1 and 10.\
            \ For `dall-e-3`, only `n=1` is supported."
          nullable: true
          example: 1
          default: 1
        quality:
          type: string
          description: "The quality of the image that will be generated. \n\n- `auto`\
            \ (default value) will automatically select the best quality for the given\
            \ model.\n- `high`, `medium` and `low` are supported for `gpt-image-1`.\n\
            - `hd` and `standard` are supported for `dall-e-3`.\n- `standard` is the\
            \ only option for `dall-e-2`.\n"
          nullable: true
          example: medium
          default: auto
          enum:
          - standard
          - hd
          - low
          - medium
          - high
          - auto
        response_format:
          type: string
          description: The format in which generated images with `dall-e-2` and `dall-e-3`
            are returned. Must be one of `url` or `b64_json`. URLs are only valid
            for 60 minutes after the image has been generated. This parameter isn't
            supported for `gpt-image-1` which will always return base64-encoded images.
          nullable: true
          example: url
          default: url
          enum:
          - url
          - b64_json
        output_format:
          type: string
          description: "The format in which the generated images are returned. This\
            \ parameter is only supported for `gpt-image-1`. Must be one of `png`,\
            \ `jpeg`, or `webp`."
          nullable: true
          example: png
          default: png
          enum:
          - png
          - jpeg
          - webp
        output_compression:
          type: integer
          description: "The compression level (0-100%) for the generated images. This\
            \ parameter is only supported for `gpt-image-1` with the `webp` or `jpeg`\
            \ output formats, and defaults to 100."
          nullable: true
          example: 100
          default: 100
        size:
          type: string
          description: "The size of the generated images. Must be one of `1024x1024`,\
            \ `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default\
            \ value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024`\
            \ for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792`\
            \ for `dall-e-3`."
          nullable: true
          example: 1024x1024
          default: auto
          enum:
          - auto
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - 256x256
          - 512x512
          - 1792x1024
          - 1024x1792
        moderation:
          type: string
          description: Control the content-moderation level for images generated by
            `gpt-image-1`. Must be either `low` for less restrictive filtering or
            `auto` (default value).
          nullable: true
          example: low
          default: auto
          enum:
          - low
          - auto
        background:
          type: string
          description: "Allows to set transparency for the background of the generated\
            \ image(s). \nThis parameter is only supported for `gpt-image-1`. Must\
            \ be one of \n`transparent`, `opaque` or `auto` (default value). When\
            \ `auto` is used, the \nmodel will automatically determine the best background\
            \ for the image.\n\nIf `transparent`, the output format needs to support\
            \ transparency, so it \nshould be set to either `png` (default value)\
            \ or `webp`.\n"
          nullable: true
          example: transparent
          default: auto
          enum:
          - transparent
          - opaque
          - auto
        style:
          type: string
          description: "The style of the generated images. This parameter is only\
            \ supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid\
            \ causes the model to lean towards generating hyper-real and dramatic\
            \ images. Natural causes the model to produce more natural, less hyper-real\
            \ looking images."
          nullable: true
          example: vivid
          default: vivid
          enum:
          - vivid
          - natural
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
    CreateImageVariationRequest:
      required:
      - image
      type: object
      properties:
        image:
          type: string
          description: "The image to use as the basis for the variation(s). Must be\
            \ a valid PNG file, less than 4MB, and square."
          format: binary
        model:
          description: The model to use for image generation. Only `dall-e-2` is supported
            at this time.
          nullable: true
          example: dall-e-2
          anyOf:
          - type: string
          - type: string
            enum:
            - dall-e-2
            x-stainless-const: true
          default: dall-e-2
          x-oaiTypeLabel: string
        "n":
          maximum: 10
          minimum: 1
          type: integer
          description: The number of images to generate. Must be between 1 and 10.
          nullable: true
          example: 1
          default: 1
        response_format:
          type: string
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
          nullable: true
          example: url
          default: url
          enum:
          - url
          - b64_json
        size:
          type: string
          description: "The size of the generated images. Must be one of `256x256`,\
            \ `512x512`, or `1024x1024`."
          nullable: true
          example: 1024x1024
          default: 1024x1024
          enum:
          - 256x256
          - 512x512
          - 1024x1024
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
    CreateMessageRequest:
      required:
      - content
      - role
      type: object
      properties:
        role:
          type: string
          description: |
            The role of the entity that is creating the message. Allowed values include:
            - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
          enum:
          - user
          - assistant
        content:
          oneOf:
          - title: Text content
            type: string
            description: The text contents of the message.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type, each can\
              \ be of type `text` or images can be passed with `image_url` or `image_file`.\
              \ Image types are only supported on [Vision-compatible models](/docs/models)."
            items:
              oneOf:
              - $ref: "#/components/schemas/MessageContentImageFileObject"
              - $ref: "#/components/schemas/MessageContentImageUrlObject"
              - $ref: "#/components/schemas/MessageRequestContentTextObject"
        attachments:
          required:
          - file_id
          - tools
          type: array
          description: "A list of files attached to the message, and the tools they\
            \ should be added to."
          nullable: true
          items:
            $ref: "#/components/schemas/CreateMessageRequest_attachments"
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    CreateModelResponseProperties:
      allOf:
      - $ref: "#/components/schemas/ModelResponseProperties"
    CreateModerationRequest:
      required:
      - input
      type: object
      properties:
        input:
          description: |
            Input (or inputs) to classify. Can be a single string, an array of strings, or
            an array of multi-modal input objects similar to other models.
          oneOf:
          - type: string
            description: A string of text to classify for moderation.
            example: I want to kill them.
            default: ""
          - type: array
            description: An array of strings to classify for moderation.
            items:
              type: string
              example: I want to kill them.
              default: ""
          - type: array
            description: An array of multi-modal inputs to the moderation model.
            items:
              oneOf:
              - required:
                - image_url
                - type
                type: object
                properties:
                  type:
                    type: string
                    description: Always `image_url`.
                    enum:
                    - image_url
                    x-stainless-const: true
                  image_url:
                    required:
                    - url
                    type: object
                    properties:
                      url:
                        type: string
                        description: Either a URL of the image or the base64 encoded
                          image data.
                        format: uri
                        example: https://example.com/image.jpg
                    description: Contains either an image URL or a data URL for a
                      base64 encoded image.
                description: An object describing an image to classify.
              - required:
                - text
                - type
                type: object
                properties:
                  type:
                    type: string
                    description: Always `text`.
                    enum:
                    - text
                    x-stainless-const: true
                  text:
                    type: string
                    description: A string of text to classify.
                    example: I want to kill them
                description: An object describing text to classify.
        model:
          description: |
            The content moderation model you would like to use. Learn more in
            [the moderation guide](/docs/guides/moderation), and learn about
            available models [here](/docs/models#moderation).
          nullable: false
          example: omni-moderation-2024-09-26
          anyOf:
          - type: string
          - type: string
            enum:
            - omni-moderation-latest
            - omni-moderation-2024-09-26
            - text-moderation-latest
            - text-moderation-stable
          default: omni-moderation-latest
          x-oaiTypeLabel: string
    CreateModerationResponse:
      required:
      - id
      - model
      - results
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        model:
          type: string
          description: The model used to generate the moderation results.
        results:
          type: array
          description: A list of moderation objects.
          items:
            $ref: "#/components/schemas/CreateModerationResponse_results"
      description: Represents if a given text input is potentially harmful.
      x-oaiMeta:
        name: The moderation object
        example: |
          {
            "id": "modr-0d9740456c391e43c445bf0f010940c7",
            "model": "omni-moderation-latest",
            "results": [
              {
                "flagged": true,
                "categories": {
                  "harassment": true,
                  "harassment/threatening": true,
                  "sexual": false,
                  "hate": false,
                  "hate/threatening": false,
                  "illicit": false,
                  "illicit/violent": false,
                  "self-harm/intent": false,
                  "self-harm/instructions": false,
                  "self-harm": false,
                  "sexual/minors": false,
                  "violence": true,
                  "violence/graphic": true
                },
                "category_scores": {
                  "harassment": 0.8189693396524255,
                  "harassment/threatening": 0.804985420696006,
                  "sexual": 1.573112165348997e-6,
                  "hate": 0.007562942636942845,
                  "hate/threatening": 0.004208854591835476,
                  "illicit": 0.030535955153511665,
                  "illicit/violent": 0.008925306722380033,
                  "self-harm/intent": 0.00023023930975076432,
                  "self-harm/instructions": 0.0002293869201073356,
                  "self-harm": 0.012598046106750154,
                  "sexual/minors": 2.212566909570261e-8,
                  "violence": 0.9999992735124786,
                  "violence/graphic": 0.843064871157054
                },
                "category_applied_input_types": {
                  "harassment": [
                    "text"
                  ],
                  "harassment/threatening": [
                    "text"
                  ],
                  "sexual": [
                    "text",
                    "image"
                  ],
                  "hate": [
                    "text"
                  ],
                  "hate/threatening": [
                    "text"
                  ],
                  "illicit": [
                    "text"
                  ],
                  "illicit/violent": [
                    "text"
                  ],
                  "self-harm/intent": [
                    "text",
                    "image"
                  ],
                  "self-harm/instructions": [
                    "text",
                    "image"
                  ],
                  "self-harm": [
                    "text",
                    "image"
                  ],
                  "sexual/minors": [
                    "text"
                  ],
                  "violence": [
                    "text",
                    "image"
                  ],
                  "violence/graphic": [
                    "text",
                    "image"
                  ]
                }
              }
            ]
          }
    CreateResponse:
      allOf:
      - $ref: "#/components/schemas/CreateModelResponseProperties"
      - $ref: "#/components/schemas/ResponseProperties"
      - required:
        - input
        - model
        type: object
        properties:
          input:
            description: |
              Text, image, or file inputs to the model, used to generate a response.

              Learn more:
              - [Text inputs and outputs](/docs/guides/text)
              - [Image inputs](/docs/guides/images)
              - [File inputs](/docs/guides/pdf-files)
              - [Conversation state](/docs/guides/conversation-state)
              - [Function calling](/docs/guides/function-calling)
            oneOf:
            - title: Text input
              type: string
              description: "A text input to the model, equivalent to a text input\
                \ with the \n`user` role.\n"
            - title: Input item list
              type: array
              description: "A list of one or many input items to the model, containing\
                \ \ndifferent content types.\n"
              items:
                $ref: "#/components/schemas/InputItem"
          include:
            type: array
            description: |
              Specify additional output data to include in the model response. Currently
              supported values are:
              - `file_search_call.results`: Include the search results of
                the file search tool call.
              - `message.input_image.image_url`: Include image urls from the input message.
              - `computer_call_output.output.image_url`: Include image urls from the computer call output.
            nullable: true
            items:
              $ref: "#/components/schemas/Includable"
          parallel_tool_calls:
            type: boolean
            description: |
              Whether to allow the model to run tool calls in parallel.
            nullable: true
            default: true
          store:
            type: boolean
            description: |
              Whether to store the generated model response for later retrieval via
              API.
            nullable: true
            default: true
          stream:
            type: boolean
            description: |
              If set to true, the model response data will be streamed to the client
              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
              See the [Streaming section below](/docs/api-reference/responses-streaming)
              for more information.
            nullable: true
            default: false
    CreateRunRequest:
      required:
      - assistant_id
      type: object
      properties:
        assistant_id:
          type: string
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ to use to execute this run."
        model:
          description: "The ID of the [Model](/docs/api-reference/models) to be used\
            \ to execute this run. If a value is provided here, it will override the\
            \ model associated with the assistant. If not, the model associated with\
            \ the assistant will be used."
          nullable: true
          example: gpt-4o
          anyOf:
          - type: string
          - $ref: "#/components/schemas/AssistantSupportedModels"
          x-oaiTypeLabel: string
        reasoning_effort:
          $ref: "#/components/schemas/ReasoningEffort"
        instructions:
          type: string
          description: "Overrides the [instructions](/docs/api-reference/assistants/createAssistant)\
            \ of the assistant. This is useful for modifying the behavior on a per-run\
            \ basis."
          nullable: true
        additional_instructions:
          type: string
          description: Appends additional instructions at the end of the instructions
            for the run. This is useful for modifying the behavior on a per-run basis
            without overriding other instructions.
          nullable: true
        additional_messages:
          type: array
          description: Adds additional messages to the thread before creating the
            run.
          nullable: true
          items:
            $ref: "#/components/schemas/CreateMessageRequest"
        tools:
          maxItems: 20
          type: array
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          nullable: true
          example: 1
          default: 1
        stream:
          type: boolean
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
        max_prompt_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          nullable: true
        max_completion_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          nullable: true
        truncation_strategy:
          allOf:
          - $ref: "#/components/schemas/TruncationObject"
          - nullable: true
        tool_choice:
          allOf:
          - $ref: "#/components/schemas/AssistantsApiToolChoiceOption"
          - nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      additionalProperties: false
    CreateSpeechRequest:
      required:
      - input
      - model
      - voice
      type: object
      properties:
        model:
          description: |
            One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
          anyOf:
          - type: string
          - type: string
            enum:
            - tts-1
            - tts-1-hd
            - gpt-4o-mini-tts
          x-oaiTypeLabel: string
        input:
          maxLength: 4096
          type: string
          description: The text to generate audio for. The maximum length is 4096
            characters.
        instructions:
          maxLength: 4096
          type: string
          description: Control the voice of your generated audio with additional instructions.
            Does not work with `tts-1` or `tts-1-hd`.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        response_format:
          type: string
          description: "The format to audio in. Supported formats are `mp3`, `opus`,\
            \ `aac`, `flac`, `wav`, and `pcm`."
          default: mp3
          enum:
          - mp3
          - opus
          - aac
          - flac
          - wav
          - pcm
        speed:
          maximum: 4
          minimum: 0.25
          type: number
          description: The speed of the generated audio. Select a value from `0.25`
            to `4.0`. `1.0` is the default.
          default: 1
      additionalProperties: false
    CreateThreadAndRunRequest:
      required:
      - assistant_id
      type: object
      properties:
        assistant_id:
          type: string
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ to use to execute this run."
        thread:
          $ref: "#/components/schemas/CreateThreadRequest"
        model:
          description: "The ID of the [Model](/docs/api-reference/models) to be used\
            \ to execute this run. If a value is provided here, it will override the\
            \ model associated with the assistant. If not, the model associated with\
            \ the assistant will be used."
          nullable: true
          example: gpt-4o
          anyOf:
          - type: string
          - type: string
            enum:
            - gpt-4.1
            - gpt-4.1-mini
            - gpt-4.1-nano
            - gpt-4.1-2025-04-14
            - gpt-4.1-mini-2025-04-14
            - gpt-4.1-nano-2025-04-14
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4.5-preview
            - gpt-4.5-preview-2025-02-27
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
          x-oaiTypeLabel: string
        instructions:
          type: string
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
        tools:
          maxItems: 20
          type: array
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
        tool_resources:
          $ref: "#/components/schemas/CreateThreadAndRunRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          nullable: true
          example: 1
          default: 1
        stream:
          type: boolean
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
        max_prompt_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          nullable: true
        max_completion_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
          nullable: true
        truncation_strategy:
          allOf:
          - $ref: "#/components/schemas/TruncationObject"
          - nullable: true
        tool_choice:
          allOf:
          - $ref: "#/components/schemas/AssistantsApiToolChoiceOption"
          - nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      additionalProperties: false
    CreateThreadRequest:
      type: object
      properties:
        messages:
          type: array
          description: "A list of [messages](/docs/api-reference/messages) to start\
            \ the thread with."
          items:
            $ref: "#/components/schemas/CreateMessageRequest"
        tool_resources:
          $ref: "#/components/schemas/CreateThreadRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
      description: "Options to create a new thread. If no thread is provided when\
        \ running a \nrequest, an empty thread will be created.\n"
    CreateTranscriptionRequest:
      required:
      - file
      - model
      type: object
      properties:
        file:
          type: string
          description: |
            The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
          format: binary
          x-oaiTypeLabel: file
        model:
          description: |
            ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model).
          example: gpt-4o-transcribe
          anyOf:
          - type: string
          - type: string
            enum:
            - whisper-1
            - gpt-4o-transcribe
            - gpt-4o-mini-transcribe
            x-stainless-const: true
          x-oaiTypeLabel: string
        language:
          type: string
          description: |
            The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.
        prompt:
          type: string
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.
        response_format:
          $ref: "#/components/schemas/AudioResponseFormat"
        temperature:
          type: number
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          default: 0
        include[]:
          type: array
          description: "Additional information to include in the transcription response.\
            \ \n`logprobs` will return the log probabilities of the tokens in the\
            \ \nresponse to understand the model's confidence in the transcription.\
            \ \n`logprobs` only works with response_format set to `json` and only\
            \ with \nthe models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.\n"
          items:
            $ref: "#/components/schemas/TranscriptionInclude"
        timestamp_granularities[]:
          type: array
          description: |
            The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
          items:
            type: string
            enum:
            - word
            - segment
          default:
          - segment
        stream:
          type: boolean
          description: "If set to true, the model response data will be streamed to\
            \ the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\
            \ \nSee the [Streaming section of the Speech-to-Text guide](/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n\
            for more information.\n\nNote: Streaming is not supported for the `whisper-1`\
            \ model and will be ignored.\n"
          nullable: true
          default: false
      additionalProperties: false
    CreateTranscriptionResponseJson:
      required:
      - text
      type: object
      properties:
        text:
          type: string
          description: The transcribed text.
        logprobs:
          type: array
          description: |
            The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
          items:
            $ref: "#/components/schemas/CreateTranscriptionResponseJson_logprobs"
      description: "Represents a transcription response returned by model, based on\
        \ the provided input."
      x-oaiMeta:
        name: The transcription object (JSON)
        group: audio
        example: |
          {
            "text": "Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that."
          }
    CreateTranscriptionResponseStreamEvent:
      discriminator:
        propertyName: type
      anyOf:
      - $ref: "#/components/schemas/TranscriptTextDeltaEvent"
      - $ref: "#/components/schemas/TranscriptTextDoneEvent"
    CreateTranscriptionResponseVerboseJson:
      required:
      - duration
      - language
      - text
      type: object
      properties:
        language:
          type: string
          description: The language of the input audio.
        duration:
          type: number
          description: The duration of the input audio.
        text:
          type: string
          description: The transcribed text.
        words:
          type: array
          description: Extracted words and their corresponding timestamps.
          items:
            $ref: "#/components/schemas/TranscriptionWord"
        segments:
          type: array
          description: Segments of the transcribed text and their corresponding details.
          items:
            $ref: "#/components/schemas/TranscriptionSegment"
      description: "Represents a verbose json transcription response returned by model,\
        \ based on the provided input."
      x-oaiMeta:
        name: The transcription object (Verbose JSON)
        group: audio
        example: |
          {
            "task": "transcribe",
            "language": "english",
            "duration": 8.470000267028809,
            "text": "The beach was a popular spot on a hot summer day. People were swimming in the ocean, building sandcastles, and playing beach volleyball.",
            "segments": [
              {
                "id": 0,
                "seek": 0,
                "start": 0.0,
                "end": 3.319999933242798,
                "text": " The beach was a popular spot on a hot summer day.",
                "tokens": [
                  50364, 440, 7534, 390, 257, 3743, 4008, 322, 257, 2368, 4266, 786, 13, 50530
                ],
                "temperature": 0.0,
                "avg_logprob": -0.2860786020755768,
                "compression_ratio": 1.2363636493682861,
                "no_speech_prob": 0.00985979475080967
              },
              ...
            ]
          }
    CreateTranslationRequest:
      required:
      - file
      - model
      type: object
      properties:
        file:
          type: string
          description: |
            The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
          format: binary
          x-oaiTypeLabel: file
        model:
          description: |
            ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
          example: whisper-1
          anyOf:
          - type: string
          - type: string
            enum:
            - whisper-1
            x-stainless-const: true
          x-oaiTypeLabel: string
        prompt:
          type: string
          description: |
            An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.
        response_format:
          type: string
          description: |
            The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
          default: json
          enum:
          - json
          - text
          - srt
          - verbose_json
          - vtt
        temperature:
          type: number
          description: |
            The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          default: 0
      additionalProperties: false
    CreateTranslationResponseJson:
      required:
      - text
      type: object
      properties:
        text:
          type: string
    CreateTranslationResponseVerboseJson:
      required:
      - duration
      - language
      - text
      type: object
      properties:
        language:
          type: string
          description: The language of the output translation (always `english`).
        duration:
          type: number
          description: The duration of the input audio.
        text:
          type: string
          description: The translated text.
        segments:
          type: array
          description: Segments of the translated text and their corresponding details.
          items:
            $ref: "#/components/schemas/TranscriptionSegment"
    CreateUploadRequest:
      required:
      - bytes
      - filename
      - mime_type
      - purpose
      type: object
      properties:
        filename:
          type: string
          description: |
            The name of the file to upload.
        purpose:
          type: string
          description: |
            The intended purpose of the uploaded file.

            See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
        bytes:
          type: integer
          description: |
            The number of bytes in the file you are uploading.
        mime_type:
          type: string
          description: |
            The MIME type of the file.

            This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
      additionalProperties: false
    CreateVectorStoreFileBatchRequest:
      required:
      - file_ids
      type: object
      properties:
        file_ids:
          maxItems: 500
          minItems: 1
          type: array
          description: "A list of [File](/docs/api-reference/files) IDs that the vector\
            \ store should use. Useful for tools like `file_search` that can access\
            \ files."
          items:
            type: string
        chunking_strategy:
          $ref: "#/components/schemas/ChunkingStrategyRequestParam"
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
      additionalProperties: false
    CreateVectorStoreFileRequest:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: "A [File](/docs/api-reference/files) ID that the vector store\
            \ should use. Useful for tools like `file_search` that can access files."
        chunking_strategy:
          $ref: "#/components/schemas/ChunkingStrategyRequestParam"
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
      additionalProperties: false
    CreateVectorStoreRequest:
      type: object
      properties:
        file_ids:
          maxItems: 500
          type: array
          description: "A list of [File](/docs/api-reference/files) IDs that the vector\
            \ store should use. Useful for tools like `file_search` that can access\
            \ files."
          items:
            type: string
        name:
          type: string
          description: The name of the vector store.
        expires_after:
          $ref: "#/components/schemas/VectorStoreExpirationAfter"
        chunking_strategy:
          type: object
          description: "The chunking strategy used to chunk the file(s). If not set,\
            \ will use the `auto` strategy. Only applicable if `file_ids` is non-empty."
          oneOf:
          - $ref: "#/components/schemas/AutoChunkingStrategyRequestParam"
          - $ref: "#/components/schemas/StaticChunkingStrategyRequestParam"
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    DeleteAssistantResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - assistant.deleted
          x-stainless-const: true
    DeleteCertificateResponse:
      required:
      - id
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, must be `certificate.deleted`."
          enum:
          - certificate.deleted
          x-stainless-const: true
        id:
          type: string
          description: The ID of the certificate that was deleted.
    DeleteFileResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum:
          - file
          x-stainless-const: true
        deleted:
          type: boolean
    DeleteFineTuningCheckpointPermissionResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
          description: The ID of the fine-tuned model checkpoint permission that was
            deleted.
        object:
          type: string
          description: "The object type, which is always \"checkpoint.permission\"\
            ."
          enum:
          - checkpoint.permission
          x-stainless-const: true
        deleted:
          type: boolean
          description: Whether the fine-tuned model checkpoint permission was successfully
            deleted.
    DeleteMessageResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - thread.message.deleted
          x-stainless-const: true
    DeleteModelResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
    DeleteThreadResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - thread.deleted
          x-stainless-const: true
    DeleteVectorStoreFileResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - vector_store.file.deleted
          x-stainless-const: true
    DeleteVectorStoreResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - vector_store.deleted
          x-stainless-const: true
    DoneEvent:
      required:
      - data
      - event
      type: object
      properties:
        event:
          type: string
          enum:
          - done
          x-stainless-const: true
        data:
          type: string
          enum:
          - "[DONE]"
          x-stainless-const: true
      description: Occurs when a stream ends.
      x-oaiMeta:
        dataDescription: "`data` is `[DONE]`"
    DoubleClick:
      title: DoubleClick
      required:
      - type
      - x
      - "y"
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a double click action, this\
            \ property is \nalways set to `double_click`.\n"
          default: double_click
          enum:
          - double_click
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the double click occurred.
        "y":
          type: integer
          description: |
            The y-coordinate where the double click occurred.
      description: |
        A double click action.
    Drag:
      title: Drag
      required:
      - path
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a drag action, this property\
            \ is \nalways set to `drag`.\n"
          default: drag
          enum:
          - drag
          x-stainless-const: true
        path:
          type: array
          description: |
            An array of coordinates representing the path of the drag action. Coordinates will appear as an array
            of objects, eg
            ```
            [
              { x: 100, y: 200 },
              { x: 200, y: 300 }
            ]
            ```
          items:
            $ref: "#/components/schemas/Coordinate"
      description: |
        A drag action.
    EasyInputMessage:
      title: Input message
      required:
      - content
      - role
      type: object
      properties:
        role:
          type: string
          description: |
            The role of the message input. One of `user`, `assistant`, `system`, or
            `developer`.
          enum:
          - user
          - assistant
          - system
          - developer
        content:
          description: |
            Text, image, or audio input to the model, used to generate a response.
            Can also contain previous assistant responses.
          oneOf:
          - title: Text input
            type: string
            description: |
              A text input to the model.
          - $ref: "#/components/schemas/InputMessageContentList"
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
          - message
          x-stainless-const: true
      description: |
        A message input to the model with a role indicating instruction following
        hierarchy. Instructions given with the `developer` or `system` role take
        precedence over instructions given with the `user` role. Messages with the
        `assistant` role are presumed to have been generated by the model in previous
        interactions.
    Embedding:
      required:
      - embedding
      - index
      - object
      type: object
      properties:
        index:
          type: integer
          description: The index of the embedding in the list of embeddings.
        embedding:
          type: array
          description: |
            The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
          items:
            type: number
        object:
          type: string
          description: "The object type, which is always \"embedding\"."
          enum:
          - embedding
          x-stainless-const: true
      description: |
        Represents an embedding vector returned by embedding endpoint.
      x-oaiMeta:
        name: The embedding object
        example: |
          {
            "object": "embedding",
            "embedding": [
              0.0023064255,
              -0.009327292,
              .... (1536 floats total for ada-002)
              -0.0028842222,
            ],
            "index": 0
          }
    Error:
      required:
      - code
      - message
      - param
      - type
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
    ErrorEvent:
      required:
      - data
      - event
      type: object
      properties:
        event:
          type: string
          enum:
          - error
          x-stainless-const: true
        data:
          $ref: "#/components/schemas/Error"
      description: "Occurs when an [error](/docs/guides/error-codes#api-errors) occurs.\
        \ This can happen due to an internal server error or a timeout."
      x-oaiMeta:
        dataDescription: "`data` is an [error](/docs/guides/error-codes#api-errors)"
    ErrorResponse:
      required:
      - error
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Error"
    Eval:
      title: Eval
      required:
      - created_at
      - data_source_config
      - id
      - metadata
      - name
      - object
      - testing_criteria
      type: object
      properties:
        object:
          type: string
          description: The object type.
          default: eval
          enum:
          - eval
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation.
        name:
          type: string
          description: The name of the evaluation.
          example: Chatbot effectiveness Evaluation
        data_source_config:
          type: object
          description: Configuration of data sources used in runs of the evaluation.
          oneOf:
          - $ref: "#/components/schemas/EvalCustomDataSourceConfig"
          - $ref: "#/components/schemas/EvalStoredCompletionsDataSourceConfig"
        testing_criteria:
          type: array
          description: A list of testing criteria.
          items:
            oneOf:
            - $ref: "#/components/schemas/EvalLabelModelGrader"
            - $ref: "#/components/schemas/EvalStringCheckGrader"
            - $ref: "#/components/schemas/EvalTextSimilarityGrader"
            - $ref: "#/components/schemas/EvalPythonGrader"
            - $ref: "#/components/schemas/EvalScoreModelGrader"
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the eval was created.
        metadata:
          $ref: "#/components/schemas/Metadata"
      description: |
        An Eval object with a data source config and testing criteria.
        An Eval represents a task to be done for your LLM integration.
        Like:
         - Improve the quality of my chatbot
         - See how well my chatbot handles customer support
         - Check if o3-mini is better at my usecase than gpt-4o
      x-oaiMeta:
        name: The eval object
        group: evals
        example: |
          {
            "object": "eval",
            "id": "eval_67abd54d9b0081909a86353f6fb9317a",
            "data_source_config": {
              "type": "custom",
              "item_schema": {
                "type": "object",
                "properties": {
                  "label": {"type": "string"},
                },
                "required": ["label"]
              },
              "include_sample_schema": true
            },
            "testing_criteria": [
              {
                "name": "My string check grader",
                "type": "string_check",
                "input": "{{sample.output_text}}",
                "reference": "{{item.label}}",
                "operation": "eq",
              }
            ],
            "name": "External Data Eval",
            "created_at": 1739314509,
            "metadata": {
              "test": "synthetics",
            }
          }
    EvalApiError:
      title: EvalApiError
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: The error code.
        message:
          type: string
          description: The error message.
      description: |
        An object representing an error response from the Eval API.
      x-oaiMeta:
        name: The API error object
        group: evals
        example: |
          {
            "code": "internal_error",
            "message": "The eval run failed due to an internal error."
          }
    EvalCustomDataSourceConfig:
      title: CustomDataSourceConfig
      required:
      - schema
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of data source. Always `custom`.
          default: custom
          enum:
          - custom
          x-stainless-const: true
        schema:
          type: object
          additionalProperties: true
          description: |
            The json schema for the run data source items.
            Learn how to build JSON schemas [here](https://json-schema.org/).
          example: |
            {
              "type": "object",
              "properties": {
                "item": {
                  "type": "object",
                  "properties": {
                    "label": {"type": "string"},
                  },
                  "required": ["label"]
                }
              },
              "required": ["item"]
            }
      description: |
        A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.
        The response schema defines the shape of the data that will be:
        - Used to define your testing criteria and
        - What data is required when creating a run
      x-oaiMeta:
        name: The eval custom data source config object
        group: evals
        example: |
          {
            "type": "custom",
            "schema": {
              "type": "object",
              "properties": {
                "item": {
                  "type": "object",
                  "properties": {
                    "label": {"type": "string"},
                  },
                  "required": ["label"]
                }
              },
              "required": ["item"]
            }
          }
    EvalItem:
      title: Eval message object
      required:
      - content
      - role
      type: object
      properties:
        role:
          type: string
          description: |
            The role of the message input. One of `user`, `assistant`, `system`, or
            `developer`.
          enum:
          - user
          - assistant
          - system
          - developer
        content:
          description: |
            Text inputs to the model - can contain template strings.
          oneOf:
          - title: Text input
            type: string
            description: |
              A text input to the model.
          - $ref: "#/components/schemas/InputTextContent"
          - title: Output text
            required:
            - text
            - type
            type: object
            properties:
              type:
                type: string
                description: |
                  The type of the output text. Always `output_text`.
                enum:
                - output_text
                x-stainless-const: true
              text:
                type: string
                description: |
                  The text output from the model.
            description: |
              A text output from the model.
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
          - message
          x-stainless-const: true
      description: |
        A message input to the model with a role indicating instruction following
        hierarchy. Instructions given with the `developer` or `system` role take
        precedence over instructions given with the `user` role. Messages with the
        `assistant` role are presumed to have been generated by the model in previous
        interactions.
    EvalJsonlFileContentSource:
      title: EvalJsonlFileContentSource
      required:
      - content
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of jsonl source. Always `file_content`.
          default: file_content
          enum:
          - file_content
          x-stainless-const: true
        content:
          type: array
          description: The content of the jsonl file.
          items:
            $ref: "#/components/schemas/EvalJsonlFileContentSource_content"
    EvalJsonlFileIdSource:
      title: EvalJsonlFileIdSource
      required:
      - id
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of jsonl source. Always `file_id`.
          default: file_id
          enum:
          - file_id
          x-stainless-const: true
        id:
          type: string
          description: The identifier of the file.
    EvalLabelModelGrader:
      title: LabelModelGrader
      required:
      - input
      - labels
      - model
      - name
      - passing_labels
      - type
      type: object
      properties:
        type:
          type: string
          description: "The object type, which is always `label_model`."
          enum:
          - label_model
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation. Must support structured
            outputs.
        input:
          type: array
          items:
            $ref: "#/components/schemas/EvalItem"
        labels:
          type: array
          description: The labels to assign to each item in the evaluation.
          items:
            type: string
        passing_labels:
          type: array
          description: The labels that indicate a passing result. Must be a subset
            of labels.
          items:
            type: string
      description: |
        A LabelModelGrader object which uses a model to assign labels to each item
        in the evaluation.
      x-oaiMeta:
        name: The eval label model grader object
        group: evals
        example: |
          {
            "name": "First label grader",
            "type": "label_model",
            "model": "gpt-4o-2024-08-06",
            "input": [
              {
                "type": "message",
                "role": "system",
                "content": {
                  "type": "input_text",
                  "text": "Classify the sentiment of the following statement as one of positive, neutral, or negative"
                }
              },
              {
                "type": "message",
                "role": "user",
                "content": {
                  "type": "input_text",
                  "text": "Statement: {{item.response}}"
                }
              }
            ],
            "passing_labels": [
              "positive"
            ],
            "labels": [
              "positive",
              "neutral",
              "negative"
            ]
          }
    EvalList:
      title: EvalList
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The type of this object. It is always set to "list".
          default: list
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of eval objects.
          items:
            $ref: "#/components/schemas/Eval"
        first_id:
          type: string
          description: The identifier of the first eval in the data array.
        last_id:
          type: string
          description: The identifier of the last eval in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more evals available.
      description: |
        An object representing a list of evals.
      x-oaiMeta:
        name: The eval list object
        group: evals
        example: |
          {
            "object": "list",
            "data": [
              {
                "object": "eval",
                "id": "eval_67abd54d9b0081909a86353f6fb9317a",
                "data_source_config": {
                  "type": "custom",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "object",
                        "properties": {
                          "input": {
                            "type": "string"
                          },
                          "ground_truth": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "input",
                          "ground_truth"
                        ]
                      }
                    },
                    "required": [
                      "item"
                    ]
                  }
                },
                "testing_criteria": [
                  {
                    "name": "String check",
                    "id": "String check-2eaf2d8d-d649-4335-8148-9535a7ca73c2",
                    "type": "string_check",
                    "input": "{{item.input}}",
                    "reference": "{{item.ground_truth}}",
                    "operation": "eq"
                  }
                ],
                "name": "External Data Eval",
                "created_at": 1739314509,
                "metadata": {},
              }
            ],
            "first_id": "eval_67abd54d9b0081909a86353f6fb9317a",
            "last_id": "eval_67abd54d9b0081909a86353f6fb9317a",
            "has_more": true
          }
    EvalPythonGrader:
      title: PythonGrader
      required:
      - name
      - source
      - type
      type: object
      properties:
        type:
          type: string
          description: "The object type, which is always `python`."
          enum:
          - python
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        source:
          type: string
          description: The source code of the python script.
        pass_threshold:
          type: number
          description: The threshold for the score.
        image_tag:
          type: string
          description: The image tag to use for the python script.
      description: |
        A PythonGrader object that runs a python script on the input.
      x-oaiMeta:
        name: The eval python grader object
        group: evals
        example: |
          {
            "type": "string_check",
            "name": "Example string check grader",
            "input": "{{sample.output_text}}",
            "reference": "{{item.label}}",
            "operation": "eq"
          }
    EvalResponsesSource:
      title: EvalResponsesSource
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of run data source. Always `responses`.
          enum:
          - responses
        metadata:
          type: object
          description: Metadata filter for the responses. This is a query parameter
            used to select responses.
          nullable: true
        model:
          type: string
          description: The name of the model to find responses for. This is a query
            parameter used to select responses.
          nullable: true
        instructions_search:
          type: string
          description: Optional search string for instructions. This is a query parameter
            used to select responses.
          nullable: true
        created_after:
          minimum: 0
          type: integer
          description: Only include items created after this timestamp (inclusive).
            This is a query parameter used to select responses.
          nullable: true
        created_before:
          minimum: 0
          type: integer
          description: Only include items created before this timestamp (inclusive).
            This is a query parameter used to select responses.
          nullable: true
        has_tool_calls:
          type: boolean
          description: Whether the response has tool calls. This is a query parameter
            used to select responses.
          nullable: true
        reasoning_effort:
          $ref: "#/components/schemas/ReasoningEffort"
        temperature:
          type: number
          description: Sampling temperature. This is a query parameter used to select
            responses.
          nullable: true
        top_p:
          type: number
          description: Nucleus sampling parameter. This is a query parameter used
            to select responses.
          nullable: true
        users:
          type: array
          description: List of user identifiers. This is a query parameter used to
            select responses.
          nullable: true
          items:
            type: string
        allow_parallel_tool_calls:
          type: boolean
          description: Whether to allow parallel tool calls. This is a query parameter
            used to select responses.
          nullable: true
      description: |
        A EvalResponsesSource object describing a run data source configuration.
      x-oaiMeta:
        name: The run data source object used to configure an individual run
        group: eval runs
        example: |
          {
            "type": "responses",
            "model": "gpt-4o-mini-2024-07-18",
            "temperature": 0.7,
            "top_p": 1.0,
            "users": ["user1", "user2"],
            "allow_parallel_tool_calls": true
          }
    EvalRun:
      title: EvalRun
      required:
      - created_at
      - data_source
      - error
      - eval_id
      - id
      - metadata
      - model
      - name
      - object
      - per_model_usage
      - per_testing_criteria_results
      - report_url
      - result_counts
      - status
      type: object
      properties:
        object:
          type: string
          description: The type of the object. Always "eval.run".
          default: eval.run
          enum:
          - eval.run
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation run.
        eval_id:
          type: string
          description: The identifier of the associated evaluation.
        status:
          type: string
          description: The status of the evaluation run.
        model:
          type: string
          description: "The model that is evaluated, if applicable."
        name:
          type: string
          description: The name of the evaluation run.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the evaluation run was created.
        report_url:
          type: string
          description: The URL to the rendered evaluation run report on the UI dashboard.
        result_counts:
          $ref: "#/components/schemas/EvalRun_result_counts"
        per_model_usage:
          type: array
          description: Usage statistics for each model during the evaluation run.
          items:
            $ref: "#/components/schemas/EvalRun_per_model_usage"
        per_testing_criteria_results:
          type: array
          description: Results per testing criteria applied during the evaluation
            run.
          items:
            $ref: "#/components/schemas/EvalRun_per_testing_criteria_results"
        data_source:
          type: object
          description: Information about the run's data source.
          oneOf:
          - $ref: "#/components/schemas/CreateEvalJsonlRunDataSource"
          - $ref: "#/components/schemas/CreateEvalCompletionsRunDataSource"
          - $ref: "#/components/schemas/CreateEvalResponsesRunDataSource"
        metadata:
          $ref: "#/components/schemas/Metadata"
        error:
          $ref: "#/components/schemas/EvalApiError"
      description: |
        A schema representing an evaluation run.
      x-oaiMeta:
        name: The eval run object
        group: evals
        example: |
          {
            "object": "eval.run",
            "id": "evalrun_67e57965b480819094274e3a32235e4c",
            "eval_id": "eval_67e579652b548190aaa83ada4b125f47",
            "report_url": "https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47?run_id=evalrun_67e57965b480819094274e3a32235e4c",
            "status": "queued",
            "model": "gpt-4o-mini",
            "name": "gpt-4o-mini",
            "created_at": 1743092069,
            "result_counts": {
              "total": 0,
              "errored": 0,
              "failed": 0,
              "passed": 0
            },
            "per_model_usage": null,
            "per_testing_criteria_results": null,
            "data_source": {
              "type": "completions",
              "source": {
                "type": "file_content",
                "content": [
                  {
                    "item": {
                      "input": "Tech Company Launches Advanced Artificial Intelligence Platform",
                      "ground_truth": "Technology"
                    }
                  },
                  {
                    "item": {
                      "input": "Central Bank Increases Interest Rates Amid Inflation Concerns",
                      "ground_truth": "Markets"
                    }
                  },
                  {
                    "item": {
                      "input": "International Summit Addresses Climate Change Strategies",
                      "ground_truth": "World"
                    }
                  },
                  {
                    "item": {
                      "input": "Major Retailer Reports Record-Breaking Holiday Sales",
                      "ground_truth": "Business"
                    }
                  },
                  {
                    "item": {
                      "input": "National Team Qualifies for World Championship Finals",
                      "ground_truth": "Sports"
                    }
                  },
                  {
                    "item": {
                      "input": "Stock Markets Rally After Positive Economic Data Released",
                      "ground_truth": "Markets"
                    }
                  },
                  {
                    "item": {
                      "input": "Global Manufacturer Announces Merger with Competitor",
                      "ground_truth": "Business"
                    }
                  },
                  {
                    "item": {
                      "input": "Breakthrough in Renewable Energy Technology Unveiled",
                      "ground_truth": "Technology"
                    }
                  },
                  {
                    "item": {
                      "input": "World Leaders Sign Historic Climate Agreement",
                      "ground_truth": "World"
                    }
                  },
                  {
                    "item": {
                      "input": "Professional Athlete Sets New Record in Championship Event",
                      "ground_truth": "Sports"
                    }
                  },
                  {
                    "item": {
                      "input": "Financial Institutions Adapt to New Regulatory Requirements",
                      "ground_truth": "Business"
                    }
                  },
                  {
                    "item": {
                      "input": "Tech Conference Showcases Advances in Artificial Intelligence",
                      "ground_truth": "Technology"
                    }
                  },
                  {
                    "item": {
                      "input": "Global Markets Respond to Oil Price Fluctuations",
                      "ground_truth": "Markets"
                    }
                  },
                  {
                    "item": {
                      "input": "International Cooperation Strengthened Through New Treaty",
                      "ground_truth": "World"
                    }
                  },
                  {
                    "item": {
                      "input": "Sports League Announces Revised Schedule for Upcoming Season",
                      "ground_truth": "Sports"
                    }
                  }
                ]
              },
              "input_messages": {
                "type": "template",
                "template": [
                  {
                    "type": "message",
                    "role": "developer",
                    "content": {
                      "type": "input_text",
                      "text": "Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\n\n# Steps\n\n1. Analyze the content of the news headline to understand its primary focus.\n2. Extract the subject matter, identifying any key indicators or keywords.\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\n4. Ensure only one category is selected per headline.\n\n# Output Format\n\nRespond with the chosen category as a single word. For instance: \"Technology\", \"Markets\", \"World\", \"Business\", or \"Sports\".\n\n# Examples\n\n**Input**: \"Apple Unveils New iPhone Model, Featuring Advanced AI Features\"  \n**Output**: \"Technology\"\n\n**Input**: \"Global Stocks Mixed as Investors Await Central Bank Decisions\"  \n**Output**: \"Markets\"\n\n**Input**: \"War in Ukraine: Latest Updates on Negotiation Status\"  \n**Output**: \"World\"\n\n**Input**: \"Microsoft in Talks to Acquire Gaming Company for $2 Billion\"  \n**Output**: \"Business\"\n\n**Input**: \"Manchester United Secures Win in Premier League Football Match\"  \n**Output**: \"Sports\" \n\n# Notes\n\n- If the headline appears to fit into more than one category, choose the most dominant theme.\n- Keywords or phrases such as \"stocks\", \"company acquisition\", \"match\", or technological brands can be good indicators for classification.\n"
                    }
                  },
                  {
                    "type": "message",
                    "role": "user",
                    "content": {
                      "type": "input_text",
                      "text": "{{item.input}}"
                    }
                  }
                ]
              },
              "model": "gpt-4o-mini",
              "sampling_params": {
                "seed": 42,
                "temperature": 1.0,
                "top_p": 1.0,
                "max_completions_tokens": 2048
              }
            },
            "error": null,
            "metadata": {}
          }
    EvalRunList:
      title: EvalRunList
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The type of this object. It is always set to "list".
          default: list
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of eval run objects.
          items:
            $ref: "#/components/schemas/EvalRun"
        first_id:
          type: string
          description: The identifier of the first eval run in the data array.
        last_id:
          type: string
          description: The identifier of the last eval run in the data array.
        has_more:
          type: boolean
          description: Indicates whether there are more evals available.
      description: |
        An object representing a list of runs for an evaluation.
      x-oaiMeta:
        name: The eval run list object
        group: evals
        example: |
          {
            "object": "list",
            "data": [
              {
                "object": "eval.run",
                "id": "evalrun_67b7fbdad46c819092f6fe7a14189620",
                "eval_id": "eval_67b7fa9a81a88190ab4aa417e397ea21",
                "report_url": "https://platform.openai.com/evaluations/eval_67b7fa9a81a88190ab4aa417e397ea21?run_id=evalrun_67b7fbdad46c819092f6fe7a14189620",
                "status": "completed",
                "model": "o3-mini",
                "name": "Academic Assistant",
                "created_at": 1740110812,
                "result_counts": {
                  "total": 171,
                  "errored": 0,
                  "failed": 80,
                  "passed": 91
                },
                "per_model_usage": null,
                "per_testing_criteria_results": [
                  {
                    "testing_criteria": "String check grader",
                    "passed": 91,
                    "failed": 80
                  }
                ],
                "run_data_source": {
                  "type": "completions",
                  "template_messages": [
                    {
                      "type": "message",
                      "role": "system",
                      "content": {
                        "type": "input_text",
                        "text": "You are a helpful assistant."
                      }
                    },
                    {
                      "type": "message",
                      "role": "user",
                      "content": {
                        "type": "input_text",
                        "text": "Hello, can you help me with my homework?"
                      }
                    }
                  ],
                  "datasource_reference": null,
                  "model": "o3-mini",
                  "max_completion_tokens": null,
                  "seed": null,
                  "temperature": null,
                  "top_p": null
                },
                "error": null,
                "metadata": {"test": "synthetics"}
              }
            ],
            "first_id": "evalrun_67abd54d60ec8190832b46859da808f7",
            "last_id": "evalrun_67abd54d60ec8190832b46859da808f7",
            "has_more": false
          }
    EvalRunOutputItem:
      title: EvalRunOutputItem
      required:
      - created_at
      - datasource_item
      - datasource_item_id
      - eval_id
      - id
      - object
      - results
      - run_id
      - sample
      - status
      type: object
      properties:
        object:
          type: string
          description: The type of the object. Always "eval.run.output_item".
          default: eval.run.output_item
          enum:
          - eval.run.output_item
          x-stainless-const: true
        id:
          type: string
          description: Unique identifier for the evaluation run output item.
        run_id:
          type: string
          description: The identifier of the evaluation run associated with this output
            item.
        eval_id:
          type: string
          description: The identifier of the evaluation group.
        created_at:
          type: integer
          description: Unix timestamp (in seconds) when the evaluation run was created.
        status:
          type: string
          description: The status of the evaluation run.
        datasource_item_id:
          type: integer
          description: The identifier for the data source item.
        datasource_item:
          type: object
          additionalProperties: true
          description: Details of the input data source item.
        results:
          type: array
          description: A list of results from the evaluation run.
          items:
            type: object
            additionalProperties: true
            description: A result object.
        sample:
          $ref: "#/components/schemas/EvalRunOutputItem_sample"
      description: |
        A schema representing an evaluation run output item.
      x-oaiMeta:
        name: The eval run output item object
        group: evals
        example: |
          {
            "object": "eval.run.output_item",
            "id": "outputitem_67abd55eb6548190bb580745d5644a33",
            "run_id": "evalrun_67abd54d60ec8190832b46859da808f7",
            "eval_id": "eval_67abd54d9b0081909a86353f6fb9317a",
            "created_at": 1739314509,
            "status": "pass",
            "datasource_item_id": 137,
            "datasource_item": {
                "teacher": "To grade essays, I only check for style, content, and grammar.",
                "student": "I am a student who is trying to write the best essay."
            },
            "results": [
              {
                "name": "String Check Grader",
                "type": "string-check-grader",
                "score": 1.0,
                "passed": true,
              }
            ],
            "sample": {
              "input": [
                {
                  "role": "system",
                  "content": "You are an evaluator bot..."
                },
                {
                  "role": "user",
                  "content": "You are assessing..."
                }
              ],
              "output": [
                {
                  "role": "assistant",
                  "content": "The rubric is not clear nor concise."
                }
              ],
              "finish_reason": "stop",
              "model": "gpt-4o-2024-08-06",
              "usage": {
                "total_tokens": 521,
                "completion_tokens": 2,
                "prompt_tokens": 519,
                "cached_tokens": 0
              },
              "error": null,
              "temperature": 1.0,
              "max_completion_tokens": 2048,
              "top_p": 1.0,
              "seed": 42
            }
          }
    EvalRunOutputItemList:
      title: EvalRunOutputItemList
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: |
            The type of this object. It is always set to "list".
          default: list
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: |
            An array of eval run output item objects.
          items:
            $ref: "#/components/schemas/EvalRunOutputItem"
        first_id:
          type: string
          description: The identifier of the first eval run output item in the data
            array.
        last_id:
          type: string
          description: The identifier of the last eval run output item in the data
            array.
        has_more:
          type: boolean
          description: Indicates whether there are more eval run output items available.
      description: |
        An object representing a list of output items for an evaluation run.
      x-oaiMeta:
        name: The eval run output item list object
        group: evals
        example: |
          {
            "object": "list",
            "data": [
              {
                "object": "eval.run.output_item",
                "id": "outputitem_67abd55eb6548190bb580745d5644a33",
                "run_id": "evalrun_67abd54d60ec8190832b46859da808f7",
                "eval_id": "eval_67abd54d9b0081909a86353f6fb9317a",
                "created_at": 1739314509,
                "status": "pass",
                "datasource_item_id": 137,
                "datasource_item": {
                    "teacher": "To grade essays, I only check for style, content, and grammar.",
                    "student": "I am a student who is trying to write the best essay."
                },
                "results": [
                  {
                    "name": "String Check Grader",
                    "type": "string-check-grader",
                    "score": 1.0,
                    "passed": true,
                  }
                ],
                "sample": {
                  "input": [
                    {
                      "role": "system",
                      "content": "You are an evaluator bot..."
                    },
                    {
                      "role": "user",
                      "content": "You are assessing..."
                    }
                  ],
                  "output": [
                    {
                      "role": "assistant",
                      "content": "The rubric is not clear nor concise."
                    }
                  ],
                  "finish_reason": "stop",
                  "model": "gpt-4o-2024-08-06",
                  "usage": {
                    "total_tokens": 521,
                    "completion_tokens": 2,
                    "prompt_tokens": 519,
                    "cached_tokens": 0
                  },
                  "error": null,
                  "temperature": 1.0,
                  "max_completion_tokens": 2048,
                  "top_p": 1.0,
                  "seed": 42
                }
              },
            ],
            "first_id": "outputitem_67abd55eb6548190bb580745d5644a33",
            "last_id": "outputitem_67abd55eb6548190bb580745d5644a33",
            "has_more": false
          }
    EvalScoreModelGrader:
      title: ScoreModelGrader
      required:
      - input
      - model
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: "The object type, which is always `score_model`."
          enum:
          - score_model
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        model:
          type: string
          description: The model to use for the evaluation.
        sampling_params:
          type: object
          description: The sampling parameters for the model.
        input:
          type: array
          description: The input text. This may include template strings.
          items:
            $ref: "#/components/schemas/EvalItem"
        pass_threshold:
          type: number
          description: The threshold for the score.
        range:
          type: array
          description: "The range of the score. Defaults to `[0, 1]`."
          items:
            type: number
      description: |
        A ScoreModelGrader object that uses a model to assign a score to the input.
      x-oaiMeta:
        name: The eval score model grader object
        group: evals
        example: |
          {
            "type": "score_model",
            "name": "Example score model grader",
            "input": "{{sample.output_text}}",
            "reference": "{{item.label}}",
            "operation": "eq"
          }
    EvalStoredCompletionsDataSourceConfig:
      title: StoredCompletionsDataSourceConfig
      required:
      - schema
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of data source. Always `stored_completions`.
          default: stored_completions
          enum:
          - stored_completions
          x-stainless-const: true
        metadata:
          $ref: "#/components/schemas/Metadata"
        schema:
          type: object
          additionalProperties: true
          description: |
            The json schema for the run data source items.
            Learn how to build JSON schemas [here](https://json-schema.org/).
      description: |
        A StoredCompletionsDataSourceConfig which specifies the metadata property of your stored completions query.
        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
        The schema returned by this data source config is used to defined what variables are available in your evals.
        `item` and `sample` are both defined when using this data source config.
      x-oaiMeta:
        name: The stored completions data source object for evals
        group: evals
        example: |
          {
            "type": "stored_completions",
            "metadata": {
              "language": "english"
            },
            "schema": {
              "type": "object",
              "properties": {
                "item": {
                  "type": "object"
                },
                "sample": {
                  "type": "object"
                }
              },
              "required": [
                "item",
                "sample"
              }
          }
    EvalStoredCompletionsSource:
      title: StoredCompletionsRunDataSource
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of source. Always `stored_completions`.
          default: stored_completions
          enum:
          - stored_completions
          x-stainless-const: true
        metadata:
          $ref: "#/components/schemas/Metadata"
        model:
          type: string
          description: "An optional model to filter by (e.g., 'gpt-4o')."
          nullable: true
        created_after:
          type: integer
          description: An optional Unix timestamp to filter items created after this
            time.
          nullable: true
        created_before:
          type: integer
          description: An optional Unix timestamp to filter items created before this
            time.
          nullable: true
        limit:
          type: integer
          description: An optional maximum number of items to return.
          nullable: true
      description: |
        A StoredCompletionsRunDataSource configuration describing a set of filters
      x-oaiMeta:
        name: The stored completions data source object used to configure an individual
          run
        group: eval runs
        example: |
          {
            "type": "stored_completions",
            "model": "gpt-4o",
            "created_after": 1668124800,
            "created_before": 1668124900,
            "limit": 100,
            "metadata": {}
          }
    EvalStringCheckGrader:
      title: StringCheckGrader
      required:
      - input
      - name
      - operation
      - reference
      - type
      type: object
      properties:
        type:
          type: string
          description: "The object type, which is always `string_check`."
          enum:
          - string_check
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        input:
          type: string
          description: The input text. This may include template strings.
        reference:
          type: string
          description: The reference text. This may include template strings.
        operation:
          type: string
          description: "The string check operation to perform. One of `eq`, `ne`,\
            \ `like`, or `ilike`."
          enum:
          - eq
          - ne
          - like
          - ilike
      description: |
        A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.
      x-oaiMeta:
        name: The eval string check grader object
        group: evals
        example: |
          {
            "type": "string_check",
            "name": "Example string check grader",
            "input": "{{sample.output_text}}",
            "reference": "{{item.label}}",
            "operation": "eq"
          }
    EvalTextSimilarityGrader:
      title: TextSimilarityGrader
      required:
      - evaluation_metric
      - input
      - pass_threshold
      - reference
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of grader.
          default: text_similarity
          enum:
          - text_similarity
          x-stainless-const: true
        name:
          type: string
          description: The name of the grader.
        input:
          type: string
          description: The text being graded.
        reference:
          type: string
          description: The text being graded against.
        pass_threshold:
          type: number
          description: A float score where a value greater than or equal indicates
            a passing grade.
        evaluation_metric:
          type: string
          description: "The evaluation metric to use. One of `fuzzy_match`, `bleu`,\
            \ `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,\
            \ or `rouge_l`."
          enum:
          - fuzzy_match
          - bleu
          - gleu
          - meteor
          - rouge_1
          - rouge_2
          - rouge_3
          - rouge_4
          - rouge_5
          - rouge_l
      description: |
        A TextSimilarityGrader object which grades text based on similarity metrics.
      x-oaiMeta:
        name: The eval text similarity grader object
        group: evals
        example: |
          {
            "type": "text_similarity",
            "name": "example text similarity grader",
            "input": "The graded text",
            "reference": "The reference text",
            "pass_threshold": 0.8,
            "evaluation_metric": "fuzzy_match"
          }
    FilePath:
      title: File path
      required:
      - file_id
      - index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the file path. Always `file_path`.
          enum:
          - file_path
          x-stainless-const: true
        file_id:
          type: string
          description: |
            The ID of the file.
        index:
          type: integer
          description: |
            The index of the file in the list of files.
      description: |
        A path to a file.
    FileSearchRanker:
      type: string
      description: The ranker to use for the file search. If not specified will use
        the `auto` ranker.
      enum:
      - auto
      - default_2024_08_21
    FileSearchRankingOptions:
      title: File search tool call ranking options
      required:
      - score_threshold
      type: object
      properties:
        ranker:
          $ref: "#/components/schemas/FileSearchRanker"
        score_threshold:
          maximum: 1
          minimum: 0
          type: number
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
      description: |
        The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.

        See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
    FileSearchToolCall:
      title: File search tool call
      required:
      - id
      - queries
      - status
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the file search tool call.
        type:
          type: string
          description: |
            The type of the file search tool call. Always `file_search_call`.
          enum:
          - file_search_call
          x-stainless-const: true
        status:
          type: string
          description: "The status of the file search tool call. One of `in_progress`,\
            \ \n`searching`, `incomplete` or `failed`,\n"
          enum:
          - in_progress
          - searching
          - completed
          - incomplete
          - failed
        queries:
          type: array
          description: |
            The queries used to search for files.
          items:
            type: string
        results:
          type: array
          description: |
            The results of the file search tool call.
          nullable: true
          items:
            $ref: "#/components/schemas/FileSearchToolCall_results"
      description: "The results of a file search tool call. See the \n[file search\
        \ guide](/docs/guides/tools-file-search) for more information.\n"
    FineTuneChatCompletionRequestAssistantMessage:
      required:
      - role
      allOf:
      - title: Assistant message
        type: object
        properties:
          weight:
            type: integer
            description: Controls whether the assistant message is trained against
              (0 or 1)
            enum:
            - 0
            - 1
        deprecated: false
      - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
    FineTuneChatRequestInput:
      type: object
      properties:
        messages:
          minItems: 1
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
            - $ref: "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
        tools:
          type: array
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: "#/components/schemas/ChatCompletionTool"
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        functions:
          maxItems: 128
          minItems: 1
          type: array
          description: A list of functions the model may generate JSON inputs for.
          deprecated: true
          items:
            $ref: "#/components/schemas/ChatCompletionFunctions"
      description: The per-line training example of a fine-tuning input file for chat
        models using the supervised method.
      x-oaiMeta:
        name: Training format for chat models using the supervised method
        example: |
          {
            "messages": [
              { "role": "user", "content": "What is the weather in San Francisco?" },
              {
                "role": "assistant",
                "tool_calls": [
                  {
                    "id": "call_id",
                    "type": "function",
                    "function": {
                      "name": "get_current_weather",
                      "arguments": "{\"location\": \"San Francisco, USA\", \"format\": \"celsius\"}"
                    }
                  }
                ]
              }
            ],
            "parallel_tool_calls": false,
            "tools": [
              {
                "type": "function",
                "function": {
                  "name": "get_current_weather",
                  "description": "Get the current weather",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "location": {
                          "type": "string",
                          "description": "The city and country, eg. San Francisco, USA"
                      },
                      "format": { "type": "string", "enum": ["celsius", "fahrenheit"] }
                    },
                    "required": ["location", "format"]
                  }
                }
              }
            ]
          }
    FineTuneCompletionRequestInput:
      type: object
      properties:
        prompt:
          type: string
          description: The input prompt for this training example.
        completion:
          type: string
          description: The desired completion for this training example.
      description: The per-line training example of a fine-tuning input file for completions
        models
      x-oaiMeta:
        name: Training format for completions models
        example: |
          {
            "prompt": "What is the answer to 2+2",
            "completion": "4"
          }
    FineTuneDPOMethod:
      type: object
      properties:
        hyperparameters:
          $ref: "#/components/schemas/FineTuneDPOMethod_hyperparameters"
      description: Configuration for the DPO fine-tuning method.
    FineTuneMethod:
      type: object
      properties:
        type:
          type: string
          description: The type of method. Is either `supervised` or `dpo`.
          enum:
          - supervised
          - dpo
        supervised:
          $ref: "#/components/schemas/FineTuneSupervisedMethod"
        dpo:
          $ref: "#/components/schemas/FineTuneDPOMethod"
      description: The method used for fine-tuning.
    FineTunePreferenceRequestInput:
      type: object
      properties:
        input:
          $ref: "#/components/schemas/FineTunePreferenceRequestInput_input"
        preferred_completion:
          maxItems: 1
          type: array
          description: The preferred completion message for the output.
          items:
            oneOf:
            - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
        non_preferred_completion:
          maxItems: 1
          type: array
          description: The non-preferred completion message for the output.
          items:
            oneOf:
            - $ref: "#/components/schemas/ChatCompletionRequestAssistantMessage"
      description: The per-line training example of a fine-tuning input file for chat
        models using the dpo method.
      x-oaiMeta:
        name: Training format for chat models using the preference method
        example: |
          {
            "input": {
              "messages": [
                { "role": "user", "content": "What is the weather in San Francisco?" }
              ]
            },
            "preferred_completion": [
              {
                "role": "assistant",
                "content": "The weather in San Francisco is 70 degrees Fahrenheit."
              }
            ],
            "non_preferred_completion": [
              {
                "role": "assistant",
                "content": "The weather in San Francisco is 21 degrees Celsius."
              }
            ]
          }
    FineTuneSupervisedMethod:
      type: object
      properties:
        hyperparameters:
          $ref: "#/components/schemas/FineTuneSupervisedMethod_hyperparameters"
      description: Configuration for the supervised fine-tuning method.
    FineTuningCheckpointPermission:
      title: FineTuningCheckpointPermission
      required:
      - created_at
      - id
      - object
      - project_id
      type: object
      properties:
        id:
          type: string
          description: "The permission identifier, which can be referenced in the\
            \ API endpoints."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the permission was
            created.
        project_id:
          type: string
          description: The project identifier that the permission is for.
        object:
          type: string
          description: "The object type, which is always \"checkpoint.permission\"\
            ."
          enum:
          - checkpoint.permission
          x-stainless-const: true
      description: |
        The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.
      x-oaiMeta:
        name: The fine-tuned model checkpoint permission object
        example: |
          {
            "object": "checkpoint.permission",
            "id": "cp_zc4Q7MP6XxulcVzj4MZdwsAB",
            "created_at": 1712211699,
            "project_id": "proj_abGMw1llN8IrBb6SvvY5A1iH"
          }
    FineTuningIntegration:
      title: Fine-Tuning Job Integration
      required:
      - type
      - wandb
      type: object
      properties:
        type:
          type: string
          description: The type of the integration being enabled for the fine-tuning
            job
          enum:
          - wandb
          x-stainless-const: true
        wandb:
          $ref: "#/components/schemas/CreateFineTuningJobRequest_wandb"
    FineTuningJob:
      title: FineTuningJob
      required:
      - created_at
      - error
      - fine_tuned_model
      - finished_at
      - hyperparameters
      - id
      - model
      - object
      - organization_id
      - result_files
      - seed
      - status
      - trained_tokens
      - training_file
      - validation_file
      type: object
      properties:
        id:
          type: string
          description: "The object identifier, which can be referenced in the API\
            \ endpoints."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
        error:
          $ref: "#/components/schemas/FineTuningJob_error"
        fine_tuned_model:
          type: string
          description: The name of the fine-tuned model that is being created. The
            value will be null if the fine-tuning job is still running.
          nullable: true
        finished_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was finished. The value will be null if the fine-tuning job is still running.
          nullable: true
        hyperparameters:
          $ref: "#/components/schemas/FineTuningJob_hyperparameters"
        model:
          type: string
          description: The base model that is being fine-tuned.
        object:
          type: string
          description: "The object type, which is always \"fine_tuning.job\"."
          enum:
          - fine_tuning.job
          x-stainless-const: true
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        result_files:
          type: array
          description: "The compiled results file ID(s) for the fine-tuning job. You\
            \ can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          items:
            type: string
            example: file-abc123
        status:
          type: string
          description: "The current status of the fine-tuning job, which can be either\
            \ `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."
          enum:
          - validating_files
          - queued
          - running
          - succeeded
          - failed
          - cancelled
        trained_tokens:
          type: integer
          description: The total number of billable tokens processed by this fine-tuning
            job. The value will be null if the fine-tuning job is still running.
          nullable: true
        training_file:
          type: string
          description: "The file ID used for training. You can retrieve the training\
            \ data with the [Files API](/docs/api-reference/files/retrieve-contents)."
        validation_file:
          type: string
          description: "The file ID used for validation. You can retrieve the validation\
            \ results with the [Files API](/docs/api-reference/files/retrieve-contents)."
          nullable: true
        integrations:
          maxItems: 5
          type: array
          description: A list of integrations to enable for this fine-tuning job.
          nullable: true
          items:
            oneOf:
            - $ref: "#/components/schemas/FineTuningIntegration"
        seed:
          type: integer
          description: The seed used for the fine-tuning job.
        estimated_finish:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            is estimated to finish. The value will be null if the fine-tuning job
            is not running.
          nullable: true
        method:
          $ref: "#/components/schemas/FineTuneMethod"
        metadata:
          $ref: "#/components/schemas/Metadata"
      description: |
        The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
      x-oaiMeta:
        name: The fine-tuning job object
        example: |
          {
            "object": "fine_tuning.job",
            "id": "ftjob-abc123",
            "model": "davinci-002",
            "created_at": 1692661014,
            "finished_at": 1692661190,
            "fine_tuned_model": "ft:davinci-002:my-org:custom_suffix:7q8mpxmy",
            "organization_id": "org-123",
            "result_files": [
                "file-abc123"
            ],
            "status": "succeeded",
            "validation_file": null,
            "training_file": "file-abc123",
            "hyperparameters": {
                "n_epochs": 4,
                "batch_size": 1,
                "learning_rate_multiplier": 1.0
            },
            "trained_tokens": 5768,
            "integrations": [],
            "seed": 0,
            "estimated_finish": 0,
            "method": {
              "type": "supervised",
              "supervised": {
                "hyperparameters": {
                  "n_epochs": 4,
                  "batch_size": 1,
                  "learning_rate_multiplier": 1.0
                }
              }
            },
            "metadata": {
              "key": "value"
            }
          }
    FineTuningJobCheckpoint:
      title: FineTuningJobCheckpoint
      required:
      - created_at
      - fine_tuned_model_checkpoint
      - fine_tuning_job_id
      - id
      - metrics
      - object
      - step_number
      type: object
      properties:
        id:
          type: string
          description: "The checkpoint identifier, which can be referenced in the\
            \ API endpoints."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the checkpoint was
            created.
        fine_tuned_model_checkpoint:
          type: string
          description: The name of the fine-tuned checkpoint model that is created.
        step_number:
          type: integer
          description: The step number that the checkpoint was created at.
        metrics:
          $ref: "#/components/schemas/FineTuningJobCheckpoint_metrics"
        fine_tuning_job_id:
          type: string
          description: The name of the fine-tuning job that this checkpoint was created
            from.
        object:
          type: string
          description: "The object type, which is always \"fine_tuning.job.checkpoint\"\
            ."
          enum:
          - fine_tuning.job.checkpoint
          x-stainless-const: true
      description: |
        The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
      x-oaiMeta:
        name: The fine-tuning job checkpoint object
        example: |
          {
            "object": "fine_tuning.job.checkpoint",
            "id": "ftckpt_qtZ5Gyk4BLq1SfLFWp3RtO3P",
            "created_at": 1712211699,
            "fine_tuned_model_checkpoint": "ft:gpt-4o-mini-2024-07-18:my-org:custom_suffix:9ABel2dg:ckpt-step-88",
            "fine_tuning_job_id": "ftjob-fpbNQ3H1GrMehXRf8cO97xTN",
            "metrics": {
              "step": 88,
              "train_loss": 0.478,
              "train_mean_token_accuracy": 0.924,
              "valid_loss": 10.112,
              "valid_mean_token_accuracy": 0.145,
              "full_valid_loss": 0.567,
              "full_valid_mean_token_accuracy": 0.944
            },
            "step_number": 88
          }
    FineTuningJobEvent:
      required:
      - created_at
      - id
      - level
      - message
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always \"fine_tuning.job.event\"\
            ."
          enum:
          - fine_tuning.job.event
          x-stainless-const: true
        id:
          type: string
          description: The object identifier.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
        level:
          type: string
          description: The log level of the event.
          enum:
          - info
          - warn
          - error
        message:
          type: string
          description: The message of the event.
        type:
          type: string
          description: The type of event.
          enum:
          - message
          - metrics
        data:
          type: object
          description: The data associated with the event.
      description: Fine-tuning job event object
      x-oaiMeta:
        name: The fine-tuning job event object
        example: |
          {
            "object": "fine_tuning.job.event",
            "id": "ftevent-abc123"
            "created_at": 1677610602,
            "level": "info",
            "message": "Created fine-tuning job",
            "data": {},
            "type": "message"
          }
    FunctionObject:
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: "A description of what the function does, used by the model\
            \ to choose when and how to call the function."
        name:
          type: string
          description: "The name of the function to be called. Must be a-z, A-Z, 0-9,\
            \ or contain underscores and dashes, with a maximum length of 64."
        parameters:
          $ref: "#/components/schemas/FunctionParameters"
        strict:
          type: boolean
          description: "Whether to enable strict schema adherence when generating\
            \ the function call. If set to true, the model will follow the exact schema\
            \ defined in the `parameters` field. Only a subset of JSON Schema is supported\
            \ when `strict` is `true`. Learn more about Structured Outputs in the\
            \ [function calling guide](docs/guides/function-calling)."
          nullable: true
          default: false
    FunctionParameters:
      type: object
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/function-calling) for examples, and\
        \ the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format. \n\nOmitting `parameters` defines a\
        \ function with an empty parameter list."
    FunctionToolCall:
      title: Function tool call
      required:
      - arguments
      - call_id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the function tool call.
        type:
          type: string
          description: |
            The type of the function tool call. Always `function_call`.
          enum:
          - function_call
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        name:
          type: string
          description: |
            The name of the function to run.
        arguments:
          type: string
          description: |
            A JSON string of the arguments to pass to the function.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling)\
        \ for more information.\n"
    FunctionToolCallOutput:
      title: Function tool call output
      required:
      - call_id
      - output
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the function tool call output. Populated when this item
            is returned via API.
        type:
          type: string
          description: |
            The type of the function tool call output. Always `function_call_output`.
          enum:
          - function_call_output
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        output:
          type: string
          description: |
            A JSON string of the output of the function tool call.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: |
        The output of a function tool call.
    FunctionToolCallOutputResource:
      allOf:
      - $ref: "#/components/schemas/FunctionToolCallOutput"
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: |
              The unique ID of the function call tool output.
    FunctionToolCallResource:
      allOf:
      - $ref: "#/components/schemas/FunctionToolCall"
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: |
              The unique ID of the function tool call.
    Image:
      type: object
      properties:
        b64_json:
          type: string
          description: "The base64-encoded JSON of the generated image. Default value\
            \ for `gpt-image-1`, and only present if `response_format` is set to `b64_json`\
            \ for `dall-e-2` and `dall-e-3`."
        url:
          type: string
          description: "When using `dall-e-2` or `dall-e-3`, the URL of the generated\
            \ image if `response_format` is set to `url` (default value). Unsupported\
            \ for `gpt-image-1`."
        revised_prompt:
          type: string
          description: "For `dall-e-3` only, the revised prompt that was used to generate\
            \ the image."
      description: Represents the content or the URL of an image generated by the
        OpenAI API.
    ImagesResponse:
      title: Image generation response
      required:
      - created
      type: object
      properties:
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the image was created.
        data:
          type: array
          description: The list of generated images.
          items:
            $ref: "#/components/schemas/Image"
        usage:
          $ref: "#/components/schemas/ImagesResponse_usage"
      description: The response from the image generation endpoint.
      x-oaiMeta:
        name: The image generation response
        group: images
        example: |
          {
            "created": 1713833628,
            "data": [
              {
                "b64_json": "..."
              }
            ],
            "usage": {
              "total_tokens": 100,
              "input_tokens": 50,
              "output_tokens": 50,
              "input_tokens_details": {
                "text_tokens": 10,
                "image_tokens": 40
              }
            }
          }
    Includable:
      type: string
      description: |
        Specify additional output data to include in the model response. Currently
        supported values are:
        - `file_search_call.results`: Include the search results of
          the file search tool call.
        - `message.input_image.image_url`: Include image urls from the input message.
        - `computer_call_output.output.image_url`: Include image urls from the computer call output.
      enum:
      - file_search_call.results
      - message.input_image.image_url
      - computer_call_output.output.image_url
    InputAudio:
      title: Audio input
      required:
      - data
      - format
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the input item. Always `input_audio`.
          enum:
          - input_audio
          x-stainless-const: true
        data:
          type: string
          description: |
            Base64-encoded audio data.
        format:
          type: string
          description: |
            The format of the audio data. Currently supported formats are `mp3` and
            `wav`.
          enum:
          - mp3
          - wav
      description: |
        An audio input to the model.
    InputContent:
      oneOf:
      - $ref: "#/components/schemas/InputTextContent"
      - $ref: "#/components/schemas/InputImageContent"
      - $ref: "#/components/schemas/InputFileContent"
    InputItem:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/EasyInputMessage"
      - $ref: "#/components/schemas/Item"
      - $ref: "#/components/schemas/ItemReferenceParam"
    InputMessage:
      title: Input message
      required:
      - content
      - role
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the message input. Always set to `message`.
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: |
            The role of the message input. One of `user`, `system`, or `developer`.
          enum:
          - user
          - system
          - developer
        status:
          type: string
          description: |
            The status of item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
        content:
          $ref: "#/components/schemas/InputMessageContentList"
      description: |
        A message input to the model with a role indicating instruction following
        hierarchy. Instructions given with the `developer` or `system` role take
        precedence over instructions given with the `user` role.
    InputMessageContentList:
      title: Input item content list
      type: array
      description: "A list of one or many input items to the model, containing different\
        \ content \ntypes.\n"
      items:
        $ref: "#/components/schemas/InputContent"
    InputMessageResource:
      allOf:
      - $ref: "#/components/schemas/InputMessage"
      - required:
        - id
        type: object
        properties:
          id:
            type: string
            description: |
              The unique ID of the message input.
    Invite:
      required:
      - email
      - expires_at
      - id
      - invited_at
      - object
      - role
      - status
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.invite`"
          enum:
          - organization.invite
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        email:
          type: string
          description: The email address of the individual to whom the invite was
            sent
        role:
          type: string
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
        status:
          type: string
          description: "`accepted`,`expired`, or `pending`"
          enum:
          - accepted
          - expired
          - pending
        invited_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was sent.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite expires.
        accepted_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the invite was accepted.
        projects:
          type: array
          description: The projects that were granted membership upon acceptance of
            the invite.
          items:
            $ref: "#/components/schemas/Invite_projects"
      description: Represents an individual `invite` to the organization.
      x-oaiMeta:
        name: The invite object
        example: |
          {
            "object": "organization.invite",
            "id": "invite-abc",
            "email": "user@example.com",
            "role": "owner",
            "status": "accepted",
            "invited_at": 1711471533,
            "expires_at": 1711471533,
            "accepted_at": 1711471533,
            "projects": [
              {
                "id": "project-xyz",
                "role": "member"
              }
            ]
          }
    InviteDeleteResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.invite.deleted`"
          enum:
          - organization.invite.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
    InviteListResponse:
      required:
      - data
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `list`"
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Invite"
        first_id:
          type: string
          description: The first `invite_id` in the retrieved `list`
        last_id:
          type: string
          description: The last `invite_id` in the retrieved `list`
        has_more:
          type: boolean
          description: The `has_more` property is used for pagination to indicate
            there are additional results.
    InviteRequest:
      required:
      - email
      - role
      type: object
      properties:
        email:
          type: string
          description: Send an email to this address
        role:
          type: string
          description: '`owner` or `reader`'
          enum:
          - reader
          - owner
        projects:
          type: array
          description: "An array of projects to which membership is granted at the\
            \ same time the org invite is accepted. If omitted, the user will be invited\
            \ to the default project for compatibility with legacy behavior."
          items:
            $ref: "#/components/schemas/InviteRequest_projects"
    Item:
      type: object
      description: |
        Content item used to generate a response.
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/InputMessage"
      - $ref: "#/components/schemas/OutputMessage"
      - $ref: "#/components/schemas/FileSearchToolCall"
      - $ref: "#/components/schemas/ComputerToolCall"
      - $ref: "#/components/schemas/ComputerCallOutputItemParam"
      - $ref: "#/components/schemas/WebSearchToolCall"
      - $ref: "#/components/schemas/FunctionToolCall"
      - $ref: "#/components/schemas/FunctionCallOutputItemParam"
      - $ref: "#/components/schemas/ReasoningItem"
    ItemResource:
      description: |
        Content item used to generate a response.
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/InputMessageResource"
      - $ref: "#/components/schemas/OutputMessage"
      - $ref: "#/components/schemas/FileSearchToolCall"
      - $ref: "#/components/schemas/ComputerToolCall"
      - $ref: "#/components/schemas/ComputerToolCallOutputResource"
      - $ref: "#/components/schemas/WebSearchToolCall"
      - $ref: "#/components/schemas/FunctionToolCallResource"
      - $ref: "#/components/schemas/FunctionToolCallOutputResource"
    KeyPress:
      title: KeyPress
      required:
      - keys
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a keypress action, this property\
            \ is \nalways set to `keypress`.\n"
          default: keypress
          enum:
          - keypress
          x-stainless-const: true
        keys:
          type: array
          description: |
            The combination of keys the model is requesting to be pressed. This is an
            array of strings, each representing a key.
          items:
            type: string
            description: |
              One of the keys the model is requesting to be pressed.
      description: |
        A collection of keypresses the model would like to perform.
    ListAssistantsResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/AssistantObject"
        first_id:
          type: string
          example: asst_abc123
        last_id:
          type: string
          example: asst_abc456
        has_more:
          type: boolean
          example: false
      x-oaiMeta:
        name: List assistants response object
        group: chat
        example: |
          {
            "object": "list",
            "data": [
              {
                "id": "asst_abc123",
                "object": "assistant",
                "created_at": 1698982736,
                "name": "Coding Tutor",
                "description": null,
                "model": "gpt-4o",
                "instructions": "You are a helpful assistant designed to make me better at coding!",
                "tools": [],
                "tool_resources": {},
                "metadata": {},
                "top_p": 1.0,
                "temperature": 1.0,
                "response_format": "auto"
              },
              {
                "id": "asst_abc456",
                "object": "assistant",
                "created_at": 1698982718,
                "name": "My Assistant",
                "description": null,
                "model": "gpt-4o",
                "instructions": "You are a helpful assistant designed to make me better at coding!",
                "tools": [],
                "tool_resources": {},
                "metadata": {},
                "top_p": 1.0,
                "temperature": 1.0,
                "response_format": "auto"
              },
              {
                "id": "asst_abc789",
                "object": "assistant",
                "created_at": 1698982643,
                "name": null,
                "description": null,
                "model": "gpt-4o",
                "instructions": null,
                "tools": [],
                "tool_resources": {},
                "metadata": {},
                "top_p": 1.0,
                "temperature": 1.0,
                "response_format": "auto"
              }
            ],
            "first_id": "asst_abc123",
            "last_id": "asst_abc789",
            "has_more": false
          }
    ListAuditLogsResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/AuditLog"
        first_id:
          type: string
          example: audit_log-defb456h8dks
        last_id:
          type: string
          example: audit_log-hnbkd8s93s
        has_more:
          type: boolean
    ListBatchesResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Batch"
        first_id:
          type: string
          example: batch_abc123
        last_id:
          type: string
          example: batch_abc456
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
    ListCertificatesResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Certificate"
        first_id:
          type: string
          example: cert_abc
        last_id:
          type: string
          example: cert_abc
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
    ListFilesResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/OpenAIFile"
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
    ListFineTuningCheckpointPermissionResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FineTuningCheckpointPermission"
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        first_id:
          type: string
          nullable: true
        last_id:
          type: string
          nullable: true
        has_more:
          type: boolean
    ListFineTuningJobCheckpointsResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FineTuningJobCheckpoint"
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        first_id:
          type: string
          nullable: true
        last_id:
          type: string
          nullable: true
        has_more:
          type: boolean
    ListFineTuningJobEventsResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FineTuningJobEvent"
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        has_more:
          type: boolean
    ListMessagesResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/MessageObject"
        first_id:
          type: string
          example: msg_abc123
        last_id:
          type: string
          example: msg_abc123
        has_more:
          type: boolean
          example: false
    ListModelsResponse:
      required:
      - data
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Model"
    ListPaginatedFineTuningJobsResponse:
      required:
      - data
      - has_more
      - object
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FineTuningJob"
        has_more:
          type: boolean
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
    ListRunStepsResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/RunStepObject"
        first_id:
          type: string
          example: step_abc123
        last_id:
          type: string
          example: step_abc456
        has_more:
          type: boolean
          example: false
    ListRunsResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/RunObject"
        first_id:
          type: string
          example: run_abc123
        last_id:
          type: string
          example: run_abc456
        has_more:
          type: boolean
          example: false
    ListVectorStoreFilesResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/VectorStoreFileObject"
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
    ListVectorStoresResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: "#/components/schemas/VectorStoreObject"
        first_id:
          type: string
          example: vs_abc123
        last_id:
          type: string
          example: vs_abc456
        has_more:
          type: boolean
          example: false
    LogProbProperties:
      required:
      - bytes
      - logprob
      - token
      type: object
      properties:
        token:
          type: string
          description: |
            The token that was used to generate the log probability.
        logprob:
          type: number
          description: |
            The log probability of the token.
        bytes:
          type: array
          description: |
            The bytes that were used to generate the log probability.
          items:
            type: integer
      description: |
        A log probability object.
    MessageContentImageFileObject:
      title: Image file
      required:
      - image_file
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `image_file`.
          enum:
          - image_file
          x-stainless-const: true
        image_file:
          $ref: "#/components/schemas/MessageContentImageFileObject_image_file"
      description: "References an image [File](/docs/api-reference/files) in the content\
        \ of a message."
    MessageContentImageUrlObject:
      title: Image URL
      required:
      - image_url
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the content part.
          enum:
          - image_url
          x-stainless-const: true
        image_url:
          $ref: "#/components/schemas/MessageContentImageUrlObject_image_url"
      description: References an image URL in the content of a message.
    MessageContentRefusalObject:
      title: Refusal
      required:
      - refusal
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `refusal`.
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
          nullable: false
      description: The refusal content generated by the assistant.
    MessageContentTextAnnotationsFileCitationObject:
      title: File citation
      required:
      - end_index
      - file_citation
      - start_index
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `file_citation`.
          enum:
          - file_citation
          x-stainless-const: true
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          $ref: "#/components/schemas/MessageContentTextAnnotationsFileCitationObject_file_citation"
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
    MessageContentTextAnnotationsFilePathObject:
      title: File path
      required:
      - end_index
      - file_path
      - start_index
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `file_path`.
          enum:
          - file_path
          x-stainless-const: true
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          $ref: "#/components/schemas/MessageContentTextAnnotationsFilePathObject_file_path"
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
    MessageContentTextObject:
      title: Text
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `text`.
          enum:
          - text
          x-stainless-const: true
        text:
          $ref: "#/components/schemas/MessageContentTextObject_text"
      description: The text content that is part of a message.
    MessageDeltaContentImageFileObject:
      title: Image file
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          type: string
          description: Always `image_file`.
          enum:
          - image_file
          x-stainless-const: true
        image_file:
          $ref: "#/components/schemas/MessageDeltaContentImageFileObject_image_file"
      description: "References an image [File](/docs/api-reference/files) in the content\
        \ of a message."
    MessageDeltaContentImageUrlObject:
      title: Image URL
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          type: string
          description: Always `image_url`.
          enum:
          - image_url
          x-stainless-const: true
        image_url:
          $ref: "#/components/schemas/MessageDeltaContentImageUrlObject_image_url"
      description: References an image URL in the content of a message.
    MessageDeltaContentRefusalObject:
      title: Refusal
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the refusal part in the message.
        type:
          type: string
          description: Always `refusal`.
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
      description: The refusal content that is part of a message.
    MessageDeltaContentTextAnnotationsFileCitationObject:
      title: File citation
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          type: string
          description: Always `file_citation`.
          enum:
          - file_citation
          x-stainless-const: true
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject_file_citation"
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
    MessageDeltaContentTextAnnotationsFilePathObject:
      title: File path
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          type: string
          description: Always `file_path`.
          enum:
          - file_path
          x-stainless-const: true
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject_file_path"
        start_index:
          minimum: 0
          type: integer
        end_index:
          minimum: 0
          type: integer
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
    MessageDeltaContentTextObject:
      title: Text
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          type: string
          description: Always `text`.
          enum:
          - text
          x-stainless-const: true
        text:
          $ref: "#/components/schemas/MessageDeltaContentTextObject_text"
      description: The text content that is part of a message.
    MessageDeltaObject:
      title: Message delta object
      required:
      - delta
      - id
      - object
      type: object
      properties:
        id:
          type: string
          description: "The identifier of the message, which can be referenced in\
            \ API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread.message.delta`."
          enum:
          - thread.message.delta
          x-stainless-const: true
        delta:
          $ref: "#/components/schemas/MessageDeltaObject_delta"
      description: |
        Represents a message delta i.e. any changed fields on a message during streaming.
      x-oaiMeta:
        name: The message delta object
        beta: true
        example: |
          {
            "id": "msg_123",
            "object": "thread.message.delta",
            "delta": {
              "content": [
                {
                  "index": 0,
                  "type": "text",
                  "text": { "value": "Hello", "annotations": [] }
                }
              ]
            }
          }
    MessageObject:
      title: The message object
      required:
      - assistant_id
      - attachments
      - completed_at
      - content
      - created_at
      - id
      - incomplete_at
      - incomplete_details
      - metadata
      - object
      - role
      - run_id
      - status
      - thread_id
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread.message`."
          enum:
          - thread.message
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was created.
        thread_id:
          type: string
          description: "The [thread](/docs/api-reference/threads) ID that this message\
            \ belongs to."
        status:
          type: string
          description: "The status of the message, which can be either `in_progress`,\
            \ `incomplete`, or `completed`."
          enum:
          - in_progress
          - incomplete
          - completed
        incomplete_details:
          $ref: "#/components/schemas/MessageObject_incomplete_details"
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was completed.
          nullable: true
        incomplete_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was marked
            as incomplete.
          nullable: true
        role:
          type: string
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
          - user
          - assistant
        content:
          type: array
          description: The content of the message in array of text and/or images.
          items:
            oneOf:
            - $ref: "#/components/schemas/MessageContentImageFileObject"
            - $ref: "#/components/schemas/MessageContentImageUrlObject"
            - $ref: "#/components/schemas/MessageContentTextObject"
            - $ref: "#/components/schemas/MessageContentRefusalObject"
        assistant_id:
          type: string
          description: "If applicable, the ID of the [assistant](/docs/api-reference/assistants)\
            \ that authored this message."
          nullable: true
        run_id:
          type: string
          description: "The ID of the [run](/docs/api-reference/runs) associated with\
            \ the creation of this message. Value is `null` when messages are created\
            \ manually using the create message or create thread endpoints."
          nullable: true
        attachments:
          type: array
          description: "A list of files attached to the message, and the tools they\
            \ were added to."
          nullable: true
          items:
            $ref: "#/components/schemas/CreateMessageRequest_attachments"
        metadata:
          $ref: "#/components/schemas/Metadata"
      description: "Represents a message within a [thread](/docs/api-reference/threads)."
      x-oaiMeta:
        name: The message object
        beta: true
        example: |
          {
            "id": "msg_abc123",
            "object": "thread.message",
            "created_at": 1698983503,
            "thread_id": "thread_abc123",
            "role": "assistant",
            "content": [
              {
                "type": "text",
                "text": {
                  "value": "Hi! How can I help you today?",
                  "annotations": []
                }
              }
            ],
            "assistant_id": "asst_abc123",
            "run_id": "run_abc123",
            "attachments": [],
            "metadata": {}
          }
    MessageRequestContentTextObject:
      title: Text
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `text`.
          enum:
          - text
          x-stainless-const: true
        text:
          type: string
          description: Text content to be sent to the model
      description: The text content that is part of a message.
    MessageStreamEvent:
      oneOf:
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.created
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/MessageObject"
        description: "Occurs when a [message](/docs/api-reference/messages/object)\
          \ is created."
        x-oaiMeta:
          dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.in_progress
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/MessageObject"
        description: "Occurs when a [message](/docs/api-reference/messages/object)\
          \ moves to an `in_progress` state."
        x-oaiMeta:
          dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.delta
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/MessageDeltaObject"
        description: "Occurs when parts of a [Message](/docs/api-reference/messages/object)\
          \ are being streamed."
        x-oaiMeta:
          dataDescription: "`data` is a [message delta](/docs/api-reference/assistants-streaming/message-delta-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.completed
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/MessageObject"
        description: "Occurs when a [message](/docs/api-reference/messages/object)\
          \ is completed."
        x-oaiMeta:
          dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.message.incomplete
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/MessageObject"
        description: "Occurs when a [message](/docs/api-reference/messages/object)\
          \ ends before it is completed."
        x-oaiMeta:
          dataDescription: "`data` is a [message](/docs/api-reference/messages/object)"
    Metadata:
      type: object
      additionalProperties:
        type: string
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be\nuseful for storing additional information about the object in a\
        \ structured\nformat, and querying for objects via API or the dashboard. \n\
        \nKeys are strings with a maximum length of 64 characters. Values are strings\n\
        with a maximum length of 512 characters.\n"
      nullable: true
      x-oaiTypeLabel: map
    Model:
      title: Model
      required:
      - created
      - id
      - object
      - owned_by
      properties:
        id:
          type: string
          description: "The model identifier, which can be referenced in the API endpoints."
        created:
          type: integer
          description: The Unix timestamp (in seconds) when the model was created.
        object:
          type: string
          description: "The object type, which is always \"model\"."
          enum:
          - model
          x-stainless-const: true
        owned_by:
          type: string
          description: The organization that owns the model.
      description: Describes an OpenAI model offering that can be used with the API.
      x-oaiMeta:
        name: The model object
        example: |
          {
            "id": "VAR_chat_model_id",
            "object": "model",
            "created": 1686935002,
            "owned_by": "openai"
          }
    ModelIds:
      anyOf:
      - $ref: "#/components/schemas/ModelIdsShared"
      - $ref: "#/components/schemas/ModelIdsResponses"
    ModelIdsResponses:
      example: gpt-4o
      anyOf:
      - $ref: "#/components/schemas/ModelIdsShared"
      - title: ResponsesOnlyModel
        type: string
        enum:
        - o1-pro
        - o1-pro-2025-03-19
        - computer-use-preview
        - computer-use-preview-2025-03-11
    ModelIdsShared:
      example: gpt-4o
      anyOf:
      - type: string
      - type: string
        enum:
        - gpt-4.1
        - gpt-4.1-mini
        - gpt-4.1-nano
        - gpt-4.1-2025-04-14
        - gpt-4.1-mini-2025-04-14
        - gpt-4.1-nano-2025-04-14
        - o4-mini
        - o4-mini-2025-04-16
        - o3
        - o3-2025-04-16
        - o3-mini
        - o3-mini-2025-01-31
        - o1
        - o1-2024-12-17
        - o1-preview
        - o1-preview-2024-09-12
        - o1-mini
        - o1-mini-2024-09-12
        - gpt-4o
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-audio-preview
        - gpt-4o-audio-preview-2024-10-01
        - gpt-4o-audio-preview-2024-12-17
        - gpt-4o-mini-audio-preview
        - gpt-4o-mini-audio-preview-2024-12-17
        - gpt-4o-search-preview
        - gpt-4o-mini-search-preview
        - gpt-4o-search-preview-2025-03-11
        - gpt-4o-mini-search-preview-2025-03-11
        - chatgpt-4o-latest
        - gpt-4o-mini
        - gpt-4o-mini-2024-07-18
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
    ModelResponseProperties:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            We generally recommend altering this or `top_p` but not both.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling,
            where the model considers the results of the tokens with top_p probability
            mass. So 0.1 means only the tokens comprising the top 10% probability mass
            are considered.

            We generally recommend altering this or `temperature` but not both.
          nullable: true
          example: 1
          default: 1
        user:
          type: string
          description: |
            A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).
          example: user-1234
        service_tier:
          $ref: "#/components/schemas/ServiceTier"
    ModifyAssistantRequest:
      type: object
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.
          anyOf:
          - type: string
          - $ref: "#/components/schemas/AssistantSupportedModels"
        reasoning_effort:
          $ref: "#/components/schemas/ReasoningEffort"
        name:
          maxLength: 256
          type: string
          description: |
            The name of the assistant. The maximum length is 256 characters.
          nullable: true
        description:
          maxLength: 512
          type: string
          description: |
            The description of the assistant. The maximum length is 512 characters.
          nullable: true
        instructions:
          maxLength: 256000
          type: string
          description: |
            The system instructions that the assistant uses. The maximum length is 256,000 characters.
          nullable: true
        tools:
          maxItems: 128
          type: array
          description: |
            A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
          default: []
        tool_resources:
          $ref: "#/components/schemas/ModifyAssistantRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
        temperature:
          maximum: 2
          minimum: 0
          type: number
          description: |
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          nullable: true
          example: 1
          default: 1
        top_p:
          maximum: 1
          minimum: 0
          type: number
          description: |
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          nullable: true
          example: 1
          default: 1
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      additionalProperties: false
    ModifyCertificateRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The updated name for the certificate
    ModifyMessageRequest:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    ModifyRunRequest:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    ModifyThreadRequest:
      type: object
      properties:
        tool_resources:
          $ref: "#/components/schemas/ModifyThreadRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    Move:
      title: Move
      required:
      - type
      - x
      - "y"
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a move action, this property\
            \ is \nalways set to `move`.\n"
          default: move
          enum:
          - move
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate to move to.
        "y":
          type: integer
          description: |
            The y-coordinate to move to.
      description: |
        A mouse move action.
    OpenAIFile:
      title: OpenAIFile
      required:
      - bytes
      - created_at
      - filename
      - id
      - object
      - purpose
      - status
      properties:
        id:
          type: string
          description: "The file identifier, which can be referenced in the API endpoints."
        bytes:
          type: integer
          description: "The size of the file, in bytes."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file was created.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the file will expire.
        filename:
          type: string
          description: The name of the file.
        object:
          type: string
          description: "The object type, which is always `file`."
          enum:
          - file
          x-stainless-const: true
        purpose:
          type: string
          description: "The intended purpose of the file. Supported values are `assistants`,\
            \ `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`\
            \ and `vision`."
          enum:
          - assistants
          - assistants_output
          - batch
          - batch_output
          - fine-tune
          - fine-tune-results
          - vision
        status:
          type: string
          description: "Deprecated. The current status of the file, which can be either\
            \ `uploaded`, `processed`, or `error`."
          deprecated: true
          enum:
          - uploaded
          - processed
          - error
        status_details:
          type: string
          description: "Deprecated. For details on why a fine-tuning training file\
            \ failed validation, see the `error` field on `fine_tuning.job`."
          deprecated: true
      description: The `File` object represents a document that has been uploaded
        to OpenAI.
      x-oaiMeta:
        name: The file object
        example: |
          {
            "id": "file-abc123",
            "object": "file",
            "bytes": 120000,
            "created_at": 1677610602,
            "expires_at": 1680202602,
            "filename": "salesOverview.pdf",
            "purpose": "assistants",
          }
    OtherChunkingStrategyResponseParam:
      title: Other Chunking Strategy
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `other`.
          enum:
          - other
          x-stainless-const: true
      additionalProperties: false
      description: "This is returned when the chunking strategy is unknown. Typically,\
        \ this is because the file was indexed before the `chunking_strategy` concept\
        \ was introduced in the API."
    OutputAudio:
      title: Output audio
      required:
      - data
      - transcript
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the output audio. Always `output_audio`.
          enum:
          - output_audio
          x-stainless-const: true
        data:
          type: string
          description: |
            Base64-encoded audio data from the model.
        transcript:
          type: string
          description: |
            The transcript of the audio data from the model.
      description: |
        An audio output from the model.
    OutputContent:
      oneOf:
      - $ref: "#/components/schemas/OutputTextContent"
      - $ref: "#/components/schemas/RefusalContent"
    OutputItem:
      discriminator:
        propertyName: type
      anyOf:
      - $ref: "#/components/schemas/OutputMessage"
      - $ref: "#/components/schemas/FileSearchToolCall"
      - $ref: "#/components/schemas/FunctionToolCall"
      - $ref: "#/components/schemas/WebSearchToolCall"
      - $ref: "#/components/schemas/ComputerToolCall"
      - $ref: "#/components/schemas/ReasoningItem"
    OutputMessage:
      title: Output message
      required:
      - content
      - id
      - role
      - status
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the output message.
        type:
          type: string
          description: |
            The type of the output message. Always `message`.
          enum:
          - message
          x-stainless-const: true
        role:
          type: string
          description: |
            The role of the output message. Always `assistant`.
          enum:
          - assistant
          x-stainless-const: true
        content:
          type: array
          description: |
            The content of the output message.
          items:
            $ref: "#/components/schemas/OutputContent"
        status:
          type: string
          description: |
            The status of the message input. One of `in_progress`, `completed`, or
            `incomplete`. Populated when input items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: |
        An output message from the model.
    ParallelToolCalls:
      type: boolean
      description: "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling)\
        \ during tool use."
      default: true
    PredictionContent:
      title: Static Content
      required:
      - content
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the predicted content you want to provide. This type is
            currently always `content`.
          enum:
          - content
          x-stainless-const: true
        content:
          description: |
            The content that should be matched when generating a model response.
            If generated tokens would match this content, the entire model response
            can be returned much more quickly.
          oneOf:
          - title: Text content
            type: string
            description: |
              The content used for a Predicted Output. This is often the
              text of a file you are regenerating with minor changes.
          - title: Array of content parts
            minItems: 1
            type: array
            description: "An array of content parts with a defined type. Supported\
              \ options differ based on the [model](/docs/models) being used to generate\
              \ the response. Can contain text inputs."
            items:
              $ref: "#/components/schemas/ChatCompletionRequestMessageContentPartText"
      description: |
        Static predicted output content, such as the content of a text file that is
        being regenerated.
    Project:
      required:
      - created_at
      - id
      - name
      - object
      - status
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        object:
          type: string
          description: "The object type, which is always `organization.project`"
          enum:
          - organization.project
          x-stainless-const: true
        name:
          type: string
          description: The name of the project. This appears in reporting.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was created.
        archived_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was archived
            or `null`.
          nullable: true
        status:
          type: string
          description: '`active` or `archived`'
          enum:
          - active
          - archived
      description: Represents an individual project.
      x-oaiMeta:
        name: The project object
        example: |
          {
              "id": "proj_abc",
              "object": "organization.project",
              "name": "Project example",
              "created_at": 1711471533,
              "archived_at": null,
              "status": "active"
          }
    ProjectApiKey:
      required:
      - created_at
      - id
      - last_used_at
      - name
      - object
      - owner
      - redacted_value
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.project.api_key`"
          enum:
          - organization.project.api_key
          x-stainless-const: true
        redacted_value:
          type: string
          description: The redacted value of the API key
        name:
          type: string
          description: The name of the API key
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was created
        last_used_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was last
            used.
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        owner:
          $ref: "#/components/schemas/ProjectApiKey_owner"
      description: Represents an individual API key in a project.
      x-oaiMeta:
        name: The project API key object
        example: |
          {
              "object": "organization.project.api_key",
              "redacted_value": "sk-abc...def",
              "name": "My API Key",
              "created_at": 1711471533,
              "last_used_at": 1711471534,
              "id": "key_abc",
              "owner": {
                  "type": "user",
                  "user": {
                      "object": "organization.project.user",
                      "id": "user_abc",
                      "name": "First Last",
                      "email": "user@example.com",
                      "role": "owner",
                      "created_at": 1711471533
                  }
              }
          }
    ProjectApiKeyDeleteResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.api_key.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
    ProjectApiKeyListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectApiKey"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ProjectCreateRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "The friendly name of the project, this name appears in reports."
    ProjectListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/Project"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ProjectRateLimit:
      required:
      - id
      - max_requests_per_1_minute
      - max_tokens_per_1_minute
      - model
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `project.rate_limit`"
          enum:
          - project.rate_limit
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        model:
          type: string
          description: The model this rate limit applies to.
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only present for relevant models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only present for relevant
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only present for relevant models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only present for relevant
            models.
      description: Represents a project rate limit config.
      x-oaiMeta:
        name: The project rate limit object
        example: |
          {
              "object": "project.rate_limit",
              "id": "rl_ada",
              "model": "ada",
              "max_requests_per_1_minute": 600,
              "max_tokens_per_1_minute": 150000,
              "max_images_per_1_minute": 10
          }
    ProjectRateLimitListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectRateLimit"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ProjectRateLimitUpdateRequest:
      type: object
      properties:
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only relevant for certain models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only relevant for certain
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only relevant for certain models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only relevant for certain
            models.
    ProjectServiceAccount:
      required:
      - created_at
      - id
      - name
      - object
      - role
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.project.service_account`"
          enum:
          - organization.project.service_account
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        name:
          type: string
          description: The name of the service account
        role:
          type: string
          description: '`owner` or `member`'
          enum:
          - owner
          - member
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the service account
            was created
      description: Represents an individual service account in a project.
      x-oaiMeta:
        name: The project service account object
        example: |
          {
              "object": "organization.project.service_account",
              "id": "svc_acct_abc",
              "name": "Service Account",
              "role": "owner",
              "created_at": 1711471533
          }
    ProjectServiceAccountApiKey:
      required:
      - created_at
      - id
      - name
      - object
      - value
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.project.service_account.api_key`"
          enum:
          - organization.project.service_account.api_key
          x-stainless-const: true
        value:
          type: string
        name:
          type: string
        created_at:
          type: integer
        id:
          type: string
    ProjectServiceAccountCreateRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the service account being created.
    ProjectServiceAccountCreateResponse:
      required:
      - api_key
      - created_at
      - id
      - name
      - object
      - role
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account
          x-stainless-const: true
        id:
          type: string
        name:
          type: string
        role:
          type: string
          description: Service accounts can only have one role of type `member`
          enum:
          - member
          x-stainless-const: true
        created_at:
          type: integer
        api_key:
          $ref: "#/components/schemas/ProjectServiceAccountApiKey"
    ProjectServiceAccountDeleteResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.service_account.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
    ProjectServiceAccountListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectServiceAccount"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ProjectUpdateRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "The updated name of the project, this name appears in reports."
    ProjectUser:
      required:
      - added_at
      - email
      - id
      - name
      - object
      - role
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.project.user`"
          enum:
          - organization.project.user
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          description: '`owner` or `member`'
          enum:
          - owner
          - member
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was added.
      description: Represents an individual user in a project.
      x-oaiMeta:
        name: The project user object
        example: |
          {
              "object": "organization.project.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    ProjectUserCreateRequest:
      required:
      - role
      - user_id
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user.
        role:
          type: string
          description: '`owner` or `member`'
          enum:
          - owner
          - member
    ProjectUserDeleteResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.project.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
    ProjectUserListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectUser"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ProjectUserUpdateRequest:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: '`owner` or `member`'
          enum:
          - owner
          - member
    RealtimeClientEvent:
      description: |
        A realtime client event.
      discriminator:
        propertyName: type
      anyOf:
      - $ref: "#/components/schemas/RealtimeClientEventConversationItemCreate"
      - $ref: "#/components/schemas/RealtimeClientEventConversationItemDelete"
      - $ref: "#/components/schemas/RealtimeClientEventConversationItemRetrieve"
      - $ref: "#/components/schemas/RealtimeClientEventConversationItemTruncate"
      - $ref: "#/components/schemas/RealtimeClientEventInputAudioBufferAppend"
      - $ref: "#/components/schemas/RealtimeClientEventInputAudioBufferClear"
      - $ref: "#/components/schemas/RealtimeClientEventOutputAudioBufferClear"
      - $ref: "#/components/schemas/RealtimeClientEventInputAudioBufferCommit"
      - $ref: "#/components/schemas/RealtimeClientEventResponseCancel"
      - $ref: "#/components/schemas/RealtimeClientEventResponseCreate"
      - $ref: "#/components/schemas/RealtimeClientEventSessionUpdate"
      - $ref: "#/components/schemas/RealtimeClientEventTranscriptionSessionUpdate"
    RealtimeClientEventConversationItemCreate:
      required:
      - item
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `conversation.item.create`."
          enum:
          - conversation.item.create
          x-stainless-const: true
        previous_item_id:
          type: string
          description: "The ID of the preceding item after which the new item will\
            \ be inserted. \nIf not set, the new item will be appended to the end\
            \ of the conversation.\nIf set to `root`, the new item will be added to\
            \ the beginning of the conversation.\nIf set to an existing ID, it allows\
            \ an item to be inserted mid-conversation. If the\nID cannot be found,\
            \ an error will be returned and the item will not be added.\n"
        item:
          $ref: "#/components/schemas/RealtimeConversationItem"
      description: "Add a new Item to the Conversation's context, including messages,\
        \ function \ncalls, and function call responses. This event can be used both\
        \ to populate a \n\"history\" of the conversation and to add new items mid-stream,\
        \ but has the \ncurrent limitation that it cannot populate assistant audio\
        \ messages.\n\nIf successful, the server will respond with a `conversation.item.created`\
        \ \nevent, otherwise an `error` event will be sent.\n"
      x-oaiMeta:
        name: conversation.item.create
        group: realtime
        example: |
          {
              "event_id": "event_345",
              "type": "conversation.item.create",
              "previous_item_id": null,
              "item": {
                  "id": "msg_001",
                  "type": "message",
                  "role": "user",
                  "content": [
                      {
                          "type": "input_text",
                          "text": "Hello, how are you?"
                      }
                  ]
              }
          }
    RealtimeClientEventConversationItemDelete:
      required:
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `conversation.item.delete`."
          enum:
          - conversation.item.delete
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item to delete.
      description: "Send this event when you want to remove any item from the conversation\
        \ \nhistory. The server will respond with a `conversation.item.deleted` event,\
        \ \nunless the item does not exist in the conversation history, in which case\
        \ the \nserver will respond with an error.\n"
      x-oaiMeta:
        name: conversation.item.delete
        group: realtime
        example: |
          {
              "event_id": "event_901",
              "type": "conversation.item.delete",
              "item_id": "msg_003"
          }
    RealtimeClientEventConversationItemRetrieve:
      required:
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `conversation.item.retrieve`."
          enum:
          - conversation.item.retrieve
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item to retrieve.
      description: "Send this event when you want to retrieve the server's representation\
        \ of a specific item in the conversation history. This is useful, for example,\
        \ to inspect user audio after noise cancellation and VAD.\nThe server will\
        \ respond with a `conversation.item.retrieved` event, \nunless the item does\
        \ not exist in the conversation history, in which case the \nserver will respond\
        \ with an error.\n"
      x-oaiMeta:
        name: conversation.item.retrieve
        group: realtime
        example: |
          {
              "event_id": "event_901",
              "type": "conversation.item.retrieve",
              "item_id": "msg_003"
          }
    RealtimeClientEventConversationItemTruncate:
      required:
      - audio_end_ms
      - content_index
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `conversation.item.truncate`."
          enum:
          - conversation.item.truncate
          x-stainless-const: true
        item_id:
          type: string
          description: "The ID of the assistant message item to truncate. Only assistant\
            \ message \nitems can be truncated.\n"
        content_index:
          type: integer
          description: The index of the content part to truncate. Set this to 0.
        audio_end_ms:
          type: integer
          description: "Inclusive duration up to which audio is truncated, in milliseconds.\
            \ If \nthe audio_end_ms is greater than the actual audio duration, the\
            \ server \nwill respond with an error.\n"
      description: "Send this event to truncate a previous assistant messageâ€™s audio.\
        \ The server \nwill produce audio faster than realtime, so this event is useful\
        \ when the user \ninterrupts to truncate audio that has already been sent\
        \ to the client but not \nyet played. This will synchronize the server's understanding\
        \ of the audio with \nthe client's playback.\n\nTruncating audio will delete\
        \ the server-side text transcript to ensure there \nis not text in the context\
        \ that hasn't been heard by the user.\n\nIf successful, the server will respond\
        \ with a `conversation.item.truncated` \nevent. \n"
      x-oaiMeta:
        name: conversation.item.truncate
        group: realtime
        example: |
          {
              "event_id": "event_678",
              "type": "conversation.item.truncate",
              "item_id": "msg_002",
              "content_index": 0,
              "audio_end_ms": 1500
          }
    RealtimeClientEventInputAudioBufferAppend:
      required:
      - audio
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.append`."
          enum:
          - input_audio_buffer.append
          x-stainless-const: true
        audio:
          type: string
          description: "Base64-encoded audio bytes. This must be in the format specified\
            \ by the \n`input_audio_format` field in the session configuration.\n"
      description: "Send this event to append audio bytes to the input audio buffer.\
        \ The audio \nbuffer is temporary storage you can write to and later commit.\
        \ In Server VAD \nmode, the audio buffer is used to detect speech and the\
        \ server will decide \nwhen to commit. When Server VAD is disabled, you must\
        \ commit the audio buffer\nmanually.\n\nThe client may choose how much audio\
        \ to place in each event up to a maximum \nof 15 MiB, for example streaming\
        \ smaller chunks from the client may allow the \nVAD to be more responsive.\
        \ Unlike made other client events, the server will \nnot send a confirmation\
        \ response to this event.\n"
      x-oaiMeta:
        name: input_audio_buffer.append
        group: realtime
        example: |
          {
              "event_id": "event_456",
              "type": "input_audio_buffer.append",
              "audio": "Base64EncodedAudioData"
          }
    RealtimeClientEventInputAudioBufferClear:
      required:
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.clear`."
          enum:
          - input_audio_buffer.clear
          x-stainless-const: true
      description: "Send this event to clear the audio bytes in the buffer. The server\
        \ will \nrespond with an `input_audio_buffer.cleared` event.\n"
      x-oaiMeta:
        name: input_audio_buffer.clear
        group: realtime
        example: |
          {
              "event_id": "event_012",
              "type": "input_audio_buffer.clear"
          }
    RealtimeClientEventInputAudioBufferCommit:
      required:
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.commit`."
          enum:
          - input_audio_buffer.commit
          x-stainless-const: true
      description: "Send this event to commit the user input audio buffer, which will\
        \ create a \nnew user message item in the conversation. This event will produce\
        \ an error \nif the input audio buffer is empty. When in Server VAD mode,\
        \ the client does \nnot need to send this event, the server will commit the\
        \ audio buffer \nautomatically.\n\nCommitting the input audio buffer will\
        \ trigger input audio transcription \n(if enabled in session configuration),\
        \ but it will not create a response \nfrom the model. The server will respond\
        \ with an `input_audio_buffer.committed` \nevent.\n"
      x-oaiMeta:
        name: input_audio_buffer.commit
        group: realtime
        example: |
          {
              "event_id": "event_789",
              "type": "input_audio_buffer.commit"
          }
    RealtimeClientEventOutputAudioBufferClear:
      required:
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the client event used for error handling.
        type:
          type: string
          description: "The event type, must be `output_audio_buffer.clear`."
          enum:
          - output_audio_buffer.clear
          x-stainless-const: true
      description: "**WebRTC Only:** Emit to cut off the current audio response. This\
        \ will trigger the server to\nstop generating audio and emit a `output_audio_buffer.cleared`\
        \ event. This \nevent should be preceded by a `response.cancel` client event\
        \ to stop the \ngeneration of the current response.\n[Learn more](/docs/guides/realtime-model-capabilities#client-and-server-events-for-audio-in-webrtc).\n"
      x-oaiMeta:
        name: output_audio_buffer.clear
        group: realtime
        example: |
          {
              "event_id": "optional_client_event_id",
              "type": "output_audio_buffer.clear"
          }
    RealtimeClientEventResponseCancel:
      required:
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `response.cancel`."
          enum:
          - response.cancel
          x-stainless-const: true
        response_id:
          type: string
          description: "A specific response ID to cancel - if not provided, will cancel\
            \ an \nin-progress response in the default conversation.\n"
      description: "Send this event to cancel an in-progress response. The server\
        \ will respond \nwith a `response.cancelled` event or an error if there is\
        \ no response to \ncancel.\n"
      x-oaiMeta:
        name: response.cancel
        group: realtime
        example: |
          {
              "event_id": "event_567",
              "type": "response.cancel"
          }
    RealtimeClientEventResponseCreate:
      required:
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `response.create`."
          enum:
          - response.create
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/RealtimeResponseCreateParams"
      description: "This event instructs the server to create a Response, which means\
        \ triggering \nmodel inference. When in Server VAD mode, the server will create\
        \ Responses \nautomatically.\n\nA Response will include at least one Item,\
        \ and may have two, in which case \nthe second will be a function call. These\
        \ Items will be appended to the \nconversation history.\n\nThe server will\
        \ respond with a `response.created` event, events for Items \nand content\
        \ created, and finally a `response.done` event to indicate the \nResponse\
        \ is complete.\n\nThe `response.create` event includes inference configuration\
        \ like \n`instructions`, and `temperature`. These fields will override the\
        \ Session's \nconfiguration for this Response only.\n"
      x-oaiMeta:
        name: response.create
        group: realtime
        example: |
          {
              "event_id": "event_234",
              "type": "response.create",
              "response": {
                  "modalities": ["text", "audio"],
                  "instructions": "Please assist the user.",
                  "voice": "sage",
                  "output_audio_format": "pcm16",
                  "tools": [
                      {
                          "type": "function",
                          "name": "calculate_sum",
                          "description": "Calculates the sum of two numbers.",
                          "parameters": {
                              "type": "object",
                              "properties": {
                                  "a": { "type": "number" },
                                  "b": { "type": "number" }
                              },
                              "required": ["a", "b"]
                          }
                      }
                  ],
                  "tool_choice": "auto",
                  "temperature": 0.8,
                  "max_output_tokens": 1024
              }
          }
    RealtimeClientEventSessionUpdate:
      required:
      - session
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `session.update`."
          enum:
          - session.update
          x-stainless-const: true
        session:
          $ref: "#/components/schemas/RealtimeSessionCreateRequest"
      description: |
        Send this event to update the sessionâ€™s default configuration.
        The client may send this event at any time to update any field,
        except for `voice`. However, note that once a session has been
        initialized with a particular `model`, it canâ€™t be changed to
        another model using `session.update`.

        When the server receives a `session.update`, it will respond
        with a `session.updated` event showing the full, effective configuration.
        Only the fields that are present are updated. To clear a field like
        `instructions`, pass an empty string.
      x-oaiMeta:
        name: session.update
        group: realtime
        example: |
          {
              "event_id": "event_123",
              "type": "session.update",
              "session": {
                  "modalities": ["text", "audio"],
                  "instructions": "You are a helpful assistant.",
                  "voice": "sage",
                  "input_audio_format": "pcm16",
                  "output_audio_format": "pcm16",
                  "input_audio_transcription": {
                      "model": "whisper-1"
                  },
                  "turn_detection": {
                      "type": "server_vad",
                      "threshold": 0.5,
                      "prefix_padding_ms": 300,
                      "silence_duration_ms": 500,
                      "create_response": true
                  },
                  "tools": [
                      {
                          "type": "function",
                          "name": "get_weather",
                          "description": "Get the current weather...",
                          "parameters": {
                              "type": "object",
                              "properties": {
                                  "location": { "type": "string" }
                              },
                              "required": ["location"]
                          }
                      }
                  ],
                  "tool_choice": "auto",
                  "temperature": 0.8,
                  "max_response_output_tokens": "inf"
              }
          }
    RealtimeClientEventTranscriptionSessionUpdate:
      required:
      - session
      - type
      type: object
      properties:
        event_id:
          type: string
          description: Optional client-generated ID used to identify this event.
        type:
          type: string
          description: "The event type, must be `transcription_session.update`."
          enum:
          - transcription_session.update
          x-stainless-const: true
        session:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateRequest"
      description: |
        Send this event to update a transcription session.
      x-oaiMeta:
        name: transcription_session.update
        group: realtime
        example: |
          {
            "type": "transcription_session.update",
            "session": {
              "input_audio_format": "pcm16",
              "input_audio_transcription": {
                "model": "gpt-4o-transcribe",
                "prompt": "",
                "language": ""
              },
              "turn_detection": {
                "type": "server_vad",
                "threshold": 0.5,
                "prefix_padding_ms": 300,
                "silence_duration_ms": 500,
                "create_response": true,
              },
              "input_audio_noise_reduction": {
                "type": "near_field"
              },
              "include": [
                "item.input_audio_transcription.logprobs",
              ]
            }
          }
    RealtimeConversationItem:
      type: object
      properties:
        id:
          type: string
          description: "The unique ID of the item, this can be generated by the client\
            \ to help \nmanage server-side context, but is not required because the\
            \ server will \ngenerate one if not provided.\n"
        type:
          type: string
          description: |
            The type of the item (`message`, `function_call`, `function_call_output`).
          enum:
          - message
          - function_call
          - function_call_output
        object:
          type: string
          description: |
            Identifier for the API object being returned - always `realtime.item`.
          enum:
          - realtime.item
          x-stainless-const: true
        status:
          type: string
          description: "The status of the item (`completed`, `incomplete`). These\
            \ have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
          enum:
          - completed
          - incomplete
        role:
          type: string
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
          enum:
          - user
          - assistant
          - system
        content:
          type: array
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            $ref: "#/components/schemas/RealtimeConversationItem_content"
        call_id:
          type: string
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
        name:
          type: string
          description: |
            The name of the function being called (for `function_call` items).
        arguments:
          type: string
          description: |
            The arguments of the function call (for `function_call` items).
        output:
          type: string
          description: |
            The output of the function call (for `function_call_output` items).
      description: The item to add to the conversation.
    RealtimeConversationItemWithReference:
      type: object
      properties:
        id:
          type: string
          description: |
            For an item of type (`message` | `function_call` | `function_call_output`)
            this field allows the client to assign the unique ID of the item. It is
            not required because the server will generate one if not provided.

            For an item of type `item_reference`, this field is required and is a
            reference to any item that has previously existed in the conversation.
        type:
          type: string
          description: |
            The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).
          enum:
          - message
          - function_call
          - function_call_output
        object:
          type: string
          description: |
            Identifier for the API object being returned - always `realtime.item`.
          enum:
          - realtime.item
          x-stainless-const: true
        status:
          type: string
          description: "The status of the item (`completed`, `incomplete`). These\
            \ have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
          enum:
          - completed
          - incomplete
        role:
          type: string
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
          enum:
          - user
          - assistant
          - system
        content:
          type: array
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            $ref: "#/components/schemas/RealtimeConversationItem_content"
        call_id:
          type: string
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
        name:
          type: string
          description: |
            The name of the function being called (for `function_call` items).
        arguments:
          type: string
          description: |
            The arguments of the function call (for `function_call` items).
        output:
          type: string
          description: |
            The output of the function call (for `function_call_output` items).
      description: The item to add to the conversation.
    RealtimeResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the response.
        object:
          type: string
          description: "The object type, must be `realtime.response`."
          enum:
          - realtime.response
          x-stainless-const: true
        status:
          type: string
          description: "The final status of the response (`completed`, `cancelled`,\
            \ `failed`, or \n`incomplete`).\n"
          enum:
          - completed
          - cancelled
          - failed
          - incomplete
        status_details:
          $ref: "#/components/schemas/RealtimeResponse_status_details"
        output:
          type: array
          description: The list of output items generated by the response.
          items:
            $ref: "#/components/schemas/RealtimeConversationItem"
        metadata:
          $ref: "#/components/schemas/Metadata"
        usage:
          $ref: "#/components/schemas/RealtimeResponse_usage"
        conversation_id:
          type: string
          description: |
            Which conversation the response is added to, determined by the `conversation`
            field in the `response.create` event. If `auto`, the response will be added to
            the default conversation and the value of `conversation_id` will be an id like
            `conv_1234`. If `none`, the response will not be added to any conversation and
            the value of `conversation_id` will be `null`. If responses are being triggered
            by server VAD, the response will be added to the default conversation, thus
            the `conversation_id` will be an id like `conv_1234`.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        modalities:
          type: array
          description: |
            The set of modalities the model used to respond. If there are multiple modalities,
            the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
            could be responding in either text or audio.
          items:
            type: string
            enum:
            - text
            - audio
        output_audio_format:
          type: string
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
        max_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls, that was used in this response.
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
      description: The response resource.
    RealtimeResponseCreateParams:
      type: object
      properties:
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        instructions:
          type: string
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        output_audio_format:
          type: string
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/RealtimeResponseCreateParams_tools"
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function, like `{\"type\": \"function\", \"function\"\
            : {\"name\": \"my_function\"}}`.\n"
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
        max_response_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
        conversation:
          description: "Controls which conversation the response is added to. Currently\
            \ supports\n`auto` and `none`, with `auto` as the default value. The `auto`\
            \ value\nmeans that the contents of the response will be added to the\
            \ default\nconversation. Set this to `none` to create an out-of-band response\
            \ which \nwill not add items to default conversation.\n"
          oneOf:
          - type: string
          - type: string
            default: auto
            enum:
            - auto
            - none
        metadata:
          $ref: "#/components/schemas/Metadata"
        input:
          type: array
          description: |
            Input items to include in the prompt for the model. Using this field
            creates a new context for this Response instead of using the default
            conversation. An empty array `[]` will clear the context for this Response.
            Note that this can include references to items from the default conversation.
          items:
            $ref: "#/components/schemas/RealtimeConversationItemWithReference"
      description: Create a new Realtime response with these parameters
    RealtimeServerEvent:
      description: |
        A realtime server event.
      discriminator:
        propertyName: type
      anyOf:
      - $ref: "#/components/schemas/RealtimeServerEventConversationCreated"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemCreated"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemDeleted"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionDelta"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemRetrieved"
      - $ref: "#/components/schemas/RealtimeServerEventConversationItemTruncated"
      - $ref: "#/components/schemas/RealtimeServerEventError"
      - $ref: "#/components/schemas/RealtimeServerEventInputAudioBufferCleared"
      - $ref: "#/components/schemas/RealtimeServerEventInputAudioBufferCommitted"
      - $ref: "#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted"
      - $ref: "#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped"
      - $ref: "#/components/schemas/RealtimeServerEventRateLimitsUpdated"
      - $ref: "#/components/schemas/RealtimeServerEventResponseAudioDelta"
      - $ref: "#/components/schemas/RealtimeServerEventResponseAudioDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta"
      - $ref: "#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseContentPartAdded"
      - $ref: "#/components/schemas/RealtimeServerEventResponseContentPartDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseCreated"
      - $ref: "#/components/schemas/RealtimeServerEventResponseDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta"
      - $ref: "#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseOutputItemAdded"
      - $ref: "#/components/schemas/RealtimeServerEventResponseOutputItemDone"
      - $ref: "#/components/schemas/RealtimeServerEventResponseTextDelta"
      - $ref: "#/components/schemas/RealtimeServerEventResponseTextDone"
      - $ref: "#/components/schemas/RealtimeServerEventSessionCreated"
      - $ref: "#/components/schemas/RealtimeServerEventSessionUpdated"
      - $ref: "#/components/schemas/RealtimeServerEventTranscriptionSessionUpdated"
      - $ref: "#/components/schemas/RealtimeServerEventOutputAudioBufferStarted"
      - $ref: "#/components/schemas/RealtimeServerEventOutputAudioBufferStopped"
      - $ref: "#/components/schemas/RealtimeServerEventOutputAudioBufferCleared"
    RealtimeServerEventConversationCreated:
      required:
      - conversation
      - event_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.created`."
          enum:
          - conversation.created
          x-stainless-const: true
        conversation:
          $ref: "#/components/schemas/RealtimeServerEventConversationCreated_conversation"
      description: |
        Returned when a conversation is created. Emitted right after session creation.
      x-oaiMeta:
        name: conversation.created
        group: realtime
        example: |
          {
              "event_id": "event_9101",
              "type": "conversation.created",
              "conversation": {
                  "id": "conv_001",
                  "object": "realtime.conversation"
              }
          }
    RealtimeServerEventConversationItemCreated:
      required:
      - event_id
      - item
      - previous_item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.item.created`."
          enum:
          - conversation.item.created
          x-stainless-const: true
        previous_item_id:
          type: string
          description: "The ID of the preceding item in the Conversation context,\
            \ allows the \nclient to understand the order of the conversation.\n"
        item:
          $ref: "#/components/schemas/RealtimeConversationItem"
      description: "Returned when a conversation item is created. There are several\
        \ scenarios that produce this event:\n  - The server is generating a Response,\
        \ which if successful will produce \n    either one or two Items, which will\
        \ be of type `message` \n    (role `assistant`) or type `function_call`.\n\
        \  - The input audio buffer has been committed, either by the client or the\
        \ \n    server (in `server_vad` mode). The server will take the content of\
        \ the \n    input audio buffer and add it to a new user message Item.\n  -\
        \ The client has sent a `conversation.item.create` event to add a new Item\
        \ \n    to the Conversation.\n"
      x-oaiMeta:
        name: conversation.item.created
        group: realtime
        example: |
          {
              "event_id": "event_1920",
              "type": "conversation.item.created",
              "previous_item_id": "msg_002",
              "item": {
                  "id": "msg_003",
                  "object": "realtime.item",
                  "type": "message",
                  "status": "completed",
                  "role": "user",
                  "content": []
              }
          }
    RealtimeServerEventConversationItemDeleted:
      required:
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.item.deleted`."
          enum:
          - conversation.item.deleted
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item that was deleted.
      description: "Returned when an item in the conversation is deleted by the client\
        \ with a \n`conversation.item.delete` event. This event is used to synchronize\
        \ the \nserver's understanding of the conversation history with the client's\
        \ view.\n"
      x-oaiMeta:
        name: conversation.item.deleted
        group: realtime
        example: |
          {
              "event_id": "event_2728",
              "type": "conversation.item.deleted",
              "item_id": "msg_005"
          }
    RealtimeServerEventConversationItemInputAudioTranscriptionCompleted:
      required:
      - content_index
      - event_id
      - item_id
      - transcript
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: |
            The event type, must be
            `conversation.item.input_audio_transcription.completed`.
          enum:
          - conversation.item.input_audio_transcription.completed
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the user message item containing the audio.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        transcript:
          type: string
          description: The transcribed text.
        logprobs:
          type: array
          description: The log probabilities of the transcription.
          nullable: true
          items:
            $ref: "#/components/schemas/LogProbProperties"
      description: "This event is the output of audio transcription for user audio\
        \ written to the \nuser audio buffer. Transcription begins when the input\
        \ audio buffer is \ncommitted by the client or server (in `server_vad` mode).\
        \ Transcription runs \nasynchronously with Response creation, so this event\
        \ may come before or after \nthe Response events.\n\nRealtime API models accept\
        \ audio natively, and thus input transcription is a \nseparate process run\
        \ on a separate ASR (Automatic Speech Recognition) model, \ncurrently always\
        \ `whisper-1`. Thus the transcript may diverge somewhat from \nthe model's\
        \ interpretation, and should be treated as a rough guide.\n"
      x-oaiMeta:
        name: conversation.item.input_audio_transcription.completed
        group: realtime
        example: |
          {
              "event_id": "event_2122",
              "type": "conversation.item.input_audio_transcription.completed",
              "item_id": "msg_003",
              "content_index": 0,
              "transcript": "Hello, how are you?"
          }
    RealtimeServerEventConversationItemInputAudioTranscriptionDelta:
      required:
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.item.input_audio_transcription.delta`."
          enum:
          - conversation.item.input_audio_transcription.delta
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The text delta.
        logprobs:
          type: array
          description: The log probabilities of the transcription.
          nullable: true
          items:
            $ref: "#/components/schemas/LogProbProperties"
      description: |
        Returned when the text value of an input audio transcription content part is updated.
      x-oaiMeta:
        name: conversation.item.input_audio_transcription.delta
        group: realtime
        example: |
          {
            "type": "conversation.item.input_audio_transcription.delta",
            "event_id": "event_001",
            "item_id": "item_001",
            "content_index": 0,
            "delta": "Hello"
          }
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed:
      required:
      - content_index
      - error
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: |
            The event type, must be
            `conversation.item.input_audio_transcription.failed`.
          enum:
          - conversation.item.input_audio_transcription.failed
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the user message item.
        content_index:
          type: integer
          description: The index of the content part containing the audio.
        error:
          $ref: "#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed_error"
      description: "Returned when input audio transcription is configured, and a transcription\
        \ \nrequest for a user message failed. These events are separate from other\
        \ \n`error` events so that the client can identify the related Item.\n"
      x-oaiMeta:
        name: conversation.item.input_audio_transcription.failed
        group: realtime
        example: |
          {
              "event_id": "event_2324",
              "type": "conversation.item.input_audio_transcription.failed",
              "item_id": "msg_003",
              "content_index": 0,
              "error": {
                  "type": "transcription_error",
                  "code": "audio_unintelligible",
                  "message": "The audio could not be transcribed.",
                  "param": null
              }
          }
    RealtimeServerEventConversationItemRetrieved:
      required:
      - event_id
      - item
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.item.retrieved`."
          enum:
          - conversation.item.retrieved
          x-stainless-const: true
        item:
          $ref: "#/components/schemas/RealtimeConversationItem"
      description: |
        Returned when a conversation item is retrieved with `conversation.item.retrieve`.
      x-oaiMeta:
        name: conversation.item.retrieved
        group: realtime
        example: |
          {
              "event_id": "event_1920",
              "type": "conversation.item.created",
              "previous_item_id": "msg_002",
              "item": {
                  "id": "msg_003",
                  "object": "realtime.item",
                  "type": "message",
                  "status": "completed",
                  "role": "user",
                  "content": [
                      {
                          "type": "input_audio",
                          "transcript": "hello how are you",
                          "audio": "base64encodedaudio=="
                      }
                  ]
              }
          }
    RealtimeServerEventConversationItemTruncated:
      required:
      - audio_end_ms
      - content_index
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `conversation.item.truncated`."
          enum:
          - conversation.item.truncated
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the assistant message item that was truncated.
        content_index:
          type: integer
          description: The index of the content part that was truncated.
        audio_end_ms:
          type: integer
          description: |
            The duration up to which the audio was truncated, in milliseconds.
      description: "Returned when an earlier assistant audio message item is truncated\
        \ by the \nclient with a `conversation.item.truncate` event. This event is\
        \ used to \nsynchronize the server's understanding of the audio with the client's\
        \ playback.\n\nThis action will truncate the audio and remove the server-side\
        \ text transcript \nto ensure there is no text in the context that hasn't\
        \ been heard by the user.\n"
      x-oaiMeta:
        name: conversation.item.truncated
        group: realtime
        example: |
          {
              "event_id": "event_2526",
              "type": "conversation.item.truncated",
              "item_id": "msg_004",
              "content_index": 0,
              "audio_end_ms": 1500
          }
    RealtimeServerEventError:
      required:
      - error
      - event_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `error`."
          enum:
          - error
          x-stainless-const: true
        error:
          $ref: "#/components/schemas/RealtimeServerEventError_error"
      description: "Returned when an error occurs, which could be a client problem\
        \ or a server \nproblem. Most errors are recoverable and the session will\
        \ stay open, we \nrecommend to implementors to monitor and log error messages\
        \ by default.\n"
      x-oaiMeta:
        name: error
        group: realtime
        example: |
          {
              "event_id": "event_890",
              "type": "error",
              "error": {
                  "type": "invalid_request_error",
                  "code": "invalid_event",
                  "message": "The 'type' field is missing.",
                  "param": null,
                  "event_id": "event_567"
              }
          }
    RealtimeServerEventInputAudioBufferCleared:
      required:
      - event_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.cleared`."
          enum:
          - input_audio_buffer.cleared
          x-stainless-const: true
      description: "Returned when the input audio buffer is cleared by the client\
        \ with a \n`input_audio_buffer.clear` event.\n"
      x-oaiMeta:
        name: input_audio_buffer.cleared
        group: realtime
        example: |
          {
              "event_id": "event_1314",
              "type": "input_audio_buffer.cleared"
          }
    RealtimeServerEventInputAudioBufferCommitted:
      required:
      - event_id
      - item_id
      - previous_item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.committed`."
          enum:
          - input_audio_buffer.committed
          x-stainless-const: true
        previous_item_id:
          type: string
          description: |
            The ID of the preceding item after which the new item will be inserted.
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      description: "Returned when an input audio buffer is committed, either by the\
        \ client or \nautomatically in server VAD mode. The `item_id` property is\
        \ the ID of the user\nmessage item that will be created, thus a `conversation.item.created`\
        \ event \nwill also be sent to the client.\n"
      x-oaiMeta:
        name: input_audio_buffer.committed
        group: realtime
        example: |
          {
              "event_id": "event_1121",
              "type": "input_audio_buffer.committed",
              "previous_item_id": "msg_001",
              "item_id": "msg_002"
          }
    RealtimeServerEventInputAudioBufferSpeechStarted:
      required:
      - audio_start_ms
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.speech_started`."
          enum:
          - input_audio_buffer.speech_started
          x-stainless-const: true
        audio_start_ms:
          type: integer
          description: "Milliseconds from the start of all audio written to the buffer\
            \ during the \nsession when speech was first detected. This will correspond\
            \ to the \nbeginning of audio sent to the model, and thus includes the\
            \ \n`prefix_padding_ms` configured in the Session.\n"
        item_id:
          type: string
          description: |
            The ID of the user message item that will be created when speech stops.
      description: "Sent by the server when in `server_vad` mode to indicate that\
        \ speech has been \ndetected in the audio buffer. This can happen any time\
        \ audio is added to the \nbuffer (unless speech is already detected). The\
        \ client may want to use this \nevent to interrupt audio playback or provide\
        \ visual feedback to the user. \n\nThe client should expect to receive a `input_audio_buffer.speech_stopped`\
        \ event \nwhen speech stops. The `item_id` property is the ID of the user\
        \ message item \nthat will be created when speech stops and will also be included\
        \ in the \n`input_audio_buffer.speech_stopped` event (unless the client manually\
        \ commits \nthe audio buffer during VAD activation).\n"
      x-oaiMeta:
        name: input_audio_buffer.speech_started
        group: realtime
        example: |
          {
              "event_id": "event_1516",
              "type": "input_audio_buffer.speech_started",
              "audio_start_ms": 1000,
              "item_id": "msg_003"
          }
    RealtimeServerEventInputAudioBufferSpeechStopped:
      required:
      - audio_end_ms
      - event_id
      - item_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `input_audio_buffer.speech_stopped`."
          enum:
          - input_audio_buffer.speech_stopped
          x-stainless-const: true
        audio_end_ms:
          type: integer
          description: "Milliseconds since the session started when speech stopped.\
            \ This will \ncorrespond to the end of audio sent to the model, and thus\
            \ includes the \n`min_silence_duration_ms` configured in the Session.\n"
        item_id:
          type: string
          description: The ID of the user message item that will be created.
      description: "Returned in `server_vad` mode when the server detects the end\
        \ of speech in \nthe audio buffer. The server will also send an `conversation.item.created`\
        \ \nevent with the user message item that is created from the audio buffer.\n"
      x-oaiMeta:
        name: input_audio_buffer.speech_stopped
        group: realtime
        example: |
          {
              "event_id": "event_1718",
              "type": "input_audio_buffer.speech_stopped",
              "audio_end_ms": 2000,
              "item_id": "msg_003"
          }
    RealtimeServerEventOutputAudioBufferCleared:
      required:
      - event_id
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `output_audio_buffer.cleared`."
          enum:
          - output_audio_buffer.cleared
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      description: |
        **WebRTC Only:** Emitted when the output audio buffer is cleared. This happens either in VAD
        mode when the user has interrupted (`input_audio_buffer.speech_started`),
        or when the client has emitted the `output_audio_buffer.clear` event to manually
        cut off the current audio response.
        [Learn more](/docs/guides/realtime-model-capabilities#client-and-server-events-for-audio-in-webrtc).
      x-oaiMeta:
        name: output_audio_buffer.cleared
        group: realtime
        example: |
          {
              "event_id": "event_abc123",
              "type": "output_audio_buffer.cleared",
              "response_id": "resp_abc123"
          }
    RealtimeServerEventOutputAudioBufferStarted:
      required:
      - event_id
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `output_audio_buffer.started`."
          enum:
          - output_audio_buffer.started
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      description: |
        **WebRTC Only:** Emitted when the server begins streaming audio to the client. This event is
        emitted after an audio content part has been added (`response.content_part.added`)
        to the response.
        [Learn more](/docs/guides/realtime-model-capabilities#client-and-server-events-for-audio-in-webrtc).
      x-oaiMeta:
        name: output_audio_buffer.started
        group: realtime
        example: |
          {
              "event_id": "event_abc123",
              "type": "output_audio_buffer.started",
              "response_id": "resp_abc123"
          }
    RealtimeServerEventOutputAudioBufferStopped:
      required:
      - event_id
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `output_audio_buffer.stopped`."
          enum:
          - output_audio_buffer.stopped
          x-stainless-const: true
        response_id:
          type: string
          description: The unique ID of the response that produced the audio.
      description: |
        **WebRTC Only:** Emitted when the output audio buffer has been completely drained on the server,
        and no more audio is forthcoming. This event is emitted after the full response
        data has been sent to the client (`response.done`).
        [Learn more](/docs/guides/realtime-model-capabilities#client-and-server-events-for-audio-in-webrtc).
      x-oaiMeta:
        name: output_audio_buffer.stopped
        group: realtime
        example: |
          {
              "event_id": "event_abc123",
              "type": "output_audio_buffer.stopped",
              "response_id": "resp_abc123"
          }
    RealtimeServerEventRateLimitsUpdated:
      required:
      - event_id
      - rate_limits
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `rate_limits.updated`."
          enum:
          - rate_limits.updated
          x-stainless-const: true
        rate_limits:
          type: array
          description: List of rate limit information.
          items:
            $ref: "#/components/schemas/RealtimeServerEventRateLimitsUpdated_rate_limits"
      description: "Emitted at the beginning of a Response to indicate the updated\
        \ rate limits. \nWhen a Response is created some tokens will be \"reserved\"\
        \ for the output \ntokens, the rate limits shown here reflect that reservation,\
        \ which is then \nadjusted accordingly once the Response is completed.\n"
      x-oaiMeta:
        name: rate_limits.updated
        group: realtime
        example: |
          {
              "event_id": "event_5758",
              "type": "rate_limits.updated",
              "rate_limits": [
                  {
                      "name": "requests",
                      "limit": 1000,
                      "remaining": 999,
                      "reset_seconds": 60
                  },
                  {
                      "name": "tokens",
                      "limit": 50000,
                      "remaining": 49950,
                      "reset_seconds": 60
                  }
              ]
          }
    RealtimeServerEventResponseAudioDelta:
      required:
      - content_index
      - delta
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.audio.delta`."
          enum:
          - response.audio.delta
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: Base64-encoded audio data delta.
      description: Returned when the model-generated audio is updated.
      x-oaiMeta:
        name: response.audio.delta
        group: realtime
        example: |
          {
              "event_id": "event_4950",
              "type": "response.audio.delta",
              "response_id": "resp_001",
              "item_id": "msg_008",
              "output_index": 0,
              "content_index": 0,
              "delta": "Base64EncodedAudioDelta"
          }
    RealtimeServerEventResponseAudioDone:
      required:
      - content_index
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.audio.done`."
          enum:
          - response.audio.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
      description: |
        Returned when the model-generated audio is done. Also emitted when a Response
        is interrupted, incomplete, or cancelled.
      x-oaiMeta:
        name: response.audio.done
        group: realtime
        example: |
          {
              "event_id": "event_5152",
              "type": "response.audio.done",
              "response_id": "resp_001",
              "item_id": "msg_008",
              "output_index": 0,
              "content_index": 0
          }
    RealtimeServerEventResponseAudioTranscriptDelta:
      required:
      - content_index
      - delta
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.audio_transcript.delta`."
          enum:
          - response.audio_transcript.delta
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The transcript delta.
      description: |
        Returned when the model-generated transcription of audio output is updated.
      x-oaiMeta:
        name: response.audio_transcript.delta
        group: realtime
        example: |
          {
              "event_id": "event_4546",
              "type": "response.audio_transcript.delta",
              "response_id": "resp_001",
              "item_id": "msg_008",
              "output_index": 0,
              "content_index": 0,
              "delta": "Hello, how can I a"
          }
    RealtimeServerEventResponseAudioTranscriptDone:
      required:
      - content_index
      - event_id
      - item_id
      - output_index
      - response_id
      - transcript
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.audio_transcript.done`."
          enum:
          - response.audio_transcript.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        transcript:
          type: string
          description: The final transcript of the audio.
      description: |
        Returned when the model-generated transcription of audio output is done
        streaming. Also emitted when a Response is interrupted, incomplete, or
        cancelled.
      x-oaiMeta:
        name: response.audio_transcript.done
        group: realtime
        example: |
          {
              "event_id": "event_4748",
              "type": "response.audio_transcript.done",
              "response_id": "resp_001",
              "item_id": "msg_008",
              "output_index": 0,
              "content_index": 0,
              "transcript": "Hello, how can I assist you today?"
          }
    RealtimeServerEventResponseContentPartAdded:
      required:
      - content_index
      - event_id
      - item_id
      - output_index
      - part
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.content_part.added`."
          enum:
          - response.content_part.added
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item to which the content part was added.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          $ref: "#/components/schemas/RealtimeServerEventResponseContentPartAdded_part"
      description: |
        Returned when a new content part is added to an assistant message item during
        response generation.
      x-oaiMeta:
        name: response.content_part.added
        group: realtime
        example: |
          {
              "event_id": "event_3738",
              "type": "response.content_part.added",
              "response_id": "resp_001",
              "item_id": "msg_007",
              "output_index": 0,
              "content_index": 0,
              "part": {
                  "type": "text",
                  "text": ""
              }
          }
    RealtimeServerEventResponseContentPartDone:
      required:
      - content_index
      - event_id
      - item_id
      - output_index
      - part
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.content_part.done`."
          enum:
          - response.content_part.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        part:
          $ref: "#/components/schemas/RealtimeServerEventResponseContentPartDone_part"
      description: |
        Returned when a content part is done streaming in an assistant message item.
        Also emitted when a Response is interrupted, incomplete, or cancelled.
      x-oaiMeta:
        name: response.content_part.done
        group: realtime
        example: |
          {
              "event_id": "event_3940",
              "type": "response.content_part.done",
              "response_id": "resp_001",
              "item_id": "msg_007",
              "output_index": 0,
              "content_index": 0,
              "part": {
                  "type": "text",
                  "text": "Sure, I can help with that."
              }
          }
    RealtimeServerEventResponseCreated:
      required:
      - event_id
      - response
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.created`."
          enum:
          - response.created
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/RealtimeResponse"
      description: |
        Returned when a new Response is created. The first event of response creation,
        where the response is in an initial state of `in_progress`.
      x-oaiMeta:
        name: response.created
        group: realtime
        example: |
          {
              "event_id": "event_2930",
              "type": "response.created",
              "response": {
                  "id": "resp_001",
                  "object": "realtime.response",
                  "status": "in_progress",
                  "status_details": null,
                  "output": [],
                  "usage": null
              }
          }
    RealtimeServerEventResponseDone:
      required:
      - event_id
      - response
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.done`."
          enum:
          - response.done
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/RealtimeResponse"
      description: "Returned when a Response is done streaming. Always emitted, no\
        \ matter the \nfinal state. The Response object included in the `response.done`\
        \ event will \ninclude all output Items in the Response but will omit the\
        \ raw audio data.\n"
      x-oaiMeta:
        name: response.done
        group: realtime
        example: |
          {
              "event_id": "event_3132",
              "type": "response.done",
              "response": {
                  "id": "resp_001",
                  "object": "realtime.response",
                  "status": "completed",
                  "status_details": null,
                  "output": [
                      {
                          "id": "msg_006",
                          "object": "realtime.item",
                          "type": "message",
                          "status": "completed",
                          "role": "assistant",
                          "content": [
                              {
                                  "type": "text",
                                  "text": "Sure, how can I assist you today?"
                              }
                          ]
                      }
                  ],
                  "usage": {
                      "total_tokens":275,
                      "input_tokens":127,
                      "output_tokens":148,
                      "input_token_details": {
                          "cached_tokens":384,
                          "text_tokens":119,
                          "audio_tokens":8,
                          "cached_tokens_details": {
                              "text_tokens": 128,
                              "audio_tokens": 256
                          }
                      },
                      "output_token_details": {
                        "text_tokens":36,
                        "audio_tokens":112
                      }
                  }
              }
          }
    RealtimeServerEventResponseFunctionCallArgumentsDelta:
      required:
      - call_id
      - delta
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: |
            The event type, must be `response.function_call_arguments.delta`.
          enum:
          - response.function_call_arguments.delta
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        delta:
          type: string
          description: The arguments delta as a JSON string.
      description: |
        Returned when the model-generated function call arguments are updated.
      x-oaiMeta:
        name: response.function_call_arguments.delta
        group: realtime
        example: |
          {
              "event_id": "event_5354",
              "type": "response.function_call_arguments.delta",
              "response_id": "resp_002",
              "item_id": "fc_001",
              "output_index": 0,
              "call_id": "call_001",
              "delta": "{\"location\": \"San\""
          }
    RealtimeServerEventResponseFunctionCallArgumentsDone:
      required:
      - arguments
      - call_id
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: |
            The event type, must be `response.function_call_arguments.done`.
          enum:
          - response.function_call_arguments.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the function call item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        call_id:
          type: string
          description: The ID of the function call.
        arguments:
          type: string
          description: The final arguments as a JSON string.
      description: |
        Returned when the model-generated function call arguments are done streaming.
        Also emitted when a Response is interrupted, incomplete, or cancelled.
      x-oaiMeta:
        name: response.function_call_arguments.done
        group: realtime
        example: |
          {
              "event_id": "event_5556",
              "type": "response.function_call_arguments.done",
              "response_id": "resp_002",
              "item_id": "fc_001",
              "output_index": 0,
              "call_id": "call_001",
              "arguments": "{\"location\": \"San Francisco\"}"
          }
    RealtimeServerEventResponseOutputItemAdded:
      required:
      - event_id
      - item
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.output_item.added`."
          enum:
          - response.output_item.added
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: "#/components/schemas/RealtimeConversationItem"
      description: Returned when a new Item is created during Response generation.
      x-oaiMeta:
        name: response.output_item.added
        group: realtime
        example: |
          {
              "event_id": "event_3334",
              "type": "response.output_item.added",
              "response_id": "resp_001",
              "output_index": 0,
              "item": {
                  "id": "msg_007",
                  "object": "realtime.item",
                  "type": "message",
                  "status": "in_progress",
                  "role": "assistant",
                  "content": []
              }
          }
    RealtimeServerEventResponseOutputItemDone:
      required:
      - event_id
      - item
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.output_item.done`."
          enum:
          - response.output_item.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the Response to which the item belongs.
        output_index:
          type: integer
          description: The index of the output item in the Response.
        item:
          $ref: "#/components/schemas/RealtimeConversationItem"
      description: "Returned when an Item is done streaming. Also emitted when a Response\
        \ is \ninterrupted, incomplete, or cancelled.\n"
      x-oaiMeta:
        name: response.output_item.done
        group: realtime
        example: |
          {
              "event_id": "event_3536",
              "type": "response.output_item.done",
              "response_id": "resp_001",
              "output_index": 0,
              "item": {
                  "id": "msg_007",
                  "object": "realtime.item",
                  "type": "message",
                  "status": "completed",
                  "role": "assistant",
                  "content": [
                      {
                          "type": "text",
                          "text": "Sure, I can help with that."
                      }
                  ]
              }
          }
    RealtimeServerEventResponseTextDelta:
      required:
      - content_index
      - delta
      - event_id
      - item_id
      - output_index
      - response_id
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.text.delta`."
          enum:
          - response.text.delta
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        delta:
          type: string
          description: The text delta.
      description: Returned when the text value of a "text" content part is updated.
      x-oaiMeta:
        name: response.text.delta
        group: realtime
        example: |
          {
              "event_id": "event_4142",
              "type": "response.text.delta",
              "response_id": "resp_001",
              "item_id": "msg_007",
              "output_index": 0,
              "content_index": 0,
              "delta": "Sure, I can h"
          }
    RealtimeServerEventResponseTextDone:
      required:
      - content_index
      - event_id
      - item_id
      - output_index
      - response_id
      - text
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `response.text.done`."
          enum:
          - response.text.done
          x-stainless-const: true
        response_id:
          type: string
          description: The ID of the response.
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item in the response.
        content_index:
          type: integer
          description: The index of the content part in the item's content array.
        text:
          type: string
          description: The final text content.
      description: |
        Returned when the text value of a "text" content part is done streaming. Also
        emitted when a Response is interrupted, incomplete, or cancelled.
      x-oaiMeta:
        name: response.text.done
        group: realtime
        example: |
          {
              "event_id": "event_4344",
              "type": "response.text.done",
              "response_id": "resp_001",
              "item_id": "msg_007",
              "output_index": 0,
              "content_index": 0,
              "text": "Sure, I can help with that."
          }
    RealtimeServerEventSessionCreated:
      required:
      - event_id
      - session
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `session.created`."
          enum:
          - session.created
          x-stainless-const: true
        session:
          $ref: "#/components/schemas/RealtimeSession"
      description: "Returned when a Session is created. Emitted automatically when\
        \ a new \nconnection is established as the first server event. This event\
        \ will contain \nthe default Session configuration.\n"
      x-oaiMeta:
        name: session.created
        group: realtime
        example: |
          {
              "event_id": "event_1234",
              "type": "session.created",
              "session": {
                  "id": "sess_001",
                  "object": "realtime.session",
                  "model": "gpt-4o-realtime-preview",
                  "modalities": ["text", "audio"],
                  "instructions": "...model instructions here...",
                  "voice": "sage",
                  "input_audio_format": "pcm16",
                  "output_audio_format": "pcm16",
                  "input_audio_transcription": null,
                  "turn_detection": {
                      "type": "server_vad",
                      "threshold": 0.5,
                      "prefix_padding_ms": 300,
                      "silence_duration_ms": 200
                  },
                  "tools": [],
                  "tool_choice": "auto",
                  "temperature": 0.8,
                  "max_response_output_tokens": "inf"
              }
          }
    RealtimeServerEventSessionUpdated:
      required:
      - event_id
      - session
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `session.updated`."
          enum:
          - session.updated
          x-stainless-const: true
        session:
          $ref: "#/components/schemas/RealtimeSession"
      description: "Returned when a session is updated with a `session.update` event,\
        \ unless \nthere is an error.\n"
      x-oaiMeta:
        name: session.updated
        group: realtime
        example: |
          {
              "event_id": "event_5678",
              "type": "session.updated",
              "session": {
                  "id": "sess_001",
                  "object": "realtime.session",
                  "model": "gpt-4o-realtime-preview",
                  "modalities": ["text"],
                  "instructions": "New instructions",
                  "voice": "sage",
                  "input_audio_format": "pcm16",
                  "output_audio_format": "pcm16",
                  "input_audio_transcription": {
                      "model": "whisper-1"
                  },
                  "turn_detection": null,
                  "tools": [],
                  "tool_choice": "none",
                  "temperature": 0.7,
                  "max_response_output_tokens": 200
              }
          }
    RealtimeServerEventTranscriptionSessionUpdated:
      required:
      - event_id
      - session
      - type
      type: object
      properties:
        event_id:
          type: string
          description: The unique ID of the server event.
        type:
          type: string
          description: "The event type, must be `transcription_session.updated`."
          enum:
          - transcription_session.updated
          x-stainless-const: true
        session:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateResponse"
      description: "Returned when a transcription session is updated with a `transcription_session.update`\
        \ event, unless \nthere is an error.\n"
      x-oaiMeta:
        name: transcription_session.updated
        group: realtime
        example: |
          {
            "event_id": "event_5678",
            "type": "transcription_session.updated",
            "session": {
              "id": "sess_001",
              "object": "realtime.transcription_session",
              "input_audio_format": "pcm16",
              "input_audio_transcription": {
                "model": "gpt-4o-transcribe",
                "prompt": "",
                "language": ""
              },
              "turn_detection": {
                "type": "server_vad",
                "threshold": 0.5,
                "prefix_padding_ms": 300,
                "silence_duration_ms": 500,
                "create_response": true,
                // "interrupt_response": false  -- this will NOT be returned
              },
              "input_audio_noise_reduction": {
                "type": "near_field"
              },
              "include": [
                "item.input_audio_transcription.avg_logprob",
              ],
            }
          }
    RealtimeSession:
      type: object
      properties:
        id:
          type: string
          description: |
            Unique identifier for the session that looks like `sess_1234567890abcdef`.
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        model:
          type: string
          description: |
            The Realtime model used for this session.
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
        instructions:
          type: string
          description: |
            The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. "be extremely succinct", "act friendly", "here are examples of good  responses") and on audio behavior (e.g. "talk quickly", "inject emotion  into your voice", "laugh frequently"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the desired behavior.

            Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        input_audio_format:
          type: string
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`,\
            \ or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz\
            \ sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        output_audio_format:
          type: string
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            For `pcm16`, output audio is sampled at a rate of 24kHz.
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        input_audio_transcription:
          $ref: "#/components/schemas/RealtimeSession_input_audio_transcription"
        turn_detection:
          $ref: "#/components/schemas/RealtimeSession_turn_detection"
        input_audio_noise_reduction:
          $ref: "#/components/schemas/RealtimeSession_input_audio_noise_reduction"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/RealtimeResponseCreateParams_tools"
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
          default: auto
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
          default: 0.8
        max_response_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
      description: Realtime session object configuration.
    RealtimeSessionCreateRequest:
      type: object
      properties:
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        model:
          type: string
          description: |
            The Realtime model used for this session.
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
        instructions:
          type: string
          description: |
            The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. "be extremely succinct", "act friendly", "here are examples of good  responses") and on audio behavior (e.g. "talk quickly", "inject emotion  into your voice", "laugh frequently"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the desired behavior.

            Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        input_audio_format:
          type: string
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`,\
            \ or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz\
            \ sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        output_audio_format:
          type: string
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
            For `pcm16`, output audio is sampled at a rate of 24kHz.
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        input_audio_transcription:
          $ref: "#/components/schemas/RealtimeSession_input_audio_transcription"
        turn_detection:
          $ref: "#/components/schemas/RealtimeSession_turn_detection"
        input_audio_noise_reduction:
          $ref: "#/components/schemas/RealtimeSession_input_audio_noise_reduction"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/RealtimeResponseCreateParams_tools"
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
          default: auto
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
          default: 0.8
        max_response_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
      description: Realtime session object configuration.
    RealtimeSessionCreateResponse:
      required:
      - client_secret
      type: object
      properties:
        client_secret:
          $ref: "#/components/schemas/RealtimeSessionCreateResponse_client_secret"
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        instructions:
          type: string
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        input_audio_format:
          type: string
          description: |
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        output_audio_format:
          type: string
          description: |
            The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        input_audio_transcription:
          $ref: "#/components/schemas/RealtimeSessionCreateResponse_input_audio_transcription"
        turn_detection:
          $ref: "#/components/schemas/RealtimeSessionCreateResponse_turn_detection"
        tools:
          type: array
          description: Tools (functions) available to the model.
          items:
            $ref: "#/components/schemas/RealtimeResponseCreateParams_tools"
        tool_choice:
          type: string
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
        temperature:
          type: number
          description: |
            Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
        max_response_output_tokens:
          description: |
            Maximum number of output tokens for a single assistant response,
            inclusive of tool calls. Provide an integer between 1 and 4096 to
            limit output tokens, or `inf` for the maximum available tokens for a
            given model. Defaults to `inf`.
          oneOf:
          - type: integer
          - type: string
            enum:
            - inf
            x-stainless-const: true
      description: |
        A new Realtime session configuration, with an ephermeral key. Default TTL
        for keys is one minute.
      x-oaiMeta:
        name: The session object
        group: realtime
        example: "{\n  \"id\": \"sess_001\",\n  \"object\": \"realtime.session\",\n\
          \  \"model\": \"gpt-4o-realtime-preview\",\n  \"modalities\": [\"audio\"\
          , \"text\"],\n  \"instructions\": \"You are a friendly assistant.\",\n \
          \ \"voice\": \"alloy\",\n  \"input_audio_format\": \"pcm16\",\n  \"output_audio_format\"\
          : \"pcm16\",\n  \"input_audio_transcription\": {\n      \"model\": \"whisper-1\"\
          \n  },\n  \"turn_detection\": null,\n  \"tools\": [],\n  \"tool_choice\"\
          : \"none\",\n  \"temperature\": 0.7,\n  \"max_response_output_tokens\":\
          \ 200,\n  \"client_secret\": {\n    \"value\": \"ek_abc123\", \n    \"expires_at\"\
          : 1234567890\n  }\n}\n"
    RealtimeTranscriptionSessionCreateRequest:
      type: object
      properties:
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        input_audio_format:
          type: string
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`,\
            \ or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz\
            \ sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          default: pcm16
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
        input_audio_transcription:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateRequest_input_audio_transcription"
        turn_detection:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateRequest_turn_detection"
        input_audio_noise_reduction:
          $ref: "#/components/schemas/RealtimeSession_input_audio_noise_reduction"
        include:
          type: array
          description: |
            The set of items to include in the transcription. Current available items are:
            - `item.input_audio_transcription.logprobs`
          items:
            type: string
      description: Realtime transcription session object configuration.
    RealtimeTranscriptionSessionCreateResponse:
      required:
      - client_secret
      type: object
      properties:
        client_secret:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateResponse_client_secret"
        modalities:
          type: array
          description: |
            The set of modalities the model can respond with. To disable audio,
            set this to ["text"].
          items:
            type: string
            enum:
            - text
            - audio
        input_audio_format:
          type: string
          description: |
            The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
        input_audio_transcription:
          $ref: "#/components/schemas/RealtimeTranscriptionSessionCreateResponse_input_audio_transcription"
        turn_detection:
          $ref: "#/components/schemas/RealtimeSessionCreateResponse_turn_detection"
      description: "A new Realtime transcription session configuration.\n\nWhen a\
        \ session is created on the server via REST API, the session object\nalso\
        \ contains an ephemeral key. Default TTL for keys is one minute. This \nproperty\
        \ is not present when a session is updated via the WebSocket API.\n"
      x-oaiMeta:
        name: The transcription session object
        group: realtime
        example: |
          {
            "id": "sess_BBwZc7cFV3XizEyKGDCGL",
            "object": "realtime.transcription_session",
            "expires_at": 1742188264,
            "modalities": ["audio", "text"],
            "turn_detection": {
              "type": "server_vad",
              "threshold": 0.5,
              "prefix_padding_ms": 300,
              "silence_duration_ms": 200
            },
            "input_audio_format": "pcm16",
            "input_audio_transcription": {
              "model": "gpt-4o-transcribe",
              "language": null,
              "prompt": ""
            },
            "client_secret": null
          }
    Reasoning:
      title: Reasoning
      type: object
      properties:
        effort:
          $ref: "#/components/schemas/ReasoningEffort"
        summary:
          type: string
          description: |
            A summary of the reasoning performed by the model. This can be
            useful for debugging and understanding the model's reasoning process.
            One of `auto`, `concise`, or `detailed`.
          nullable: true
          enum:
          - auto
          - concise
          - detailed
        generate_summary:
          type: string
          description: |
            **Deprecated:** use `summary` instead.

            A summary of the reasoning performed by the model. This can be
            useful for debugging and understanding the model's reasoning process.
            One of `auto`, `concise`, or `detailed`.
          nullable: true
          deprecated: true
          enum:
          - auto
          - concise
          - detailed
      description: "**o-series models only**\n\nConfiguration options for \n[reasoning\
        \ models](https://platform.openai.com/docs/guides/reasoning).\n"
    ReasoningEffort:
      type: string
      description: "**o-series models only** \n\nConstrains effort on reasoning for\
        \ \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\
        Currently supported values are `low`, `medium`, and `high`. Reducing\nreasoning\
        \ effort can result in faster responses and fewer tokens used\non reasoning\
        \ in a response.\n"
      nullable: true
      default: medium
      enum:
      - low
      - medium
      - high
    ReasoningItem:
      title: Reasoning
      required:
      - id
      - summary
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the object. Always `reasoning`.
          enum:
          - reasoning
          x-stainless-const: true
        id:
          type: string
          description: |
            The unique identifier of the reasoning content.
        summary:
          type: array
          description: |
            Reasoning text contents.
          items:
            $ref: "#/components/schemas/ReasoningItem_summary"
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
      description: |
        A description of the chain of thought used by a reasoning model while generating
        a response.
    Response:
      allOf:
      - $ref: "#/components/schemas/ModelResponseProperties"
      - $ref: "#/components/schemas/ResponseProperties"
      - required:
        - created_at
        - error
        - id
        - incomplete_details
        - instructions
        - metadata
        - model
        - object
        - output
        - parallel_tool_calls
        - temperature
        - tool_choice
        - tools
        - top_p
        type: object
        properties:
          id:
            type: string
            description: |
              Unique identifier for this Response.
          object:
            type: string
            description: |
              The object type of this resource - always set to `response`.
            enum:
            - response
            x-stainless-const: true
          status:
            type: string
            description: "The status of the response generation. One of `completed`,\
              \ `failed`, \n`in_progress`, or `incomplete`.\n"
            enum:
            - completed
            - failed
            - in_progress
            - incomplete
          created_at:
            type: number
            description: |
              Unix timestamp (in seconds) of when this Response was created.
          error:
            $ref: "#/components/schemas/ResponseError"
          incomplete_details:
            $ref: "#/components/schemas/Response_incomplete_details"
          output:
            type: array
            description: "An array of content items generated by the model.\n\n- The\
              \ length and order of items in the `output` array is dependent\n  on\
              \ the model's response.\n- Rather than accessing the first item in the\
              \ `output` array and \n  assuming it's an `assistant` message with the\
              \ content generated by\n  the model, you might consider using the `output_text`\
              \ property where\n  supported in SDKs.\n"
            items:
              $ref: "#/components/schemas/OutputItem"
          output_text:
            type: string
            description: "SDK-only convenience property that contains the aggregated\
              \ text output \nfrom all `output_text` items in the `output` array,\
              \ if any are present. \nSupported in the Python and JavaScript SDKs.\n"
            nullable: true
            x-oaiSupportedSDKs:
            - python
            - javascript
          usage:
            $ref: "#/components/schemas/ResponseUsage"
          parallel_tool_calls:
            type: boolean
            description: |
              Whether to allow the model to run tool calls in parallel.
            default: true
        x-oaiMeta:
          name: The response object
          group: responses
          example: |
            {
              "id": "resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41",
              "object": "response",
              "created_at": 1741476777,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [
                {
                  "type": "message",
                  "id": "msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41",
                  "status": "completed",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1.0,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1.0,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 328,
                "input_tokens_details": {
                  "cached_tokens": 0
                },
                "output_tokens": 52,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 380
              },
              "user": null,
              "metadata": {}
            }
    ResponseAudioDeltaEvent:
      required:
      - delta
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.delta`.
          enum:
          - response.audio.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            A chunk of Base64 encoded response audio bytes.
      description: Emitted when there is a partial audio response.
      x-oaiMeta:
        name: response.audio.delta
        group: responses
        example: |
          {
            "type": "response.audio.delta",
            "response_id": "resp_123",
            "delta": "base64encoded..."
          }
    ResponseAudioDoneEvent:
      required:
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.done`.
          enum:
          - response.audio.done
          x-stainless-const: true
      description: Emitted when the audio response is complete.
      x-oaiMeta:
        name: response.audio.done
        group: responses
        example: |
          {
            "type": "response.audio.done",
            "response_id": "resp-123"
          }
    ResponseAudioTranscriptDeltaEvent:
      required:
      - delta
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.delta`.
          enum:
          - response.audio.transcript.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            The partial transcript of the audio response.
      description: Emitted when there is a partial transcript of audio.
      x-oaiMeta:
        name: response.audio.transcript.delta
        group: responses
        example: |
          {
            "type": "response.audio.transcript.delta",
            "response_id": "resp_123",
            "delta": " ... partial transcript ... "
          }
    ResponseAudioTranscriptDoneEvent:
      required:
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.audio.transcript.done`.
          enum:
          - response.audio.transcript.done
          x-stainless-const: true
      description: Emitted when the full audio transcript is completed.
      x-oaiMeta:
        name: response.audio.transcript.done
        group: responses
        example: |
          {
            "type": "response.audio.transcript.done",
            "response_id": "resp_123"
          }
    ResponseCodeInterpreterCallCodeDeltaEvent:
      required:
      - delta
      - output_index
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.code_interpreter_call.code.delta`.
          enum:
          - response.code_interpreter_call.code.delta
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the code interpreter call is in progress.
        delta:
          type: string
          description: |
            The partial code snippet added by the code interpreter.
      description: Emitted when a partial code snippet is added by the code interpreter.
      x-oaiMeta:
        name: response.code_interpreter_call.code.delta
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.delta",
            "response_id": "resp-123",
            "output_index": 0,
            "delta": "partial code"
          }
    ResponseCodeInterpreterCallCodeDoneEvent:
      required:
      - code
      - output_index
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.code_interpreter_call.code.done`.
          enum:
          - response.code_interpreter_call.code.done
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the code interpreter call is in progress.
        code:
          type: string
          description: |
            The final code snippet output by the code interpreter.
      description: Emitted when code snippet output is finalized by the code interpreter.
      x-oaiMeta:
        name: response.code_interpreter_call.code.done
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.code.done",
            "response_id": "resp-123",
            "output_index": 3,
            "code": "console.log('done');"
          }
    ResponseCodeInterpreterCallCompletedEvent:
      required:
      - code_interpreter_call
      - output_index
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.code_interpreter_call.completed`.
          enum:
          - response.code_interpreter_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the code interpreter call is in progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      description: Emitted when the code interpreter call is completed.
      x-oaiMeta:
        name: response.code_interpreter_call.completed
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.completed",
            "response_id": "resp-123",
            "output_index": 5,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInProgressEvent:
      required:
      - code_interpreter_call
      - output_index
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.code_interpreter_call.in_progress`.
          enum:
          - response.code_interpreter_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the code interpreter call is in progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      description: Emitted when a code interpreter call is in progress.
      x-oaiMeta:
        name: response.code_interpreter_call.in_progress
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.in.progress",
            "response_id": "resp-123",
            "output_index": 0,
            "code_interpreter_call": {}
          }
    ResponseCodeInterpreterCallInterpretingEvent:
      required:
      - code_interpreter_call
      - output_index
      - response_id
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.code_interpreter_call.interpreting`.
          enum:
          - response.code_interpreter_call.interpreting
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the code interpreter call is in progress.
        code_interpreter_call:
          $ref: "#/components/schemas/CodeInterpreterToolCall"
      description: Emitted when the code interpreter is actively interpreting the
        code snippet.
      x-oaiMeta:
        name: response.code_interpreter_call.interpreting
        group: responses
        example: |
          {
            "type": "response.code_interpreter_call.interpreting",
            "response_id": "resp-123",
            "output_index": 4,
            "code_interpreter_call": {}
          }
    ResponseCompletedEvent:
      required:
      - response
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.completed`.
          enum:
          - response.completed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
      description: Emitted when the model response is complete.
      x-oaiMeta:
        name: response.completed
        group: responses
        example: |
          {
            "type": "response.completed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "completed",
              "error": null,
              "incomplete_details": null,
              "input": [],
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [
                {
                  "id": "msg_123",
                  "type": "message",
                  "role": "assistant",
                  "content": [
                    {
                      "type": "output_text",
                      "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                      "annotations": []
                    }
                  ]
                }
              ],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": {
                "input_tokens": 0,
                "output_tokens": 0,
                "output_tokens_details": {
                  "reasoning_tokens": 0
                },
                "total_tokens": 0
              },
              "user": null,
              "metadata": {}
            }
          }
    ResponseContentPartAddedEvent:
      required:
      - content_index
      - item_id
      - output_index
      - part
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.added`.
          enum:
          - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that was added.
        part:
          $ref: "#/components/schemas/OutputContent"
      description: Emitted when a new content part is added.
      x-oaiMeta:
        name: response.content_part.added
        group: responses
        example: |
          {
            "type": "response.content_part.added",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "",
              "annotations": []
            }
          }
    ResponseContentPartDoneEvent:
      required:
      - content_index
      - item_id
      - output_index
      - part
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.content_part.done`.
          enum:
          - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that is done.
        part:
          $ref: "#/components/schemas/OutputContent"
      description: Emitted when a content part is done.
      x-oaiMeta:
        name: response.content_part.done
        group: responses
        example: |
          {
            "type": "response.content_part.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "part": {
              "type": "output_text",
              "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
              "annotations": []
            }
          }
    ResponseCreatedEvent:
      required:
      - response
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.created`.
          enum:
          - response.created
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
      description: |
        An event that is emitted when a response is created.
      x-oaiMeta:
        name: response.created
        group: responses
        example: |
          {
            "type": "response.created",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseError:
      required:
      - code
      - message
      type: object
      properties:
        code:
          $ref: "#/components/schemas/ResponseErrorCode"
        message:
          type: string
          description: |
            A human-readable description of the error.
      description: |
        An error object returned when the model fails to generate a Response.
      nullable: true
    ResponseErrorCode:
      type: string
      description: |
        The error code for the response.
      enum:
      - server_error
      - rate_limit_exceeded
      - invalid_prompt
      - vector_store_timeout
      - invalid_image
      - invalid_image_format
      - invalid_base64_image
      - invalid_image_url
      - image_too_large
      - image_too_small
      - image_parse_error
      - image_content_policy_violation
      - invalid_image_mode
      - image_file_too_large
      - unsupported_image_media_type
      - empty_image_file
      - failed_to_download_image
      - image_file_not_found
    ResponseErrorEvent:
      required:
      - code
      - message
      - param
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `error`.
          enum:
          - error
          x-stainless-const: true
        code:
          type: string
          description: |
            The error code.
          nullable: true
        message:
          type: string
          description: |
            The error message.
        param:
          type: string
          description: |
            The error parameter.
          nullable: true
      description: Emitted when an error occurs.
      x-oaiMeta:
        name: error
        group: responses
        example: |
          {
            "type": "error",
            "code": "ERR_SOMETHING",
            "message": "Something went wrong",
            "param": null
          }
    ResponseFailedEvent:
      required:
      - response
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.failed`.
          enum:
          - response.failed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
      description: |
        An event that is emitted when a response fails.
      x-oaiMeta:
        name: response.failed
        group: responses
        example: |
          {
            "type": "response.failed",
            "response": {
              "id": "resp_123",
              "object": "response",
              "created_at": 1740855869,
              "status": "failed",
              "error": {
                "code": "server_error",
                "message": "The model failed to generate a response."
              },
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-mini-2024-07-18",
              "output": [],
              "previous_response_id": null,
              "reasoning_effort": null,
              "store": false,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseFileSearchCallCompletedEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.completed`.
          enum:
          - response.file_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      description: Emitted when a file search call is completed (results found).
      x-oaiMeta:
        name: response.file_search_call.completed
        group: responses
        example: |
          {
            "type": "response.file_search_call.completed",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallInProgressEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.in_progress`.
          enum:
          - response.file_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is initiated.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      description: Emitted when a file search call is initiated.
      x-oaiMeta:
        name: response.file_search_call.in_progress
        group: responses
        example: |
          {
            "type": "response.file_search_call.in_progress",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFileSearchCallSearchingEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.file_search_call.searching`.
          enum:
          - response.file_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the file search call is searching.
        item_id:
          type: string
          description: |
            The ID of the output item that the file search call is initiated.
      description: Emitted when a file search is currently searching.
      x-oaiMeta:
        name: response.file_search_call.searching
        group: responses
        example: |
          {
            "type": "response.file_search_call.searching",
            "output_index": 0,
            "item_id": "fs_123",
          }
    ResponseFormatJsonObject:
      title: JSON object
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_object`.
          enum:
          - json_object
          x-stainless-const: true
      description: |
        JSON object response format. An older method of generating JSON responses.
        Using `json_schema` is recommended for models that support it. Note that the
        model will not generate JSON without a system or user message instructing it
        to do so.
    ResponseFormatJsonSchema:
      title: JSON schema
      required:
      - json_schema
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          x-stainless-const: true
        json_schema:
          $ref: "#/components/schemas/JSON schema"
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
    ResponseFormatJsonSchemaSchema:
      title: JSON schema
      type: object
      additionalProperties: true
      description: |
        The schema for the response format, described as a JSON Schema object.
        Learn how to build JSON schemas [here](https://json-schema.org/).
    ResponseFormatText:
      title: Text
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `text`.
          enum:
          - text
          x-stainless-const: true
      description: |
        Default response format. Used to generate text responses.
    ResponseFunctionCallArgumentsDeltaEvent:
      required:
      - delta
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.function_call_arguments.delta`.
          enum:
          - response.function_call_arguments.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the function-call arguments delta is added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the function-call arguments delta is added to.
        delta:
          type: string
          description: |
            The function-call arguments delta that is added.
      description: Emitted when there is a partial function-call arguments delta.
      x-oaiMeta:
        name: response.function_call_arguments.delta
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.delta",
            "item_id": "item-abc",
            "output_index": 0,
            "delta": "{ \"arg\":"
          }
    ResponseFunctionCallArgumentsDoneEvent:
      required:
      - arguments
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - response.function_call_arguments.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the item.
        output_index:
          type: integer
          description: The index of the output item.
        arguments:
          type: string
          description: The function-call arguments.
      description: Emitted when function-call arguments are finalized.
      x-oaiMeta:
        name: response.function_call_arguments.done
        group: responses
        example: |
          {
            "type": "response.function_call_arguments.done",
            "item_id": "item-abc",
            "output_index": 1,
            "arguments": "{ \"arg\": 123 }"
          }
    ResponseInProgressEvent:
      required:
      - response
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.in_progress`.
          enum:
          - response.in_progress
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
      description: Emitted when the response is in progress.
      x-oaiMeta:
        name: response.in_progress
        group: responses
        example: |
          {
            "type": "response.in_progress",
            "response": {
              "id": "resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c",
              "object": "response",
              "created_at": 1741487325,
              "status": "in_progress",
              "error": null,
              "incomplete_details": null,
              "instructions": null,
              "max_output_tokens": null,
              "model": "gpt-4o-2024-08-06",
              "output": [],
              "parallel_tool_calls": true,
              "previous_response_id": null,
              "reasoning": {
                "effort": null,
                "summary": null
              },
              "store": true,
              "temperature": 1,
              "text": {
                "format": {
                  "type": "text"
                }
              },
              "tool_choice": "auto",
              "tools": [],
              "top_p": 1,
              "truncation": "disabled",
              "usage": null,
              "user": null,
              "metadata": {}
            }
          }
    ResponseIncompleteEvent:
      required:
      - response
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.incomplete`.
          enum:
          - response.incomplete
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/Response"
      description: |
        An event that is emitted when a response finishes as incomplete.
      x-oaiMeta:
        name: response.incomplete
        group: responses
        example: "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n   \
          \ \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\"\
          : 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null, \n\
          \    \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n\
          \    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\"\
          : \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\"\
          : null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"\
          temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\"\
          : \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\"\
          : [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\"\
          : null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
    ResponseItemList:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          description: "The type of object returned, must be `list`."
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: "#/components/schemas/ItemResource"
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      description: A list of Response items.
      x-oaiMeta:
        name: The input item list
        group: responses
        example: |
          {
            "object": "list",
            "data": [
              {
                "id": "msg_abc123",
                "type": "message",
                "role": "user",
                "content": [
                  {
                    "type": "input_text",
                    "text": "Tell me a three sentence bedtime story about a unicorn."
                  }
                ]
              }
            ],
            "first_id": "msg_abc123",
            "last_id": "msg_abc123",
            "has_more": false
          }
    ResponseModalities:
      type: array
      description: "Output types that you would like the model to generate.\nMost\
        \ models are capable of generating text, which is the default:\n\n`[\"text\"\
        ]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio).\
        \ To request that this model generate \nboth text and audio responses, you\
        \ can use:\n\n`[\"text\", \"audio\"]`\n"
      nullable: true
      items:
        type: string
        enum:
        - text
        - audio
    ResponseOutputItemAddedEvent:
      required:
      - item
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.added`.
          enum:
          - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was added.
        item:
          $ref: "#/components/schemas/OutputItem"
      description: Emitted when a new output item is added.
      x-oaiMeta:
        name: response.output_item.added
        group: responses
        example: |
          {
            "type": "response.output_item.added",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "in_progress",
              "type": "message",
              "role": "assistant",
              "content": []
            }
          }
    ResponseOutputItemDoneEvent:
      required:
      - item
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.done`.
          enum:
          - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was marked done.
        item:
          $ref: "#/components/schemas/OutputItem"
      description: Emitted when an output item is marked done.
      x-oaiMeta:
        name: response.output_item.done
        group: responses
        example: |
          {
            "type": "response.output_item.done",
            "output_index": 0,
            "item": {
              "id": "msg_123",
              "status": "completed",
              "type": "message",
              "role": "assistant",
              "content": [
                {
                  "type": "output_text",
                  "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.",
                  "annotations": []
                }
              ]
            }
          }
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: "The unique ID of the previous response to the model. Use this\
            \ to\ncreate multi-turn conversations. Learn more about \n[conversation\
            \ state](/docs/guides/conversation-state).\n"
          nullable: true
        model:
          $ref: "#/components/schemas/ModelIdsResponses"
        reasoning:
          $ref: "#/components/schemas/Reasoning"
        max_output_tokens:
          type: integer
          description: |
            An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
          nullable: true
        instructions:
          type: string
          description: |
            Inserts a system (or developer) message as the first item in the model's context.

            When using along with `previous_response_id`, the instructions from a previous
            response will not be carried over to the next response. This makes it simple
            to swap out system (or developer) messages in new responses.
          nullable: true
        text:
          $ref: "#/components/schemas/ResponseProperties_text"
        tools:
          type: array
          description: "An array of tools the model may call while generating a response.\
            \ You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\
            \nThe two categories of tools you can provide the model are:\n\n- **Built-in\
            \ tools**: Tools that are provided by OpenAI that extend the\n  model's\
            \ capabilities, like [web search](/docs/guides/tools-web-search)\n  or\
            \ [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in\
            \ tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions\
            \ that are defined by you,\n  enabling the model to call your own code.\
            \ Learn more about\n  [function calling](/docs/guides/function-calling).\n"
          items:
            $ref: "#/components/schemas/Tool"
        tool_choice:
          description: |
            How the model should select which tool (or tools) to use when generating
            a response. See the `tools` parameter to see how to specify which tools
            the model can call.
          oneOf:
          - $ref: "#/components/schemas/ToolChoiceOptions"
          - $ref: "#/components/schemas/ToolChoiceTypes"
          - $ref: "#/components/schemas/ToolChoiceFunction"
        truncation:
          type: string
          description: "The truncation strategy to use for the model response.\n-\
            \ `auto`: If the context of this response and previous ones exceeds\n\
            \  the model's context window size, the model will truncate the \n  response\
            \ to fit the context window by dropping input items in the\n  middle of\
            \ the conversation. \n- `disabled` (default): If a model response will\
            \ exceed the context window \n  size for a model, the request will fail\
            \ with a 400 error.\n"
          nullable: true
          default: disabled
          enum:
          - auto
          - disabled
    ResponseReasoningSummaryPartAddedEvent:
      required:
      - item_id
      - output_index
      - part
      - summary_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.reasoning_summary_part.added`.
          enum:
          - response.reasoning_summary_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary part is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary part is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        part:
          $ref: "#/components/schemas/ResponseReasoningSummaryPartAddedEvent_part"
      description: Emitted when a new reasoning summary part is added.
      x-oaiMeta:
        name: response.reasoning_summary_part.added
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_part.added",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "part": {
              "type": "summary_text",
              "text": ""
            }
          }
    ResponseReasoningSummaryPartDoneEvent:
      required:
      - item_id
      - output_index
      - part
      - summary_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.reasoning_summary_part.done`.
          enum:
          - response.reasoning_summary_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary part is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary part is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        part:
          $ref: "#/components/schemas/ResponseReasoningSummaryPartDoneEvent_part"
      description: Emitted when a reasoning summary part is completed.
      x-oaiMeta:
        name: response.reasoning_summary_part.done
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_part.done",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "part": {
              "type": "summary_text",
              "text": "**Responding to a greeting**\n\nThe user just said, \"Hello!\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \"Hello! How can I assist you today?\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!"
            }
          }
    ResponseReasoningSummaryTextDeltaEvent:
      required:
      - delta
      - item_id
      - output_index
      - summary_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.reasoning_summary_text.delta`.
          enum:
          - response.reasoning_summary_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary text delta is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary text delta is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        delta:
          type: string
          description: |
            The text delta that was added to the summary.
      description: Emitted when a delta is added to a reasoning summary text.
      x-oaiMeta:
        name: response.reasoning_summary_text.delta
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_text.delta",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "delta": "**Respond"
          }
    ResponseReasoningSummaryTextDoneEvent:
      required:
      - item_id
      - output_index
      - summary_index
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.reasoning_summary_text.done`.
          enum:
          - response.reasoning_summary_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the item this summary text is associated with.
        output_index:
          type: integer
          description: |
            The index of the output item this summary text is associated with.
        summary_index:
          type: integer
          description: |
            The index of the summary part within the reasoning summary.
        text:
          type: string
          description: |
            The full text of the completed reasoning summary.
      description: Emitted when a reasoning summary text is completed.
      x-oaiMeta:
        name: response.reasoning_summary_text.done
        group: responses
        example: |
          {
            "type": "response.reasoning_summary_text.done",
            "item_id": "rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476",
            "output_index": 0,
            "summary_index": 0,
            "text": "**Responding to a greeting**\n\nThe user just said, \"Hello!\" So, it seems I need to engage. I'll greet them back and offer help since they're looking to chat. I could say something like, \"Hello! How can I assist you today?\" That feels friendly and open. They didn't ask a specific question, so this approach will work well for starting a conversation. Let's see where it goes from there!"
          }
    ResponseRefusalDeltaEvent:
      required:
      - content_index
      - delta
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.delta`.
          enum:
          - response.refusal.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is added to.
        delta:
          type: string
          description: |
            The refusal text that is added.
      description: Emitted when there is a partial refusal text.
      x-oaiMeta:
        name: response.refusal.delta
        group: responses
        example: |
          {
            "type": "response.refusal.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "refusal text so far"
          }
    ResponseRefusalDoneEvent:
      required:
      - content_index
      - item_id
      - output_index
      - refusal
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.refusal.done`.
          enum:
          - response.refusal.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the refusal text is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the refusal text is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the refusal text is finalized.
        refusal:
          type: string
          description: |
            The refusal text that is finalized.
      description: Emitted when refusal text is finalized.
      x-oaiMeta:
        name: response.refusal.done
        group: responses
        example: |
          {
            "type": "response.refusal.done",
            "item_id": "item-abc",
            "output_index": 1,
            "content_index": 2,
            "refusal": "final refusal text"
          }
    ResponseStreamEvent:
      discriminator:
        propertyName: type
      anyOf:
      - $ref: "#/components/schemas/ResponseAudioDeltaEvent"
      - $ref: "#/components/schemas/ResponseAudioDoneEvent"
      - $ref: "#/components/schemas/ResponseAudioTranscriptDeltaEvent"
      - $ref: "#/components/schemas/ResponseAudioTranscriptDoneEvent"
      - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent"
      - $ref: "#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent"
      - $ref: "#/components/schemas/ResponseCodeInterpreterCallCompletedEvent"
      - $ref: "#/components/schemas/ResponseCodeInterpreterCallInProgressEvent"
      - $ref: "#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent"
      - $ref: "#/components/schemas/ResponseCompletedEvent"
      - $ref: "#/components/schemas/ResponseContentPartAddedEvent"
      - $ref: "#/components/schemas/ResponseContentPartDoneEvent"
      - $ref: "#/components/schemas/ResponseCreatedEvent"
      - $ref: "#/components/schemas/ResponseErrorEvent"
      - $ref: "#/components/schemas/ResponseFileSearchCallCompletedEvent"
      - $ref: "#/components/schemas/ResponseFileSearchCallInProgressEvent"
      - $ref: "#/components/schemas/ResponseFileSearchCallSearchingEvent"
      - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent"
      - $ref: "#/components/schemas/ResponseFunctionCallArgumentsDoneEvent"
      - $ref: "#/components/schemas/ResponseInProgressEvent"
      - $ref: "#/components/schemas/ResponseFailedEvent"
      - $ref: "#/components/schemas/ResponseIncompleteEvent"
      - $ref: "#/components/schemas/ResponseOutputItemAddedEvent"
      - $ref: "#/components/schemas/ResponseOutputItemDoneEvent"
      - $ref: "#/components/schemas/ResponseReasoningSummaryPartAddedEvent"
      - $ref: "#/components/schemas/ResponseReasoningSummaryPartDoneEvent"
      - $ref: "#/components/schemas/ResponseReasoningSummaryTextDeltaEvent"
      - $ref: "#/components/schemas/ResponseReasoningSummaryTextDoneEvent"
      - $ref: "#/components/schemas/ResponseRefusalDeltaEvent"
      - $ref: "#/components/schemas/ResponseRefusalDoneEvent"
      - $ref: "#/components/schemas/ResponseTextAnnotationDeltaEvent"
      - $ref: "#/components/schemas/ResponseTextDeltaEvent"
      - $ref: "#/components/schemas/ResponseTextDoneEvent"
      - $ref: "#/components/schemas/ResponseWebSearchCallCompletedEvent"
      - $ref: "#/components/schemas/ResponseWebSearchCallInProgressEvent"
      - $ref: "#/components/schemas/ResponseWebSearchCallSearchingEvent"
    ResponseTextAnnotationDeltaEvent:
      required:
      - annotation
      - annotation_index
      - content_index
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.annotation.added`.
          enum:
          - response.output_text.annotation.added
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text annotation was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text annotation was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text annotation was added to.
        annotation_index:
          type: integer
          description: |
            The index of the annotation that was added.
        annotation:
          $ref: "#/components/schemas/Annotation"
      description: Emitted when a text annotation is added.
      x-oaiMeta:
        name: response.output_text.annotation.added
        group: responses
        example: |
          {
            "type": "response.output_text.annotation.added",
            "item_id": "msg_abc123",
            "output_index": 1,
            "content_index": 0,
            "annotation_index": 0,
            "annotation": {
              "type": "file_citation",
              "index": 390,
              "file_id": "file-4wDz5b167pAf72nx1h9eiN",
              "filename": "dragons.pdf"
            }
          }
    ResponseTextDeltaEvent:
      required:
      - content_index
      - delta
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.delta`.
          enum:
          - response.output_text.delta
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text delta was added to.
        output_index:
          type: integer
          description: |
            The index of the output item that the text delta was added to.
        content_index:
          type: integer
          description: |
            The index of the content part that the text delta was added to.
        delta:
          type: string
          description: |
            The text delta that was added.
      description: Emitted when there is an additional text delta.
      x-oaiMeta:
        name: response.output_text.delta
        group: responses
        example: |
          {
            "type": "response.output_text.delta",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "delta": "In"
          }
    ResponseTextDoneEvent:
      required:
      - content_index
      - item_id
      - output_index
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_text.done`.
          enum:
          - response.output_text.done
          x-stainless-const: true
        item_id:
          type: string
          description: |
            The ID of the output item that the text content is finalized.
        output_index:
          type: integer
          description: |
            The index of the output item that the text content is finalized.
        content_index:
          type: integer
          description: |
            The index of the content part that the text content is finalized.
        text:
          type: string
          description: |
            The text content that is finalized.
      description: Emitted when text content is finalized.
      x-oaiMeta:
        name: response.output_text.done
        group: responses
        example: |
          {
            "type": "response.output_text.done",
            "item_id": "msg_123",
            "output_index": 0,
            "content_index": 0,
            "text": "In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic."
          }
    ResponseUsage:
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - output_tokens_details
      - total_tokens
      type: object
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        input_tokens_details:
          $ref: "#/components/schemas/ResponseUsage_input_tokens_details"
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          $ref: "#/components/schemas/ResponseUsage_output_tokens_details"
        total_tokens:
          type: integer
          description: The total number of tokens used.
      description: |
        Represents token usage details including input tokens, output tokens,
        a breakdown of output tokens, and the total tokens used.
    ResponseWebSearchCallCompletedEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.web_search_call.completed`.
          enum:
          - response.web_search_call.completed
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the web search call is associated with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      description: Emitted when a web search call is completed.
      x-oaiMeta:
        name: response.web_search_call.completed
        group: responses
        example: |
          {
            "type": "response.web_search_call.completed",
            "output_index": 0,
            "item_id": "ws_123",
          }
    ResponseWebSearchCallInProgressEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.web_search_call.in_progress`.
          enum:
          - response.web_search_call.in_progress
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the web search call is associated with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      description: Emitted when a web search call is initiated.
      x-oaiMeta:
        name: response.web_search_call.in_progress
        group: responses
        example: |
          {
            "type": "response.web_search_call.in_progress",
            "output_index": 0,
            "item_id": "ws_123",
          }
    ResponseWebSearchCallSearchingEvent:
      required:
      - item_id
      - output_index
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.web_search_call.searching`.
          enum:
          - response.web_search_call.searching
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that the web search call is associated with.
        item_id:
          type: string
          description: |
            Unique ID for the output item associated with the web search call.
      description: Emitted when a web search call is executing.
      x-oaiMeta:
        name: response.web_search_call.searching
        group: responses
        example: |
          {
            "type": "response.web_search_call.searching",
            "output_index": 0,
            "item_id": "ws_123",
          }
    RunCompletionUsage:
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      description: "Usage statistics related to the run. This value will be `null`\
        \ if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.)."
      nullable: true
    RunObject:
      title: A run on a thread
      required:
      - assistant_id
      - cancelled_at
      - completed_at
      - created_at
      - expires_at
      - failed_at
      - id
      - incomplete_details
      - instructions
      - last_error
      - max_completion_tokens
      - max_prompt_tokens
      - metadata
      - model
      - object
      - parallel_tool_calls
      - required_action
      - response_format
      - started_at
      - status
      - thread_id
      - tool_choice
      - tools
      - truncation_strategy
      - usage
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread.run`."
          enum:
          - thread.run
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was created.
        thread_id:
          type: string
          description: "The ID of the [thread](/docs/api-reference/threads) that was\
            \ executed on as a part of this run."
        assistant_id:
          type: string
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ used for execution of this run."
        status:
          type: string
          description: "The status of the run, which can be either `queued`, `in_progress`,\
            \ `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`,\
            \ `incomplete`, or `expired`."
          enum:
          - queued
          - in_progress
          - requires_action
          - cancelling
          - cancelled
          - failed
          - completed
          - incomplete
          - expired
        required_action:
          $ref: "#/components/schemas/RunObject_required_action"
        last_error:
          $ref: "#/components/schemas/RunObject_last_error"
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run will expire.
          nullable: true
        started_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was started.
          nullable: true
        cancelled_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          nullable: true
        failed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run failed.
          nullable: true
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was completed.
          nullable: true
        incomplete_details:
          $ref: "#/components/schemas/RunObject_incomplete_details"
        model:
          type: string
          description: "The model that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
        instructions:
          type: string
          description: "The instructions that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
        tools:
          maxItems: 20
          type: array
          description: "The list of tools that the [assistant](/docs/api-reference/assistants)\
            \ used for this run."
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearch"
            - $ref: "#/components/schemas/AssistantToolsFunction"
          default: []
        metadata:
          $ref: "#/components/schemas/Metadata"
        usage:
          $ref: "#/components/schemas/RunCompletionUsage"
        temperature:
          type: number
          description: "The sampling temperature used for this run. If not set, defaults\
            \ to 1."
          nullable: true
        top_p:
          type: number
          description: "The nucleus sampling value used for this run. If not set,\
            \ defaults to 1."
          nullable: true
        max_prompt_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of prompt tokens specified to have been used over the course of the run.
          nullable: true
        max_completion_tokens:
          minimum: 256
          type: integer
          description: |
            The maximum number of completion tokens specified to have been used over the course of the run.
          nullable: true
        truncation_strategy:
          allOf:
          - $ref: "#/components/schemas/TruncationObject"
          - nullable: true
        tool_choice:
          allOf:
          - $ref: "#/components/schemas/AssistantsApiToolChoiceOption"
          - nullable: true
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
        response_format:
          $ref: "#/components/schemas/AssistantsApiResponseFormatOption"
      description: "Represents an execution run on a [thread](/docs/api-reference/threads)."
      x-oaiMeta:
        name: The run object
        beta: true
        example: |
          {
            "id": "run_abc123",
            "object": "thread.run",
            "created_at": 1698107661,
            "assistant_id": "asst_abc123",
            "thread_id": "thread_abc123",
            "status": "completed",
            "started_at": 1699073476,
            "expires_at": null,
            "cancelled_at": null,
            "failed_at": null,
            "completed_at": 1699073498,
            "last_error": null,
            "model": "gpt-4o",
            "instructions": null,
            "tools": [{"type": "file_search"}, {"type": "code_interpreter"}],
            "metadata": {},
            "incomplete_details": null,
            "usage": {
              "prompt_tokens": 123,
              "completion_tokens": 456,
              "total_tokens": 579
            },
            "temperature": 1.0,
            "top_p": 1.0,
            "max_prompt_tokens": 1000,
            "max_completion_tokens": 1000,
            "truncation_strategy": {
              "type": "auto",
              "last_messages": null
            },
            "response_format": "auto",
            "tool_choice": "auto",
            "parallel_tool_calls": true
          }
    RunStepCompletionUsage:
      required:
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run
            step.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run step.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      description: Usage statistics related to the run step. This value will be `null`
        while the run step's status is `in_progress`.
      nullable: true
    RunStepDeltaObject:
      title: Run step delta object
      required:
      - delta
      - id
      - object
      type: object
      properties:
        id:
          type: string
          description: "The identifier of the run step, which can be referenced in\
            \ API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread.run.step.delta`."
          enum:
          - thread.run.step.delta
          x-stainless-const: true
        delta:
          $ref: "#/components/schemas/RunStepDeltaObject_delta"
      description: |
        Represents a run step delta i.e. any changed fields on a run step during streaming.
      x-oaiMeta:
        name: The run step delta object
        beta: true
        example: |
          {
            "id": "step_123",
            "object": "thread.run.step.delta",
            "delta": {
              "step_details": {
                "type": "tool_calls",
                "tool_calls": [
                  {
                    "index": 0,
                    "id": "call_123",
                    "type": "code_interpreter",
                    "code_interpreter": { "input": "", "outputs": [] }
                  }
                ]
              }
            }
          }
    RunStepDeltaStepDetailsMessageCreationObject:
      title: Message creation
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `message_creation`.
          enum:
          - message_creation
          x-stainless-const: true
        message_creation:
          $ref: "#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject_message_creation"
      description: Details of the message creation by the run step.
    RunStepDeltaStepDetailsToolCallsCodeObject:
      title: Code interpreter tool call
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          x-stainless-const: true
        code_interpreter:
          $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter"
      description: Details of the Code Interpreter tool call the run step was involved
        in.
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      title: Code interpreter image output
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          type: string
          description: Always `image`.
          enum:
          - image
          x-stainless-const: true
        image:
          $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image"
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      title: Code interpreter log output
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          type: string
          description: Always `logs`.
          enum:
          - logs
          x-stainless-const: true
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      description: Text output from the Code Interpreter tool call as part of a run
        step.
    RunStepDeltaStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      required:
      - file_search
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          x-stainless-const: true
        file_search:
          type: object
          description: "For now, this is always going to be an empty object."
          x-oaiTypeLabel: map
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      title: Function tool call
      required:
      - index
      - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject_function"
    RunStepDeltaStepDetailsToolCallsObject:
      title: Tool calls
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `tool_calls`.
          enum:
          - tool_calls
          x-stainless-const: true
        tool_calls:
          type: array
          description: |
            An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
          items:
            oneOf:
            - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject"
            - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject"
            - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject"
      description: Details of the tool call.
    RunStepDetailsMessageCreationObject:
      title: Message creation
      required:
      - message_creation
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `message_creation`.
          enum:
          - message_creation
          x-stainless-const: true
        message_creation:
          $ref: "#/components/schemas/RunStepDetailsMessageCreationObject_message_creation"
      description: Details of the message creation by the run step.
    RunStepDetailsToolCallsCodeObject:
      title: Code Interpreter tool call
      required:
      - code_interpreter
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          x-stainless-const: true
        code_interpreter:
          $ref: "#/components/schemas/RunStepDetailsToolCallsCodeObject_code_interpreter"
      description: Details of the Code Interpreter tool call the run step was involved
        in.
    RunStepDetailsToolCallsCodeOutputImageObject:
      title: Code Interpreter image output
      required:
      - image
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `image`.
          enum:
          - image
          x-stainless-const: true
        image:
          $ref: "#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject_image"
    RunStepDetailsToolCallsCodeOutputLogsObject:
      title: Code Interpreter log output
      required:
      - logs
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `logs`.
          enum:
          - logs
          x-stainless-const: true
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      description: Text output from the Code Interpreter tool call as part of a run
        step.
    RunStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      required:
      - file_search
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          x-stainless-const: true
        file_search:
          $ref: "#/components/schemas/RunStepDetailsToolCallsFileSearchObject_file_search"
    RunStepDetailsToolCallsFileSearchRankingOptionsObject:
      title: File search tool call ranking options
      required:
      - ranker
      - score_threshold
      type: object
      properties:
        ranker:
          $ref: "#/components/schemas/FileSearchRanker"
        score_threshold:
          maximum: 1
          minimum: 0
          type: number
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
      description: The ranking options for the file search.
    RunStepDetailsToolCallsFileSearchResultObject:
      title: File search tool call result
      required:
      - file_id
      - file_name
      - score
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the file that result was found in.
        file_name:
          type: string
          description: The name of the file that result was found in.
        score:
          maximum: 1
          minimum: 0
          type: number
          description: The score of the result. All values must be a floating point
            number between 0 and 1.
        content:
          type: array
          description: The content of the result that was found. The content is only
            included if requested via the include query parameter.
          items:
            $ref: "#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject_content"
      description: A result instance of the file search.
      x-oaiTypeLabel: map
    RunStepDetailsToolCallsFunctionObject:
      title: Function tool call
      required:
      - function
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/RunStepDetailsToolCallsFunctionObject_function"
    RunStepDetailsToolCallsObject:
      title: Tool calls
      required:
      - tool_calls
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `tool_calls`.
          enum:
          - tool_calls
          x-stainless-const: true
        tool_calls:
          type: array
          description: |
            An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
          items:
            oneOf:
            - $ref: "#/components/schemas/RunStepDetailsToolCallsCodeObject"
            - $ref: "#/components/schemas/RunStepDetailsToolCallsFileSearchObject"
            - $ref: "#/components/schemas/RunStepDetailsToolCallsFunctionObject"
      description: Details of the tool call.
    RunStepObject:
      title: Run steps
      required:
      - assistant_id
      - cancelled_at
      - completed_at
      - created_at
      - expired_at
      - failed_at
      - id
      - last_error
      - metadata
      - object
      - run_id
      - status
      - step_details
      - thread_id
      - type
      - usage
      type: object
      properties:
        id:
          type: string
          description: "The identifier of the run step, which can be referenced in\
            \ API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread.run.step`."
          enum:
          - thread.run.step
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step was created.
        assistant_id:
          type: string
          description: "The ID of the [assistant](/docs/api-reference/assistants)\
            \ associated with the run step."
        thread_id:
          type: string
          description: "The ID of the [thread](/docs/api-reference/threads) that was\
            \ run."
        run_id:
          type: string
          description: "The ID of the [run](/docs/api-reference/runs) that this run\
            \ step is a part of."
        type:
          type: string
          description: "The type of run step, which can be either `message_creation`\
            \ or `tool_calls`."
          enum:
          - message_creation
          - tool_calls
        status:
          type: string
          description: "The status of the run step, which can be either `in_progress`,\
            \ `cancelled`, `failed`, `completed`, or `expired`."
          enum:
          - in_progress
          - cancelled
          - failed
          - completed
          - expired
        step_details:
          type: object
          description: The details of the run step.
          oneOf:
          - $ref: "#/components/schemas/RunStepDetailsMessageCreationObject"
          - $ref: "#/components/schemas/RunStepDetailsToolCallsObject"
        last_error:
          $ref: "#/components/schemas/RunStepObject_last_error"
        expired_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step expired.
            A step is considered expired if the parent run is expired.
          nullable: true
        cancelled_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          nullable: true
        failed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step failed.
          nullable: true
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step completed.
          nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
        usage:
          $ref: "#/components/schemas/RunStepCompletionUsage"
      description: |
        Represents a step in execution of a run.
      x-oaiMeta:
        name: The run step object
        beta: true
        example: |
          {
            "id": "step_abc123",
            "object": "thread.run.step",
            "created_at": 1699063291,
            "run_id": "run_abc123",
            "assistant_id": "asst_abc123",
            "thread_id": "thread_abc123",
            "type": "message_creation",
            "status": "completed",
            "cancelled_at": null,
            "completed_at": 1699063291,
            "expired_at": null,
            "failed_at": null,
            "last_error": null,
            "step_details": {
              "type": "message_creation",
              "message_creation": {
                "message_id": "msg_abc123"
              }
            },
            "usage": {
              "prompt_tokens": 123,
              "completion_tokens": 456,
              "total_tokens": 579
            }
          }
    RunStepStreamEvent:
      oneOf:
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.created
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ is created."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.in_progress
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ moves to an `in_progress` state."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.delta
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepDeltaObject"
        description: "Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object)\
          \ are being streamed."
        x-oaiMeta:
          dataDescription: "`data` is a [run step delta](/docs/api-reference/assistants-streaming/run-step-delta-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.completed
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ is completed."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.failed
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ fails."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.cancelled
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ is cancelled."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.step.expired
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunStepObject"
        description: "Occurs when a [run step](/docs/api-reference/run-steps/step-object)\
          \ expires."
        x-oaiMeta:
          dataDescription: "`data` is a [run step](/docs/api-reference/run-steps/step-object)"
    RunStreamEvent:
      oneOf:
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.created
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a new [run](/docs/api-reference/runs/object) is\
          \ created."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.queued
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
          \ a `queued` status."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.in_progress
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
          \ an `in_progress` status."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.requires_action
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
          \ a `requires_action` status."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.completed
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) is completed."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.incomplete
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) ends with\
          \ status `incomplete`."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.failed
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) fails."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.cancelling
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) moves to\
          \ a `cancelling` status."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.cancelled
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) is cancelled."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
      - required:
        - data
        - event
        type: object
        properties:
          event:
            type: string
            enum:
            - thread.run.expired
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/RunObject"
        description: "Occurs when a [run](/docs/api-reference/runs/object) expires."
        x-oaiMeta:
          dataDescription: "`data` is a [run](/docs/api-reference/runs/object)"
    RunToolCallObject:
      required:
      - function
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: "The ID of the tool call. This ID must be referenced when you\
            \ submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs)\
            \ endpoint."
        type:
          type: string
          description: "The type of tool call the output is required for. For now,\
            \ this is always `function`."
          enum:
          - function
          x-stainless-const: true
        function:
          $ref: "#/components/schemas/RunToolCallObject_function"
      description: Tool call objects
    Screenshot:
      title: Screenshot
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a screenshot action, this property\
            \ is \nalways set to `screenshot`.\n"
          default: screenshot
          enum:
          - screenshot
          x-stainless-const: true
      description: |
        A screenshot action.
    Scroll:
      title: Scroll
      required:
      - scroll_x
      - scroll_y
      - type
      - x
      - "y"
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a scroll action, this property\
            \ is \nalways set to `scroll`.\n"
          default: scroll
          enum:
          - scroll
          x-stainless-const: true
        x:
          type: integer
          description: |
            The x-coordinate where the scroll occurred.
        "y":
          type: integer
          description: |
            The y-coordinate where the scroll occurred.
        scroll_x:
          type: integer
          description: |
            The horizontal scroll distance.
        scroll_y:
          type: integer
          description: |
            The vertical scroll distance.
      description: |
        A scroll action.
    ServiceTier:
      type: string
      description: |
        Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
          - If set to 'auto', and the Project is Scale tier enabled, the system
            will utilize scale tier credits until they are exhausted.
          - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
          - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
          - When not set, the default behavior is 'auto'.

          When this parameter is set, the response body will include the `service_tier` utilized.
      nullable: true
      default: auto
      enum:
      - auto
      - default
      - flex
    StaticChunkingStrategy:
      required:
      - chunk_overlap_tokens
      - max_chunk_size_tokens
      type: object
      properties:
        max_chunk_size_tokens:
          maximum: 4096
          minimum: 100
          type: integer
          description: The maximum number of tokens in each chunk. The default value
            is `800`. The minimum value is `100` and the maximum value is `4096`.
        chunk_overlap_tokens:
          type: integer
          description: |
            The number of tokens that overlap between chunks. The default value is `400`.

            Note that the overlap must not exceed half of `max_chunk_size_tokens`.
      additionalProperties: false
    StaticChunkingStrategyRequestParam:
      title: Static Chunking Strategy
      required:
      - static
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
          - static
          x-stainless-const: true
        static:
          $ref: "#/components/schemas/StaticChunkingStrategy"
      additionalProperties: false
      description: Customize your own chunking strategy by setting chunk size and
        chunk overlap.
    StaticChunkingStrategyResponseParam:
      title: Static Chunking Strategy
      required:
      - static
      - type
      type: object
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
          - static
          x-stainless-const: true
        static:
          $ref: "#/components/schemas/StaticChunkingStrategy"
      additionalProperties: false
    StopConfiguration:
      description: |
        Not supported with latest reasoning models `o3` and `o4-mini`.

        Up to 4 sequences where the API will stop generating further tokens. The
        returned text will not contain the stop sequence.
      nullable: true
      oneOf:
      - type: string
        nullable: true
        example: |2+

        default: <|endoftext|>
      - maxItems: 4
        minItems: 1
        type: array
        items:
          type: string
          example: "[\"\\n\"]"
    SubmitToolOutputsRunRequest:
      required:
      - tool_outputs
      type: object
      properties:
        tool_outputs:
          type: array
          description: A list of tools for which the outputs are being submitted.
          items:
            $ref: "#/components/schemas/SubmitToolOutputsRunRequest_tool_outputs"
        stream:
          type: boolean
          description: |
            If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
          nullable: true
      additionalProperties: false
    TextResponseFormatConfiguration:
      description: "An object specifying the format that the model must output.\n\n\
        Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \n\
        which ensures the model will match your supplied JSON schema. Learn more in\
        \ the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe\
        \ default format is `{ \"type\": \"text\" }` with no additional options.\n\
        \n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\"\
        : \"json_object\" }` enables the older JSON mode, which\nensures the message\
        \ the model generates is valid JSON. Using `json_schema`\nis preferred for\
        \ models that support it.\n"
      oneOf:
      - $ref: "#/components/schemas/ResponseFormatText"
      - $ref: "#/components/schemas/TextResponseFormatJsonSchema"
      - $ref: "#/components/schemas/ResponseFormatJsonObject"
    TextResponseFormatJsonSchema:
      title: JSON schema
      required:
      - name
      - schema
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          x-stainless-const: true
        description:
          type: string
          description: |
            A description of what the response format is for, used by the model to
            determine how to respond in the format.
        name:
          type: string
          description: |
            The name of the response format. Must be a-z, A-Z, 0-9, or contain
            underscores and dashes, with a maximum length of 64.
        schema:
          $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
        strict:
          type: boolean
          description: |
            Whether to enable strict schema adherence when generating the output.
            If set to true, the model will always follow the exact schema defined
            in the `schema` field. Only a subset of JSON Schema is supported when
            `strict` is `true`. To learn more, read the [Structured Outputs
            guide](/docs/guides/structured-outputs).
          nullable: true
          default: false
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
    ThreadObject:
      title: Thread
      required:
      - created_at
      - id
      - metadata
      - object
      - tool_resources
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `thread`."
          enum:
          - thread
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the thread was created.
        tool_resources:
          $ref: "#/components/schemas/ModifyThreadRequest_tool_resources"
        metadata:
          $ref: "#/components/schemas/Metadata"
      description: "Represents a thread that contains [messages](/docs/api-reference/messages)."
      x-oaiMeta:
        name: The thread object
        beta: true
        example: |
          {
            "id": "thread_abc123",
            "object": "thread",
            "created_at": 1698107661,
            "metadata": {}
          }
    ThreadStreamEvent:
      oneOf:
      - required:
        - data
        - event
        type: object
        properties:
          enabled:
            type: boolean
            description: Whether to enable input audio transcription.
          event:
            type: string
            enum:
            - thread.created
            x-stainless-const: true
          data:
            $ref: "#/components/schemas/ThreadObject"
        description: "Occurs when a new [thread](/docs/api-reference/threads/object)\
          \ is created."
        x-oaiMeta:
          dataDescription: "`data` is a [thread](/docs/api-reference/threads/object)"
    ToggleCertificatesRequest:
      required:
      - certificate_ids
      type: object
      properties:
        certificate_ids:
          maxItems: 10
          minItems: 1
          type: array
          items:
            type: string
            example: cert_abc
    ToolChoiceFunction:
      title: Function tool
      required:
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: "For function calling, the type is always `function`."
          enum:
          - function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      description: |
        Use this option to force the model to call a specific function.
    ToolChoiceOptions:
      title: Tool choice mode
      type: string
      description: |
        Controls which (if any) tool is called by the model.

        `none` means the model will not call any tool and instead generates a message.

        `auto` means the model can pick between generating a message or calling one or
        more tools.

        `required` means the model must call one or more tools.
      enum:
      - none
      - auto
      - required
    ToolChoiceTypes:
      title: Hosted tool
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of hosted tool the model should to use. Learn more about
            [built-in tools](/docs/guides/tools).

            Allowed values are:
            - `file_search`
            - `web_search_preview`
            - `computer_use_preview`
          enum:
          - file_search
          - web_search_preview
          - computer_use_preview
          - web_search_preview_2025_03_11
      description: |
        Indicates that the model should use a built-in tool to generate a response.
        [Learn more about built-in tools](/docs/guides/tools).
    TranscriptTextDeltaEvent:
      required:
      - delta
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `transcript.text.delta`.
          enum:
          - transcript.text.delta
          x-stainless-const: true
        delta:
          type: string
          description: |
            The text delta that was additionally transcribed.
        logprobs:
          type: array
          description: |
            The log probabilities of the delta. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
          items:
            $ref: "#/components/schemas/TranscriptTextDeltaEvent_logprobs"
      description: "Emitted when there is an additional text delta. This is also the\
        \ first event emitted when the transcription starts. Only emitted when you\
        \ [create a transcription](/docs/api-reference/audio/create-transcription)\
        \ with the `Stream` parameter set to `true`."
      x-oaiMeta:
        name: Stream Event (transcript.text.delta)
        group: transcript
        example: |
          {
            "type": "transcript.text.delta",
            "delta": " wonderful"
          }
    TranscriptTextDoneEvent:
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `transcript.text.done`.
          enum:
          - transcript.text.done
          x-stainless-const: true
        text:
          type: string
          description: |
            The text that was transcribed.
        logprobs:
          type: array
          description: |
            The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
          items:
            $ref: "#/components/schemas/TranscriptTextDeltaEvent_logprobs"
      description: "Emitted when the transcription is complete. Contains the complete\
        \ transcription text. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription)\
        \ with the `Stream` parameter set to `true`."
      x-oaiMeta:
        name: Stream Event (transcript.text.done)
        group: transcript
        example: |
          {
            "type": "transcript.text.done",
            "text": "I see skies of blue and clouds of white, the bright blessed days, the dark sacred nights, and I think to myself, what a wonderful world."
          }
    TranscriptionInclude:
      type: string
      enum:
      - logprobs
    TranscriptionSegment:
      required:
      - avg_logprob
      - compression_ratio
      - end
      - id
      - no_speech_prob
      - seek
      - start
      - temperature
      - text
      - tokens
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the segment.
        seek:
          type: integer
          description: Seek offset of the segment.
        start:
          type: number
          description: Start time of the segment in seconds.
          format: float
        end:
          type: number
          description: End time of the segment in seconds.
          format: float
        text:
          type: string
          description: Text content of the segment.
        tokens:
          type: array
          description: Array of token IDs for the text content.
          items:
            type: integer
        temperature:
          type: number
          description: Temperature parameter used for generating the segment.
          format: float
        avg_logprob:
          type: number
          description: "Average logprob of the segment. If the value is lower than\
            \ -1, consider the logprobs failed."
          format: float
        compression_ratio:
          type: number
          description: "Compression ratio of the segment. If the value is greater\
            \ than 2.4, consider the compression failed."
          format: float
        no_speech_prob:
          type: number
          description: "Probability of no speech in the segment. If the value is higher\
            \ than 1.0 and the `avg_logprob` is below -1, consider this segment silent."
          format: float
    TranscriptionWord:
      required:
      - end
      - start
      - word
      type: object
      properties:
        word:
          type: string
          description: The text content of the word.
        start:
          type: number
          description: Start time of the word in seconds.
          format: float
        end:
          type: number
          description: End time of the word in seconds.
          format: float
    TruncationObject:
      title: Thread Truncation Controls
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "The truncation strategy to use for the thread. The default\
            \ is `auto`. If set to `last_messages`, the thread will be truncated to\
            \ the n most recent messages in the thread. When set to `auto`, messages\
            \ in the middle of the thread will be dropped to fit the context length\
            \ of the model, `max_prompt_tokens`."
          enum:
          - auto
          - last_messages
        last_messages:
          minimum: 1
          type: integer
          description: The number of most recent messages from the thread when constructing
            the context for the run.
          nullable: true
      description: Controls for how a thread will be truncated prior to the run. Use
        this to control the intial context window of the run.
    Type:
      title: Type
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a type action, this property\
            \ is \nalways set to `type`.\n"
          default: type
          enum:
          - type
          x-stainless-const: true
        text:
          type: string
          description: |
            The text to type.
      description: |
        An action to type in text.
    UpdateVectorStoreFileAttributesRequest:
      required:
      - attributes
      type: object
      properties:
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
      additionalProperties: false
      x-oaiMeta:
        name: Update vector store file attributes request
    UpdateVectorStoreRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the vector store.
          nullable: true
        expires_after:
          allOf:
          - $ref: "#/components/schemas/VectorStoreExpirationAfter"
          - nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
      additionalProperties: false
    Upload:
      title: Upload
      required:
      - bytes
      - created_at
      - expires_at
      - filename
      - id
      - purpose
      - status
      type: object
      properties:
        id:
          type: string
          description: "The Upload unique identifier, which can be referenced in API\
            \ endpoints."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload was created.
        filename:
          type: string
          description: The name of the file to be uploaded.
        bytes:
          type: integer
          description: The intended number of bytes to be uploaded.
        purpose:
          type: string
          description: "The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose)\
            \ for acceptable values."
        status:
          type: string
          description: The status of the Upload.
          enum:
          - pending
          - completed
          - cancelled
          - expired
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Upload will expire.
        object:
          type: string
          description: "The object type, which is always \"upload\"."
          enum:
          - upload
          x-stainless-const: true
        file:
          allOf:
          - $ref: "#/components/schemas/OpenAIFile"
          - description: The ready File object after the Upload is completed.
            nullable: true
      description: |
        The Upload object can accept byte chunks in the form of Parts.
      x-oaiMeta:
        name: The upload object
        example: |
          {
            "id": "upload_abc123",
            "object": "upload",
            "bytes": 2147483648,
            "created_at": 1719184911,
            "filename": "training_examples.jsonl",
            "purpose": "fine-tune",
            "status": "completed",
            "expires_at": 1719127296,
            "file": {
              "id": "file-xyz321",
              "object": "file",
              "bytes": 2147483648,
              "created_at": 1719186911,
              "filename": "training_examples.jsonl",
              "purpose": "fine-tune",
            }
          }
    UploadCertificateRequest:
      required:
      - content
      type: object
      properties:
        name:
          type: string
          description: An optional name for the certificate
        content:
          type: string
          description: The certificate content in PEM format
    UploadPart:
      title: UploadPart
      required:
      - created_at
      - id
      - object
      - upload_id
      type: object
      properties:
        id:
          type: string
          description: "The upload Part unique identifier, which can be referenced\
            \ in API endpoints."
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the Part was created.
        upload_id:
          type: string
          description: The ID of the Upload object that this Part was added to.
        object:
          type: string
          description: "The object type, which is always `upload.part`."
          enum:
          - upload.part
          x-stainless-const: true
      description: |
        The upload Part represents a chunk of bytes we can add to an Upload object.
      x-oaiMeta:
        name: The upload part object
        example: |
          {
              "id": "part_def456",
              "object": "upload.part",
              "created_at": 1719186911,
              "upload_id": "upload_abc123"
          }
    UsageAudioSpeechesResult:
      required:
      - characters
      - num_model_requests
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.audio_speeches.result
          x-stainless-const: true
        characters:
          type: integer
          description: The number of characters processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
      description: The aggregated audio speeches usage details of the specific time
        bucket.
      x-oaiMeta:
        name: Audio speeches usage object
        example: |
          {
              "object": "organization.usage.audio_speeches.result",
              "characters": 45,
              "num_model_requests": 1,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "tts-1"
          }
    UsageAudioTranscriptionsResult:
      required:
      - num_model_requests
      - object
      - seconds
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.audio_transcriptions.result
          x-stainless-const: true
        seconds:
          type: integer
          description: The number of seconds processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
      description: The aggregated audio transcriptions usage details of the specific
        time bucket.
      x-oaiMeta:
        name: Audio transcriptions usage object
        example: |
          {
              "object": "organization.usage.audio_transcriptions.result",
              "seconds": 10,
              "num_model_requests": 1,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "tts-1"
          }
    UsageCodeInterpreterSessionsResult:
      required:
      - object
      - sessions
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.code_interpreter_sessions.result
          x-stainless-const: true
        num_sessions:
          type: integer
          description: The number of code interpreter sessions.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
      description: The aggregated code interpreter sessions usage details of the specific
        time bucket.
      x-oaiMeta:
        name: Code interpreter sessions usage object
        example: |
          {
              "object": "organization.usage.code_interpreter_sessions.result",
              "num_sessions": 1,
              "project_id": "proj_abc"
          }
    UsageCompletionsResult:
      required:
      - input_tokens
      - num_model_requests
      - object
      - output_tokens
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.completions.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: "The aggregated number of text input tokens used, including\
            \ cached tokens. For customers subscribe to scale tier, this includes\
            \ scale tier tokens."
        input_cached_tokens:
          type: integer
          description: "The aggregated number of text input tokens that has been cached\
            \ from previous requests. For customers subscribe to scale tier, this\
            \ includes scale tier tokens."
        output_tokens:
          type: integer
          description: "The aggregated number of text output tokens used. For customers\
            \ subscribe to scale tier, this includes scale tier tokens."
        input_audio_tokens:
          type: integer
          description: "The aggregated number of audio input tokens used, including\
            \ cached tokens."
        output_audio_tokens:
          type: integer
          description: The aggregated number of audio output tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
        batch:
          type: boolean
          description: "When `group_by=batch`, this field tells whether the grouped\
            \ usage result is batch or not."
          nullable: true
      description: The aggregated completions usage details of the specific time bucket.
      x-oaiMeta:
        name: Completions usage object
        example: |
          {
              "object": "organization.usage.completions.result",
              "input_tokens": 5000,
              "output_tokens": 1000,
              "input_cached_tokens": 4000,
              "input_audio_tokens": 300,
              "output_audio_tokens": 200,
              "num_model_requests": 5,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "gpt-4o-mini-2024-07-18",
              "batch": false
          }
    UsageEmbeddingsResult:
      required:
      - input_tokens
      - num_model_requests
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.embeddings.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
      description: The aggregated embeddings usage details of the specific time bucket.
      x-oaiMeta:
        name: Embeddings usage object
        example: |
          {
              "object": "organization.usage.embeddings.result",
              "input_tokens": 20,
              "num_model_requests": 2,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "text-embedding-ada-002-v2"
          }
    UsageImagesResult:
      required:
      - images
      - num_model_requests
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.images.result
          x-stainless-const: true
        images:
          type: integer
          description: The number of images processed.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        source:
          type: string
          description: "When `group_by=source`, this field provides the source of\
            \ the grouped usage result, possible values are `image.generation`, `image.edit`,\
            \ `image.variation`."
          nullable: true
        size:
          type: string
          description: "When `group_by=size`, this field provides the image size of\
            \ the grouped usage result."
          nullable: true
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
      description: The aggregated images usage details of the specific time bucket.
      x-oaiMeta:
        name: Images usage object
        example: |
          {
              "object": "organization.usage.images.result",
              "images": 2,
              "num_model_requests": 2,
              "size": "1024x1024",
              "source": "image.generation",
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "dall-e-3"
          }
    UsageModerationsResult:
      required:
      - input_tokens
      - num_model_requests
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.moderations.result
          x-stainless-const: true
        input_tokens:
          type: integer
          description: The aggregated number of input tokens used.
        num_model_requests:
          type: integer
          description: The count of requests made to the model.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
        user_id:
          type: string
          description: "When `group_by=user_id`, this field provides the user ID of\
            \ the grouped usage result."
          nullable: true
        api_key_id:
          type: string
          description: "When `group_by=api_key_id`, this field provides the API key\
            \ ID of the grouped usage result."
          nullable: true
        model:
          type: string
          description: "When `group_by=model`, this field provides the model name\
            \ of the grouped usage result."
          nullable: true
      description: The aggregated moderations usage details of the specific time bucket.
      x-oaiMeta:
        name: Moderations usage object
        example: |
          {
              "object": "organization.usage.moderations.result",
              "input_tokens": 20,
              "num_model_requests": 2,
              "project_id": "proj_abc",
              "user_id": "user-abc",
              "api_key_id": "key_abc",
              "model": "text-moderation"
          }
    UsageResponse:
      required:
      - data
      - has_more
      - next_page
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - page
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/UsageTimeBucket"
        has_more:
          type: boolean
        next_page:
          type: string
    UsageTimeBucket:
      required:
      - end_time
      - object
      - result
      - start_time
      type: object
      properties:
        object:
          type: string
          enum:
          - bucket
          x-stainless-const: true
        start_time:
          type: integer
        end_time:
          type: integer
        result:
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/UsageCompletionsResult"
            - $ref: "#/components/schemas/UsageEmbeddingsResult"
            - $ref: "#/components/schemas/UsageModerationsResult"
            - $ref: "#/components/schemas/UsageImagesResult"
            - $ref: "#/components/schemas/UsageAudioSpeechesResult"
            - $ref: "#/components/schemas/UsageAudioTranscriptionsResult"
            - $ref: "#/components/schemas/UsageVectorStoresResult"
            - $ref: "#/components/schemas/UsageCodeInterpreterSessionsResult"
            - $ref: "#/components/schemas/CostsResult"
    UsageVectorStoresResult:
      required:
      - object
      - usage_bytes
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.usage.vector_stores.result
          x-stainless-const: true
        usage_bytes:
          type: integer
          description: The vector stores usage in bytes.
        project_id:
          type: string
          description: "When `group_by=project_id`, this field provides the project\
            \ ID of the grouped usage result."
          nullable: true
      description: The aggregated vector stores usage details of the specific time
        bucket.
      x-oaiMeta:
        name: Vector stores usage object
        example: |
          {
              "object": "organization.usage.vector_stores.result",
              "usage_bytes": 1024,
              "project_id": "proj_abc"
          }
    User:
      required:
      - added_at
      - email
      - id
      - name
      - object
      - role
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `organization.user`"
          enum:
          - organization.user
          x-stainless-const: true
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the user was added.
      description: Represents an individual `user` within an organization.
      x-oaiMeta:
        name: The user object
        example: |
          {
              "object": "organization.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    UserDeleteResponse:
      required:
      - deleted
      - id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - organization.user.deleted
          x-stainless-const: true
        id:
          type: string
        deleted:
          type: boolean
    UserListResponse:
      required:
      - data
      - first_id
      - has_more
      - last_id
      - object
      type: object
      properties:
        object:
          type: string
          enum:
          - list
          x-stainless-const: true
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    UserRoleUpdateRequest:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
    VectorStoreExpirationAfter:
      title: Vector store expiration policy
      required:
      - anchor
      - days
      type: object
      properties:
        anchor:
          type: string
          description: "Anchor timestamp after which the expiration policy applies.\
            \ Supported anchors: `last_active_at`."
          enum:
          - last_active_at
          x-stainless-const: true
        days:
          maximum: 365
          minimum: 1
          type: integer
          description: The number of days after the anchor time that the vector store
            will expire.
      description: The expiration policy for a vector store.
    VectorStoreFileAttributes:
      maxProperties: 16
      type: object
      additionalProperties:
        oneOf:
        - maxLength: 512
          type: string
        - type: number
        - type: boolean
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be \nuseful for storing additional information about the object in a\
        \ structured \nformat, and querying for objects via API or the dashboard.\
        \ Keys are strings \nwith a maximum length of 64 characters. Values are strings\
        \ with a maximum \nlength of 512 characters, booleans, or numbers.\n"
      nullable: true
      x-oaiTypeLabel: map
    VectorStoreFileBatchObject:
      title: Vector store file batch
      required:
      - created_at
      - file_counts
      - id
      - object
      - status
      - vector_store_id
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `vector_store.file_batch`."
          enum:
          - vector_store.files_batch
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store files
            batch was created.
        vector_store_id:
          type: string
          description: "The ID of the [vector store](/docs/api-reference/vector-stores/object)\
            \ that the [File](/docs/api-reference/files) is attached to."
        status:
          type: string
          description: "The status of the vector store files batch, which can be either\
            \ `in_progress`, `completed`, `cancelled` or `failed`."
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
        file_counts:
          $ref: "#/components/schemas/VectorStoreFileBatchObject_file_counts"
      description: A batch of files attached to a vector store.
      x-oaiMeta:
        name: The vector store files batch object
        beta: true
        example: |
          {
            "id": "vsfb_123",
            "object": "vector_store.files_batch",
            "created_at": 1698107661,
            "vector_store_id": "vs_abc123",
            "status": "completed",
            "file_counts": {
              "in_progress": 0,
              "completed": 100,
              "failed": 0,
              "cancelled": 0,
              "total": 100
            }
          }
    VectorStoreFileContentResponse:
      required:
      - data
      - has_more
      - next_page
      - object
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `vector_store.file_content.page`"
          enum:
          - vector_store.file_content.page
          x-stainless-const: true
        data:
          type: array
          description: Parsed content of the file.
          items:
            $ref: "#/components/schemas/VectorStoreFileContentResponse_data"
        has_more:
          type: boolean
          description: Indicates if there are more content pages to fetch.
        next_page:
          type: string
          description: "The token for the next page, if any."
          nullable: true
      description: Represents the parsed content of a vector store file.
    VectorStoreFileObject:
      title: Vector store files
      required:
      - created_at
      - id
      - last_error
      - object
      - status
      - usage_bytes
      - vector_store_id
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `vector_store.file`."
          enum:
          - vector_store.file
          x-stainless-const: true
        usage_bytes:
          type: integer
          description: The total vector store usage in bytes. Note that this may be
            different from the original file size.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store file
            was created.
        vector_store_id:
          type: string
          description: "The ID of the [vector store](/docs/api-reference/vector-stores/object)\
            \ that the [File](/docs/api-reference/files) is attached to."
        status:
          type: string
          description: "The status of the vector store file, which can be either `in_progress`,\
            \ `completed`, `cancelled`, or `failed`. The status `completed` indicates\
            \ that the vector store file is ready for use."
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
        last_error:
          $ref: "#/components/schemas/VectorStoreFileObject_last_error"
        chunking_strategy:
          type: object
          description: The strategy used to chunk the file.
          oneOf:
          - $ref: "#/components/schemas/StaticChunkingStrategyResponseParam"
          - $ref: "#/components/schemas/OtherChunkingStrategyResponseParam"
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
      description: A list of files attached to a vector store.
      x-oaiMeta:
        name: The vector store file object
        beta: true
        example: |
          {
            "id": "file-abc123",
            "object": "vector_store.file",
            "usage_bytes": 1234,
            "created_at": 1698107661,
            "vector_store_id": "vs_abc123",
            "status": "completed",
            "last_error": null,
            "chunking_strategy": {
              "type": "static",
              "static": {
                "max_chunk_size_tokens": 800,
                "chunk_overlap_tokens": 400
              }
            }
          }
    VectorStoreObject:
      title: Vector store
      required:
      - created_at
      - file_counts
      - id
      - last_active_at
      - metadata
      - name
      - object
      - status
      - usage_bytes
      type: object
      properties:
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints."
        object:
          type: string
          description: "The object type, which is always `vector_store`."
          enum:
          - vector_store
          x-stainless-const: true
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store was
            created.
        name:
          type: string
          description: The name of the vector store.
        usage_bytes:
          type: integer
          description: The total number of bytes used by the files in the vector store.
        file_counts:
          $ref: "#/components/schemas/VectorStoreObject_file_counts"
        status:
          type: string
          description: "The status of the vector store, which can be either `expired`,\
            \ `in_progress`, or `completed`. A status of `completed` indicates that\
            \ the vector store is ready for use."
          enum:
          - expired
          - in_progress
          - completed
        expires_after:
          $ref: "#/components/schemas/VectorStoreExpirationAfter"
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store will
            expire.
          nullable: true
        last_active_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store was
            last active.
          nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
      description: A vector store is a collection of processed files can be used by
        the `file_search` tool.
      x-oaiMeta:
        name: The vector store object
        example: |
          {
            "id": "vs_123",
            "object": "vector_store",
            "created_at": 1698107661,
            "usage_bytes": 123456,
            "last_active_at": 1698107661,
            "name": "my_vector_store",
            "status": "completed",
            "file_counts": {
              "in_progress": 0,
              "completed": 100,
              "cancelled": 0,
              "failed": 0,
              "total": 100
            },
            "last_used_at": 1698107661
          }
    VectorStoreSearchRequest:
      required:
      - query
      type: object
      properties:
        query:
          description: A query string for a search
          oneOf:
          - type: string
          - type: array
            items:
              minItems: 1
              type: string
              description: A list of queries to search for.
        rewrite_query:
          type: boolean
          description: Whether to rewrite the natural language query for vector search.
          default: false
        max_num_results:
          maximum: 50
          minimum: 1
          type: integer
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
          default: 10
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
          - $ref: "#/components/schemas/ComparisonFilter"
          - $ref: "#/components/schemas/CompoundFilter"
        ranking_options:
          $ref: "#/components/schemas/VectorStoreSearchRequest_ranking_options"
      additionalProperties: false
      x-oaiMeta:
        name: Vector store search request
    VectorStoreSearchResultContentObject:
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of content.
          enum:
          - text
        text:
          type: string
          description: The text content returned from search.
      additionalProperties: false
      x-oaiMeta:
        name: Vector store search result content object
    VectorStoreSearchResultItem:
      required:
      - attributes
      - content
      - file_id
      - filename
      - score
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the vector store file.
        filename:
          type: string
          description: The name of the vector store file.
        score:
          maximum: 1
          minimum: 0
          type: number
          description: The similarity score for the result.
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
        content:
          type: array
          description: Content chunks from the file.
          items:
            $ref: "#/components/schemas/VectorStoreSearchResultContentObject"
      additionalProperties: false
      x-oaiMeta:
        name: Vector store search result item
    VectorStoreSearchResultsPage:
      required:
      - data
      - has_more
      - next_page
      - object
      - search_query
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `vector_store.search_results.page`"
          enum:
          - vector_store.search_results.page
          x-stainless-const: true
        search_query:
          type: array
          items:
            minItems: 1
            type: string
            description: The query used for this search.
        data:
          type: array
          description: The list of search result items.
          items:
            $ref: "#/components/schemas/VectorStoreSearchResultItem"
        has_more:
          type: boolean
          description: Indicates if there are more results to fetch.
        next_page:
          type: string
          description: "The token for the next page, if any."
          nullable: true
      additionalProperties: false
      x-oaiMeta:
        name: Vector store search results page
    VoiceIdsShared:
      example: ash
      anyOf:
      - type: string
      - type: string
        enum:
        - alloy
        - ash
        - ballad
        - coral
        - echo
        - fable
        - onyx
        - nova
        - sage
        - shimmer
        - verse
    Wait:
      title: Wait
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: "Specifies the event type. For a wait action, this property\
            \ is \nalways set to `wait`.\n"
          default: wait
          enum:
          - wait
          x-stainless-const: true
      description: |
        A wait action.
    WebSearchContextSize:
      type: string
      description: "High level guidance for the amount of context window space to\
        \ use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the\
        \ default.\n"
      default: medium
      enum:
      - low
      - medium
      - high
    WebSearchLocation:
      title: Web search location
      type: object
      properties:
        country:
          type: string
          description: "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)\
            \ of the user,\ne.g. `US`.\n"
        region:
          type: string
          description: |
            Free text input for the region of the user, e.g. `California`.
        city:
          type: string
          description: |
            Free text input for the city of the user, e.g. `San Francisco`.
        timezone:
          type: string
          description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones)\
            \ \nof the user, e.g. `America/Los_Angeles`.\n"
      description: Approximate location parameters for the search.
    WebSearchToolCall:
      title: Web search tool call
      required:
      - id
      - status
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The unique ID of the web search tool call.
        type:
          type: string
          description: |
            The type of the web search tool call. Always `web_search_call`.
          enum:
          - web_search_call
          x-stainless-const: true
        status:
          type: string
          description: |
            The status of the web search tool call.
          enum:
          - in_progress
          - searching
          - completed
          - failed
      description: "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search)\
        \ for more information.\n"
    InputTextContent:
      title: Input text
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the input item. Always `input_text`.
          default: input_text
          enum:
          - input_text
          x-stainless-const: true
        text:
          type: string
          description: The text input to the model.
      description: A text input to the model.
    InputImageContent:
      title: Input image
      required:
      - detail
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the input item. Always `input_image`.
          default: input_image
          enum:
          - input_image
          x-stainless-const: true
        image_url:
          anyOf:
          - type: string
            description: The URL of the image to be sent to the model. A fully qualified
              URL or base64 encoded image in a data URL.
          - type: "null"
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: "null"
        detail:
          type: string
          description: "The detail level of the image to be sent to the model. One\
            \ of `high`, `low`, or `auto`. Defaults to `auto`."
          enum:
          - low
          - high
          - auto
      description: "An image input to the model. Learn about [image inputs](/docs/guides/vision)."
    InputFileContent:
      title: Input file
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the input item. Always `input_file`.
          default: input_file
          enum:
          - input_file
          x-stainless-const: true
        file_id:
          anyOf:
          - type: string
            description: The ID of the file to be sent to the model.
          - type: "null"
        filename:
          type: string
          description: The name of the file to be sent to the model.
        file_data:
          type: string
          description: |
            The content of the file to be sent to the model.
      description: A file input to the model.
    RankingOptions:
      type: object
      properties:
        ranker:
          type: string
          description: The ranker to use for the file search.
          enum:
          - auto
          - default-2024-11-15
        score_threshold:
          type: number
          description: "The score threshold for the file search, a number between\
            \ 0 and 1. Numbers closer to 1 will attempt to return only the most relevant\
            \ results, but may return fewer results."
    Filters:
      anyOf:
      - $ref: "#/components/schemas/ComparisonFilter"
      - $ref: "#/components/schemas/CompoundFilter"
    FileSearchTool:
      title: File search
      required:
      - type
      - vector_store_ids
      type: object
      properties:
        type:
          type: string
          description: The type of the file search tool. Always `file_search`.
          default: file_search
          enum:
          - file_search
          x-stainless-const: true
        vector_store_ids:
          type: array
          description: The IDs of the vector stores to search.
          items:
            type: string
        max_num_results:
          type: integer
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
        ranking_options:
          $ref: "#/components/schemas/RankingOptions"
        filters:
          anyOf:
          - $ref: "#/components/schemas/Filters"
          - type: "null"
      description: "A tool that searches for relevant content from uploaded files.\
        \ Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search)."
    FunctionTool:
      title: Function
      required:
      - name
      - parameters
      - strict
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the function tool. Always `function`.
          default: function
          enum:
          - function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
        description:
          anyOf:
          - type: string
            description: A description of the function. Used by the model to determine
              whether or not to call the function.
          - type: "null"
        parameters:
          anyOf:
          - type: object
            additionalProperties: {}
            description: A JSON schema object describing the parameters of the function.
          - type: "null"
        strict:
          anyOf:
          - type: boolean
            description: Whether to enforce strict parameter validation. Default `true`.
          - type: "null"
      description: "Defines a function in your own code the model can choose to call.\
        \ Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling)."
    ApproximateLocation:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of location approximation. Always `approximate`.
          default: approximate
          enum:
          - approximate
          x-stainless-const: true
        country:
          anyOf:
          - type: string
            description: "The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)\
              \ of the user, e.g. `US`."
          - type: "null"
        region:
          anyOf:
          - type: string
            description: "Free text input for the region of the user, e.g. `California`."
          - type: "null"
        city:
          anyOf:
          - type: string
            description: "Free text input for the city of the user, e.g. `San Francisco`."
          - type: "null"
        timezone:
          anyOf:
          - type: string
            description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones)\
              \ of the user, e.g. `America/Los_Angeles`."
          - type: "null"
    WebSearchPreviewTool:
      title: Web search preview
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the web search tool. One of `web_search_preview`
            or `web_search_preview_2025_03_11`.
          default: web_search_preview
          enum:
          - web_search_preview
          - web_search_preview_2025_03_11
          x-stainless-const: true
        user_location:
          anyOf:
          - $ref: "#/components/schemas/ApproximateLocation"
          - type: "null"
        search_context_size:
          type: string
          description: "High level guidance for the amount of context window space\
            \ to use for the search. One of `low`, `medium`, or `high`. `medium` is\
            \ the default."
          enum:
          - low
          - medium
          - high
      description: "This tool searches the web for relevant results to use in a response.\
        \ Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search)."
    ComputerUsePreviewTool:
      title: Computer use preview
      required:
      - display_height
      - display_width
      - environment
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the computer use tool. Always `computer_use_preview`.
          default: computer_use_preview
          enum:
          - computer_use_preview
          x-stainless-const: true
        environment:
          type: string
          description: The type of computer environment to control.
          enum:
          - windows
          - mac
          - linux
          - ubuntu
          - browser
        display_width:
          type: integer
          description: The width of the computer display.
        display_height:
          type: integer
          description: The height of the computer display.
      description: "A tool that controls a virtual computer. Learn more about the\
        \ [computer tool](https://platform.openai.com/docs/guides/tools-computer-use)."
    Tool:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/FileSearchTool"
      - $ref: "#/components/schemas/FunctionTool"
      - $ref: "#/components/schemas/WebSearchPreviewTool"
      - $ref: "#/components/schemas/ComputerUsePreviewTool"
    FileCitationBody:
      title: File citation
      required:
      - file_id
      - index
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the file citation. Always `file_citation`.
          default: file_citation
          enum:
          - file_citation
          x-stainless-const: true
        file_id:
          type: string
          description: The ID of the file.
        index:
          type: integer
          description: The index of the file in the list of files.
      description: A citation to a file.
    UrlCitationBody:
      title: URL citation
      required:
      - end_index
      - start_index
      - title
      - type
      - url
      type: object
      properties:
        type:
          type: string
          description: The type of the URL citation. Always `url_citation`.
          default: url_citation
          enum:
          - url_citation
          x-stainless-const: true
        url:
          type: string
          description: The URL of the web resource.
        start_index:
          type: integer
          description: The index of the first character of the URL citation in the
            message.
        end_index:
          type: integer
          description: The index of the last character of the URL citation in the
            message.
        title:
          type: string
          description: The title of the web resource.
      description: A citation for a web resource used to generate a model response.
    Annotation:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/FileCitationBody"
      - $ref: "#/components/schemas/UrlCitationBody"
      - $ref: "#/components/schemas/FilePath"
    OutputTextContent:
      title: Output text
      required:
      - annotations
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the output text. Always `output_text`.
          default: output_text
          enum:
          - output_text
          x-stainless-const: true
        text:
          type: string
          description: The text output from the model.
        annotations:
          type: array
          description: The annotations of the text output.
          items:
            $ref: "#/components/schemas/Annotation"
      description: A text output from the model.
    RefusalContent:
      title: Refusal
      required:
      - refusal
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the refusal. Always `refusal`.
          default: refusal
          enum:
          - refusal
          x-stainless-const: true
        refusal:
          type: string
          description: The refusal explanationfrom the model.
      description: A refusal from the model.
    ComputerCallSafetyCheckParam:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The ID of the pending safety check.
        code:
          anyOf:
          - type: string
            description: The type of the pending safety check.
          - type: "null"
        message:
          anyOf:
          - type: string
            description: Details about the pending safety check.
          - type: "null"
      description: A pending safety check for the computer call.
    ComputerCallOutputItemParam:
      title: Computer tool call output
      required:
      - call_id
      - output
      - type
      type: object
      properties:
        id:
          anyOf:
          - type: string
            description: The ID of the computer tool call output.
          - type: "null"
        call_id:
          maxLength: 64
          minLength: 1
          type: string
          description: The ID of the computer tool call that produced the output.
        type:
          type: string
          description: The type of the computer tool call output. Always `computer_call_output`.
          default: computer_call_output
          enum:
          - computer_call_output
          x-stainless-const: true
        output:
          $ref: "#/components/schemas/ComputerScreenshotImage"
        acknowledged_safety_checks:
          anyOf:
          - type: array
            description: The safety checks reported by the API that have been acknowledged
              by the developer.
            items:
              $ref: "#/components/schemas/ComputerCallSafetyCheckParam"
          - type: "null"
        status:
          anyOf:
          - type: string
            description: "The status of the message input. One of `in_progress`, `completed`,\
              \ or `incomplete`. Populated when input items are returned via API."
            enum:
            - in_progress
            - completed
            - incomplete
          - type: "null"
      description: The output of a computer tool call.
    FunctionCallOutputItemParam:
      title: Function tool call output
      required:
      - call_id
      - output
      - type
      type: object
      properties:
        id:
          anyOf:
          - type: string
            description: The unique ID of the function tool call output. Populated
              when this item is returned via API.
          - type: "null"
        call_id:
          maxLength: 64
          minLength: 1
          type: string
          description: The unique ID of the function tool call generated by the model.
        type:
          type: string
          description: The type of the function tool call output. Always `function_call_output`.
          default: function_call_output
          enum:
          - function_call_output
          x-stainless-const: true
        output:
          maxLength: 10485760
          type: string
          description: A JSON string of the output of the function tool call.
        status:
          anyOf:
          - type: string
            description: "The status of the item. One of `in_progress`, `completed`,\
              \ or `incomplete`. Populated when items are returned via API."
            enum:
            - in_progress
            - completed
            - incomplete
          - type: "null"
      description: The output of a function tool call.
    ItemReferenceParam:
      title: Item reference
      required:
      - id
      type: object
      properties:
        type:
          anyOf:
          - type: string
            description: The type of item to reference. Always `item_reference`.
            default: item_reference
            enum:
            - item_reference
            x-stainless-const: true
          - type: "null"
        id:
          type: string
          description: The ID of the item to reference.
      description: An internal identifier for an item to reference.
    AdminApiKey_owner:
      type: object
      properties:
        type:
          type: string
          description: Always `user`
          example: user
        object:
          type: string
          description: "The object type, which is always organization.user"
          example: organization.user
        id:
          type: string
          description: "The identifier, which can be referenced in API endpoints"
          example: sa_456
        name:
          type: string
          description: The name of the user
          example: My Service Account
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the user was created
          format: int64
          example: 1711471533
        role:
          type: string
          description: Always `owner`
          example: owner
    AssistantObject_tool_resources_code_interpreter:
      type: object
      properties:
        file_ids:
          maxItems: 20
          type: array
          description: |
            A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
          items:
            type: string
          default: []
    AssistantObject_tool_resources_file_search:
      type: object
      properties:
        vector_store_ids:
          maxItems: 1
          type: array
          description: |
            The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          items:
            type: string
    AssistantObject_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/AssistantObject_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/AssistantObject_tool_resources_file_search"
      description: |
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    AssistantToolsFileSearch_file_search:
      type: object
      properties:
        max_num_results:
          maximum: 50
          minimum: 1
          type: integer
          description: |
            The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.

            Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
        ranking_options:
          $ref: "#/components/schemas/FileSearchRankingOptions"
      description: Overrides for the file search tool.
    AssistantsNamedToolChoice_function:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
    AuditLog_project:
      type: object
      properties:
        id:
          type: string
          description: The project ID.
        name:
          type: string
          description: The project title.
      description: The project that the action was scoped to. Absent for actions not
        scoped to projects.
    AuditLog_api_key.created_data:
      type: object
      properties:
        scopes:
          type: array
          description: "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"\
            ]`"
          items:
            type: string
      description: The payload used to create the API key.
    AuditLog_api_key.created:
      type: object
      properties:
        id:
          type: string
          description: The tracking ID of the API key.
        data:
          $ref: "#/components/schemas/AuditLog_api_key.created_data"
      description: The details for events with this `type`.
    AuditLog_api_key.updated_changes_requested:
      type: object
      properties:
        scopes:
          type: array
          description: "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"\
            ]`"
          items:
            type: string
      description: The payload used to update the API key.
    AuditLog_api_key.updated:
      type: object
      properties:
        id:
          type: string
          description: The tracking ID of the API key.
        changes_requested:
          $ref: "#/components/schemas/AuditLog_api_key.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_api_key.deleted:
      type: object
      properties:
        id:
          type: string
          description: The tracking ID of the API key.
      description: The details for events with this `type`.
    AuditLog_checkpoint_permission.created_data:
      type: object
      properties:
        project_id:
          type: string
          description: The ID of the project that the checkpoint permission was created
            for.
        fine_tuned_model_checkpoint:
          type: string
          description: The ID of the fine-tuned model checkpoint.
      description: The payload used to create the checkpoint permission.
    AuditLog_checkpoint_permission.created:
      type: object
      properties:
        id:
          type: string
          description: The ID of the checkpoint permission.
        data:
          $ref: "#/components/schemas/AuditLog_checkpoint_permission.created_data"
      description: The project and fine-tuned model checkpoint that the checkpoint
        permission was created for.
    AuditLog_checkpoint_permission.deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the checkpoint permission.
      description: The details for events with this `type`.
    AuditLog_invite.sent_data:
      type: object
      properties:
        email:
          type: string
          description: The email invited to the organization.
        role:
          type: string
          description: The role the email was invited to be. Is either `owner` or
            `member`.
      description: The payload used to create the invite.
    AuditLog_invite.sent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the invite.
        data:
          $ref: "#/components/schemas/AuditLog_invite.sent_data"
      description: The details for events with this `type`.
    AuditLog_invite.accepted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the invite.
      description: The details for events with this `type`.
    AuditLog_login.failed:
      type: object
      properties:
        error_code:
          type: string
          description: The error code of the failure.
        error_message:
          type: string
          description: The error message of the failure.
      description: The details for events with this `type`.
    AuditLog_organization.updated_changes_requested_settings:
      type: object
      properties:
        threads_ui_visibility:
          type: string
          description: "Visibility of the threads page which shows messages created\
            \ with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`,\
            \ or `NONE`."
        usage_dashboard_visibility:
          type: string
          description: Visibility of the usage dashboard which shows activity and
            costs for your organization. One of `ANY_ROLE` or `OWNERS`.
    AuditLog_organization.updated_changes_requested:
      type: object
      properties:
        title:
          type: string
          description: The organization title.
        description:
          type: string
          description: The organization description.
        name:
          type: string
          description: The organization name.
        settings:
          $ref: "#/components/schemas/AuditLog_organization.updated_changes_requested_settings"
      description: The payload used to update the organization settings.
    AuditLog_organization.updated:
      type: object
      properties:
        id:
          type: string
          description: The organization ID.
        changes_requested:
          $ref: "#/components/schemas/AuditLog_organization.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_project.created_data:
      type: object
      properties:
        name:
          type: string
          description: The project name.
        title:
          type: string
          description: The title of the project as seen on the dashboard.
      description: The payload used to create the project.
    AuditLog_project.created:
      type: object
      properties:
        id:
          type: string
          description: The project ID.
        data:
          $ref: "#/components/schemas/AuditLog_project.created_data"
      description: The details for events with this `type`.
    AuditLog_project.updated_changes_requested:
      type: object
      properties:
        title:
          type: string
          description: The title of the project as seen on the dashboard.
      description: The payload used to update the project.
    AuditLog_project.updated:
      type: object
      properties:
        id:
          type: string
          description: The project ID.
        changes_requested:
          $ref: "#/components/schemas/AuditLog_project.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_project.archived:
      type: object
      properties:
        id:
          type: string
          description: The project ID.
      description: The details for events with this `type`.
    AuditLog_rate_limit.updated_changes_requested:
      type: object
      properties:
        max_requests_per_1_minute:
          type: integer
          description: The maximum requests per minute.
        max_tokens_per_1_minute:
          type: integer
          description: The maximum tokens per minute.
        max_images_per_1_minute:
          type: integer
          description: The maximum images per minute. Only relevant for certain models.
        max_audio_megabytes_per_1_minute:
          type: integer
          description: The maximum audio megabytes per minute. Only relevant for certain
            models.
        max_requests_per_1_day:
          type: integer
          description: The maximum requests per day. Only relevant for certain models.
        batch_1_day_max_input_tokens:
          type: integer
          description: The maximum batch input tokens per day. Only relevant for certain
            models.
      description: The payload used to update the rate limits.
    AuditLog_rate_limit.updated:
      type: object
      properties:
        id:
          type: string
          description: The rate limit ID
        changes_requested:
          $ref: "#/components/schemas/AuditLog_rate_limit.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_rate_limit.deleted:
      type: object
      properties:
        id:
          type: string
          description: The rate limit ID
      description: The details for events with this `type`.
    AuditLog_service_account.created_data:
      type: object
      properties:
        role:
          type: string
          description: The role of the service account. Is either `owner` or `member`.
      description: The payload used to create the service account.
    AuditLog_service_account.created:
      type: object
      properties:
        id:
          type: string
          description: The service account ID.
        data:
          $ref: "#/components/schemas/AuditLog_service_account.created_data"
      description: The details for events with this `type`.
    AuditLog_service_account.updated_changes_requested:
      type: object
      properties:
        role:
          type: string
          description: The role of the service account. Is either `owner` or `member`.
      description: The payload used to updated the service account.
    AuditLog_service_account.updated:
      type: object
      properties:
        id:
          type: string
          description: The service account ID.
        changes_requested:
          $ref: "#/components/schemas/AuditLog_service_account.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_service_account.deleted:
      type: object
      properties:
        id:
          type: string
          description: The service account ID.
      description: The details for events with this `type`.
    AuditLog_user.added_data:
      type: object
      properties:
        role:
          type: string
          description: The role of the user. Is either `owner` or `member`.
      description: The payload used to add the user to the project.
    AuditLog_user.added:
      type: object
      properties:
        id:
          type: string
          description: The user ID.
        data:
          $ref: "#/components/schemas/AuditLog_user.added_data"
      description: The details for events with this `type`.
    AuditLog_user.updated_changes_requested:
      type: object
      properties:
        role:
          type: string
          description: The role of the user. Is either `owner` or `member`.
      description: The payload used to update the user.
    AuditLog_user.updated:
      type: object
      properties:
        id:
          type: string
          description: The project ID.
        changes_requested:
          $ref: "#/components/schemas/AuditLog_user.updated_changes_requested"
      description: The details for events with this `type`.
    AuditLog_user.deleted:
      type: object
      properties:
        id:
          type: string
          description: The user ID.
      description: The details for events with this `type`.
    AuditLog_certificate.created:
      type: object
      properties:
        id:
          type: string
          description: The certificate ID.
        name:
          type: string
          description: The name of the certificate.
      description: The details for events with this `type`.
    AuditLog_certificate.deleted:
      type: object
      properties:
        id:
          type: string
          description: The certificate ID.
        name:
          type: string
          description: The name of the certificate.
        certificate:
          type: string
          description: The certificate content in PEM format.
      description: The details for events with this `type`.
    AuditLog_certificates.activated_certificates:
      type: object
      properties:
        id:
          type: string
          description: The certificate ID.
        name:
          type: string
          description: The name of the certificate.
    AuditLog_certificates.activated:
      type: object
      properties:
        certificates:
          type: array
          items:
            $ref: AuditLog_certificates.activated_certificates
      description: The details for events with this `type`.
    Batch_errors_data:
      type: object
      properties:
        code:
          type: string
          description: An error code identifying the error type.
        message:
          type: string
          description: A human-readable message providing more details about the error.
        param:
          type: string
          description: "The name of the parameter that caused the error, if applicable."
          nullable: true
        line:
          type: integer
          description: "The line number of the input file where the error occurred,\
            \ if applicable."
          nullable: true
    Batch_errors:
      type: object
      properties:
        object:
          type: string
          description: "The object type, which is always `list`."
        data:
          type: array
          items:
            $ref: "#/components/schemas/Batch_errors_data"
    Batch_request_counts:
      required:
      - completed
      - failed
      - total
      type: object
      properties:
        total:
          type: integer
          description: Total number of requests in the batch.
        completed:
          type: integer
          description: Number of requests that have been completed successfully.
        failed:
          type: integer
          description: Number of requests that have failed.
      description: The request counts for different statuses within the batch.
    BatchRequestOutput_response:
      type: object
      properties:
        status_code:
          type: integer
          description: The HTTP status code of the response
        request_id:
          type: string
          description: An unique identifier for the OpenAI API request. Please include
            this request ID when contacting support.
        body:
          type: object
          description: The JSON body of the response
          x-oaiTypeLabel: map
      nullable: true
    BatchRequestOutput_error:
      type: object
      properties:
        code:
          type: string
          description: A machine-readable error code.
        message:
          type: string
          description: A human-readable error message.
      description: "For requests that failed with a non-HTTP error, this will contain\
        \ more information on the cause of the failure."
      nullable: true
    Certificate_certificate_details:
      type: object
      properties:
        valid_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the certificate becomes
            valid.
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the certificate expires.
        content:
          type: string
          description: The content of the certificate in PEM format.
    ChatCompletionMessageToolCall_function:
      required:
      - arguments
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
      description: The function that the model called.
      example:
        name: name
        arguments: arguments
    ChatCompletionMessageToolCallChunk_function:
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
    ChatCompletionRequestAssistantMessage_audio:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: |
            Unique identifier for a previous audio response from the model.
      description: "Data about a previous audio response from the model. \n[Learn\
        \ more](/docs/guides/audio).\n"
      nullable: true
    ChatCompletionRequestAssistantMessage_function_call:
      required:
      - arguments
      - name
      type: object
      properties:
        arguments:
          type: string
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
        name:
          type: string
          description: The name of the function to call.
      description: "Deprecated and replaced by `tool_calls`. The name and arguments\
        \ of a function that should be called, as generated by the model."
      nullable: true
      deprecated: true
    ChatCompletionRequestMessageContentPartAudio_input_audio:
      required:
      - data
      - format
      type: object
      properties:
        data:
          type: string
          description: Base64 encoded audio data.
        format:
          type: string
          description: |
            The format of the encoded audio data. Currently supports "wav" and "mp3".
          enum:
          - wav
          - mp3
    ChatCompletionRequestMessageContentPartFile_file:
      type: object
      properties:
        filename:
          type: string
          description: "The name of the file, used when passing the file to the model\
            \ as a \nstring.\n"
        file_data:
          type: string
          description: "The base64 encoded file data, used when passing the file to\
            \ the model \nas a string.\n"
        file_id:
          type: string
          description: |
            The ID of an uploaded file to use as input.
    ChatCompletionRequestMessageContentPartImage_image_url:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: Either a URL of the image or the base64 encoded image data.
          format: uri
        detail:
          type: string
          description: "Specifies the detail level of the image. Learn more in the\
            \ [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding)."
          default: auto
          enum:
          - auto
          - low
          - high
    ChatCompletionResponseMessage_url_citation:
      required:
      - end_index
      - start_index
      - title
      - url
      type: object
      properties:
        end_index:
          type: integer
          description: The index of the last character of the URL citation in the
            message.
        start_index:
          type: integer
          description: The index of the first character of the URL citation in the
            message.
        url:
          type: string
          description: The URL of the web resource.
        title:
          type: string
          description: The title of the web resource.
      description: A URL citation when using web search.
      example:
        start_index: 1
        end_index: 6
        title: title
        url: url
    ChatCompletionResponseMessage_annotations:
      required:
      - type
      - url_citation
      type: object
      properties:
        type:
          type: string
          description: The type of the URL citation. Always `url_citation`.
          enum:
          - url_citation
          x-stainless-const: true
        url_citation:
          $ref: "#/components/schemas/ChatCompletionResponseMessage_url_citation"
      description: |
        A URL citation when using web search.
      example:
        type: url_citation
        url_citation:
          start_index: 1
          end_index: 6
          title: title
          url: url
    ChatCompletionResponseMessage_function_call:
      required:
      - arguments
      - name
      type: object
      properties:
        arguments:
          type: string
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
        name:
          type: string
          description: The name of the function to call.
      description: "Deprecated and replaced by `tool_calls`. The name and arguments\
        \ of a function that should be called, as generated by the model."
      example:
        name: name
        arguments: arguments
      deprecated: true
    ChatCompletionResponseMessage_audio:
      required:
      - data
      - expires_at
      - id
      - transcript
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for this audio response.
        expires_at:
          type: integer
          description: |
            The Unix timestamp (in seconds) for when this audio response will
            no longer be accessible on the server for use in multi-turn
            conversations.
        data:
          type: string
          description: |
            Base64 encoded audio bytes generated by the model, in the format
            specified in the request.
        transcript:
          type: string
          description: Transcript of the audio generated by the model.
      description: |
        If the audio output modality is requested, this object contains data
        about the audio response from the model. [Learn more](/docs/guides/audio).
      nullable: true
      example:
        expires_at: 5
        transcript: transcript
        data: data
        id: id
    ChatCompletionStreamResponseDelta_function_call:
      type: object
      properties:
        arguments:
          type: string
          description: "The arguments to call the function with, as generated by the\
            \ model in JSON format. Note that the model does not always generate valid\
            \ JSON, and may hallucinate parameters not defined by your function schema.\
            \ Validate the arguments in your code before calling your function."
        name:
          type: string
          description: The name of the function to call.
      description: "Deprecated and replaced by `tool_calls`. The name and arguments\
        \ of a function that should be called, as generated by the model."
      deprecated: true
    ChatCompletionTokenLogprob_top_logprobs:
      required:
      - bytes
      - logprob
      - token
      type: object
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          description: "The log probability of this token, if it is within the top\
            \ 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify\
            \ that the token is very unlikely."
        bytes:
          type: array
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          nullable: true
          items:
            type: integer
      example:
        logprob: 7.061401241503109
        bytes:
        - 9
        - 9
        token: token
    CodeInterpreterFileOutput_files:
      required:
      - file_id
      - mime_type
      type: object
      properties:
        mime_type:
          type: string
          description: |
            The MIME type of the file.
        file_id:
          type: string
          description: |
            The ID of the file.
    CompletionUsage_completion_tokens_details:
      type: object
      properties:
        accepted_prediction_tokens:
          type: integer
          description: |
            When using Predicted Outputs, the number of tokens in the
            prediction that appeared in the completion.
          default: 0
        audio_tokens:
          type: integer
          description: Audio input tokens generated by the model.
          default: 0
        reasoning_tokens:
          type: integer
          description: Tokens generated by the model for reasoning.
          default: 0
        rejected_prediction_tokens:
          type: integer
          description: |
            When using Predicted Outputs, the number of tokens in the
            prediction that did not appear in the completion. However, like
            reasoning tokens, these tokens are still counted in the total
            completion tokens for purposes of billing, output, and context window
            limits.
          default: 0
      description: Breakdown of tokens used in a completion.
      example:
        accepted_prediction_tokens: 1
        audio_tokens: 1
        reasoning_tokens: 1
        rejected_prediction_tokens: 6
    CompletionUsage_prompt_tokens_details:
      type: object
      properties:
        audio_tokens:
          type: integer
          description: Audio input tokens present in the prompt.
          default: 0
        cached_tokens:
          type: integer
          description: Cached tokens present in the prompt.
          default: 0
      description: Breakdown of tokens used in the prompt.
      example:
        audio_tokens: 7
        cached_tokens: 1
    CostsResult_amount:
      type: object
      properties:
        value:
          type: number
          description: The numeric value of the cost.
        currency:
          type: string
          description: Lowercase ISO-4217 currency e.g. "usd"
      description: The monetary value in its associated currency.
    CreateAssistantRequest_tool_resources_code_interpreter:
      type: object
      properties:
        file_ids:
          maxItems: 20
          type: array
          description: |
            A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
          items:
            type: string
          default: []
    CreateAssistantRequest_tool_resources_file_search_vector_stores:
      type: object
      properties:
        file_ids:
          maxItems: 10000
          type: array
          description: |
            A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
          items:
            type: string
        chunking_strategy:
          type: object
          description: "The chunking strategy used to chunk the file(s). If not set,\
            \ will use the `auto` strategy."
          oneOf:
          - title: Auto Chunking Strategy
            required:
            - type
            type: object
            properties:
              type:
                type: string
                description: Always `auto`.
                enum:
                - auto
                x-stainless-const: true
            additionalProperties: false
            description: The default strategy. This strategy currently uses a `max_chunk_size_tokens`
              of `800` and `chunk_overlap_tokens` of `400`.
          - title: Static Chunking Strategy
            required:
            - static
            - type
            type: object
            properties:
              type:
                type: string
                description: Always `static`.
                enum:
                - static
                x-stainless-const: true
              static:
                required:
                - chunk_overlap_tokens
                - max_chunk_size_tokens
                type: object
                properties:
                  max_chunk_size_tokens:
                    maximum: 4096
                    minimum: 100
                    type: integer
                    description: The maximum number of tokens in each chunk. The default
                      value is `800`. The minimum value is `100` and the maximum value
                      is `4096`.
                  chunk_overlap_tokens:
                    type: integer
                    description: |
                      The number of tokens that overlap between chunks. The default value is `400`.

                      Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                additionalProperties: false
            additionalProperties: false
        metadata:
          $ref: "#/components/schemas/Metadata"
    CreateAssistantRequest_tool_resources_file_search:
      type: object
      properties:
        vector_store_ids:
          maxItems: 1
          type: array
          description: |
            The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          items:
            type: string
        vector_stores:
          maxItems: 1
          type: array
          description: |
            A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          items:
            $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_file_search_vector_stores"
      oneOf:
      - required:
        - vector_store_ids
      - required:
        - vector_stores
    CreateAssistantRequest_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_file_search"
      description: |
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    Web search_user_location:
      required:
      - approximate
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of location approximation. Always `approximate`.
          enum:
          - approximate
          x-stainless-const: true
        approximate:
          $ref: "#/components/schemas/WebSearchLocation"
      description: |
        Approximate location parameters for the search.
      nullable: true
    Web search:
      title: Web search
      type: object
      properties:
        user_location:
          $ref: "#/components/schemas/Web search_user_location"
        search_context_size:
          $ref: "#/components/schemas/WebSearchContextSize"
      description: |
        This tool searches the web for relevant results to use in a response.
        Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).
    CreateChatCompletionRequest_audio:
      required:
      - format
      - voice
      type: object
      properties:
        voice:
          $ref: "#/components/schemas/VoiceIdsShared"
        format:
          type: string
          description: |
            Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
            `opus`, or `pcm16`.
          enum:
          - wav
          - aac
          - mp3
          - flac
          - opus
          - pcm16
      description: |
        Parameters for audio output. Required when audio output is requested with
        `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
      nullable: true
    CreateChatCompletionResponse_logprobs:
      required:
      - content
      - refusal
      type: object
      properties:
        content:
          type: array
          description: A list of message content tokens with log probability information.
          nullable: true
          items:
            $ref: "#/components/schemas/ChatCompletionTokenLogprob"
        refusal:
          type: array
          description: A list of message refusal tokens with log probability information.
          nullable: true
          items:
            $ref: "#/components/schemas/ChatCompletionTokenLogprob"
      description: Log probability information for the choice.
      nullable: true
      example:
        refusal:
        - null
        - null
        content:
        - top_logprobs:
          - logprob: 7.061401241503109
            bytes:
            - 9
            - 9
            token: token
          - logprob: 7.061401241503109
            bytes:
            - 9
            - 9
            token: token
          logprob: 5.637376656633329
          bytes:
          - 2
          - 2
          token: token
        - top_logprobs:
          - logprob: 7.061401241503109
            bytes:
            - 9
            - 9
            token: token
          - logprob: 7.061401241503109
            bytes:
            - 9
            - 9
            token: token
          logprob: 5.637376656633329
          bytes:
          - 2
          - 2
          token: token
    CreateChatCompletionResponse_choices:
      required:
      - finish_reason
      - index
      - logprobs
      - message
      type: object
      properties:
        finish_reason:
          type: string
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            `content_filter` if content was omitted due to a flag from our content filters,
            `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
          enum:
          - stop
          - length
          - tool_calls
          - content_filter
          - function_call
        index:
          type: integer
          description: The index of the choice in the list of choices.
        message:
          $ref: "#/components/schemas/ChatCompletionResponseMessage"
        logprobs:
          $ref: "#/components/schemas/CreateChatCompletionResponse_logprobs"
      example:
        finish_reason: stop
        index: 0
        message:
          role: assistant
          function_call:
            name: name
            arguments: arguments
          refusal: refusal
          annotations:
          - type: url_citation
            url_citation:
              start_index: 1
              end_index: 6
              title: title
              url: url
          - type: url_citation
            url_citation:
              start_index: 1
              end_index: 6
              title: title
              url: url
          tool_calls:
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
          - function:
              name: name
              arguments: arguments
            id: id
            type: function
          audio:
            expires_at: 5
            transcript: transcript
            data: data
            id: id
          content: content
        logprobs:
          refusal:
          - null
          - null
          content:
          - top_logprobs:
            - logprob: 7.061401241503109
              bytes:
              - 9
              - 9
              token: token
            - logprob: 7.061401241503109
              bytes:
              - 9
              - 9
              token: token
            logprob: 5.637376656633329
            bytes:
            - 2
            - 2
            token: token
          - top_logprobs:
            - logprob: 7.061401241503109
              bytes:
              - 9
              - 9
              token: token
            - logprob: 7.061401241503109
              bytes:
              - 9
              - 9
              token: token
            logprob: 5.637376656633329
            bytes:
            - 2
            - 2
            token: token
    CreateChatCompletionStreamResponse_choices:
      required:
      - delta
      - finish_reason
      - index
      type: object
      properties:
        delta:
          $ref: "#/components/schemas/ChatCompletionStreamResponseDelta"
        logprobs:
          $ref: "#/components/schemas/CreateChatCompletionResponse_logprobs"
        finish_reason:
          type: string
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            `content_filter` if content was omitted due to a flag from our content filters,
            `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
          nullable: true
          enum:
          - stop
          - length
          - tool_calls
          - content_filter
          - function_call
        index:
          type: integer
          description: The index of the choice in the list of choices.
    CreateCompletionResponse_logprobs:
      type: object
      properties:
        text_offset:
          type: array
          items:
            type: integer
        token_logprobs:
          type: array
          items:
            type: number
        tokens:
          type: array
          items:
            type: string
        top_logprobs:
          type: array
          items:
            type: object
            additionalProperties:
              type: number
      nullable: true
    CreateCompletionResponse_choices:
      required:
      - finish_reason
      - index
      - logprobs
      - text
      type: object
      properties:
        finish_reason:
          type: string
          description: |
            The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
            `length` if the maximum number of tokens specified in the request was reached,
            or `content_filter` if content was omitted due to a flag from our content filters.
          enum:
          - stop
          - length
          - content_filter
        index:
          type: integer
        logprobs:
          $ref: "#/components/schemas/CreateCompletionResponse_logprobs"
        text:
          type: string
    CreateEmbeddingResponse_usage:
      required:
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: The number of tokens used by the prompt.
        total_tokens:
          type: integer
          description: The total number of tokens used by the request.
      description: The usage information for the request.
    CreateEvalCompletionsRunDataSource_sampling_params:
      type: object
      properties:
        temperature:
          type: number
          description: A higher temperature increases randomness in the outputs.
          default: 1
        max_completion_tokens:
          type: integer
          description: The maximum number of tokens in the generated output.
        top_p:
          type: number
          description: An alternative to temperature for nucleus sampling; 1.0 includes
            all tokens.
          default: 1
        seed:
          type: integer
          description: "A seed value to initialize the randomness, during sampling."
          default: 42
    CreateFineTuningJobRequest_hyperparameters:
      type: object
      properties:
        batch_size:
          description: |
            Number of examples in each batch. A larger batch size means that model parameters
            are updated less frequently, but with lower variance.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 256
            minimum: 1
            type: integer
          default: auto
        learning_rate_multiplier:
          description: |
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
            overfitting.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - minimum: 0
            exclusiveMinimum: true
            type: number
          default: auto
        n_epochs:
          description: |
            The number of epochs to train the model for. An epoch refers to one full cycle
            through the training dataset.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 50
            minimum: 1
            type: integer
          default: auto
      description: |
        The hyperparameters used for the fine-tuning job.
        This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
      deprecated: true
    CreateFineTuningJobRequest_wandb:
      required:
      - project
      type: object
      properties:
        project:
          type: string
          description: |
            The name of the project that the new run will be created under.
          example: my-wandb-project
        name:
          type: string
          description: |
            A display name to set for the run. If not set, we will use the Job ID as the name.
          nullable: true
        entity:
          type: string
          description: |
            The entity to use for the run. This allows you to set the team or username of the WandB user that you would
            like associated with the run. If not set, the default entity for the registered WandB API key is used.
          nullable: true
        tags:
          type: array
          description: |
            A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
            default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
          items:
            type: string
            example: custom-tag
      description: |
        The settings for your integration with Weights and Biases. This payload specifies the project that
        metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
        to your run, and set a default entity (team, username, etc) to be associated with your run.
    CreateFineTuningJobRequest_integrations:
      required:
      - type
      - wandb
      type: object
      properties:
        type:
          description: |
            The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
          oneOf:
          - type: string
            enum:
            - wandb
            x-stainless-const: true
        wandb:
          $ref: "#/components/schemas/CreateFineTuningJobRequest_wandb"
    CreateMessageRequest_attachments:
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the file to attach to the message.
        tools:
          type: array
          description: The tools to add this file to.
          items:
            oneOf:
            - $ref: "#/components/schemas/AssistantToolsCode"
            - $ref: "#/components/schemas/AssistantToolsFileSearchTypeOnly"
    CreateModerationResponse_categories:
      required:
      - harassment
      - harassment/threatening
      - hate
      - hate/threatening
      - illicit
      - illicit/violent
      - self-harm
      - self-harm/instructions
      - self-harm/intent
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
      properties:
        hate:
          type: boolean
          description: "Content that expresses, incites, or promotes hate based on\
            \ race, gender, ethnicity, religion, nationality, sexual orientation,\
            \ disability status, or caste. Hateful content aimed at non-protected\
            \ groups (e.g., chess players) is harassment."
        hate/threatening:
          type: boolean
          description: "Hateful content that also includes violence or serious harm\
            \ towards the targeted group based on race, gender, ethnicity, religion,\
            \ nationality, sexual orientation, disability status, or caste."
        harassment:
          type: boolean
          description: "Content that expresses, incites, or promotes harassing language\
            \ towards any target."
        harassment/threatening:
          type: boolean
          description: Harassment content that also includes violence or serious harm
            towards any target.
        illicit:
          type: boolean
          description: "Content that includes instructions or advice that facilitate\
            \ the planning or execution of wrongdoing, or that gives advice or instruction\
            \ on how to commit illicit acts. For example, \"how to shoplift\" would\
            \ fit this category."
          nullable: true
        illicit/violent:
          type: boolean
          description: "Content that includes instructions or advice that facilitate\
            \ the planning or execution of wrongdoing that also includes violence,\
            \ or that gives advice or instruction on the procurement of any weapon."
          nullable: true
        self-harm:
          type: boolean
          description: "Content that promotes, encourages, or depicts acts of self-harm,\
            \ such as suicide, cutting, and eating disorders."
        self-harm/intent:
          type: boolean
          description: "Content where the speaker expresses that they are engaging\
            \ or intend to engage in acts of self-harm, such as suicide, cutting,\
            \ and eating disorders."
        self-harm/instructions:
          type: boolean
          description: "Content that encourages performing acts of self-harm, such\
            \ as suicide, cutting, and eating disorders, or that gives instructions\
            \ or advice on how to commit such acts."
        sexual:
          type: boolean
          description: "Content meant to arouse sexual excitement, such as the description\
            \ of sexual activity, or that promotes sexual services (excluding sex\
            \ education and wellness)."
        sexual/minors:
          type: boolean
          description: Sexual content that includes an individual who is under 18
            years old.
        violence:
          type: boolean
          description: "Content that depicts death, violence, or physical injury."
        violence/graphic:
          type: boolean
          description: "Content that depicts death, violence, or physical injury in\
            \ graphic detail."
      description: "A list of the categories, and whether they are flagged or not."
    CreateModerationResponse_category_scores:
      required:
      - harassment
      - harassment/threatening
      - hate
      - hate/threatening
      - illicit
      - illicit/violent
      - self-harm
      - self-harm/instructions
      - self-harm/intent
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
      properties:
        hate:
          type: number
          description: The score for the category 'hate'.
        hate/threatening:
          type: number
          description: The score for the category 'hate/threatening'.
        harassment:
          type: number
          description: The score for the category 'harassment'.
        harassment/threatening:
          type: number
          description: The score for the category 'harassment/threatening'.
        illicit:
          type: number
          description: The score for the category 'illicit'.
        illicit/violent:
          type: number
          description: The score for the category 'illicit/violent'.
        self-harm:
          type: number
          description: The score for the category 'self-harm'.
        self-harm/intent:
          type: number
          description: The score for the category 'self-harm/intent'.
        self-harm/instructions:
          type: number
          description: The score for the category 'self-harm/instructions'.
        sexual:
          type: number
          description: The score for the category 'sexual'.
        sexual/minors:
          type: number
          description: The score for the category 'sexual/minors'.
        violence:
          type: number
          description: The score for the category 'violence'.
        violence/graphic:
          type: number
          description: The score for the category 'violence/graphic'.
      description: A list of the categories along with their scores as predicted by
        model.
    CreateModerationResponse_category_applied_input_types:
      required:
      - harassment
      - harassment/threatening
      - hate
      - hate/threatening
      - illicit
      - illicit/violent
      - self-harm
      - self-harm/instructions
      - self-harm/intent
      - sexual
      - sexual/minors
      - violence
      - violence/graphic
      type: object
      properties:
        hate:
          type: array
          description: The applied input type(s) for the category 'hate'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        hate/threatening:
          type: array
          description: The applied input type(s) for the category 'hate/threatening'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        harassment:
          type: array
          description: The applied input type(s) for the category 'harassment'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        harassment/threatening:
          type: array
          description: The applied input type(s) for the category 'harassment/threatening'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        illicit:
          type: array
          description: The applied input type(s) for the category 'illicit'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        illicit/violent:
          type: array
          description: The applied input type(s) for the category 'illicit/violent'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        self-harm:
          type: array
          description: The applied input type(s) for the category 'self-harm'.
          items:
            type: string
            enum:
            - text
            - image
        self-harm/intent:
          type: array
          description: The applied input type(s) for the category 'self-harm/intent'.
          items:
            type: string
            enum:
            - text
            - image
        self-harm/instructions:
          type: array
          description: The applied input type(s) for the category 'self-harm/instructions'.
          items:
            type: string
            enum:
            - text
            - image
        sexual:
          type: array
          description: The applied input type(s) for the category 'sexual'.
          items:
            type: string
            enum:
            - text
            - image
        sexual/minors:
          type: array
          description: The applied input type(s) for the category 'sexual/minors'.
          items:
            type: string
            enum:
            - text
            x-stainless-const: true
        violence:
          type: array
          description: The applied input type(s) for the category 'violence'.
          items:
            type: string
            enum:
            - text
            - image
        violence/graphic:
          type: array
          description: The applied input type(s) for the category 'violence/graphic'.
          items:
            type: string
            enum:
            - text
            - image
      description: A list of the categories along with the input type(s) that the
        score applies to.
    CreateModerationResponse_results:
      required:
      - categories
      - category_applied_input_types
      - category_scores
      - flagged
      type: object
      properties:
        flagged:
          type: boolean
          description: Whether any of the below categories are flagged.
        categories:
          $ref: "#/components/schemas/CreateModerationResponse_categories"
        category_scores:
          $ref: "#/components/schemas/CreateModerationResponse_category_scores"
        category_applied_input_types:
          $ref: "#/components/schemas/CreateModerationResponse_category_applied_input_types"
    CreateThreadAndRunRequest_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/AssistantObject_tool_resources_file_search"
      description: |
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    CreateThreadRequest_tool_resources_file_search:
      type: object
      properties:
        vector_store_ids:
          maxItems: 1
          type: array
          description: |
            The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
          items:
            type: string
        vector_stores:
          maxItems: 1
          type: array
          description: |
            A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
          items:
            $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_file_search_vector_stores"
      oneOf:
      - required:
        - vector_store_ids
      - required:
        - vector_stores
    CreateThreadRequest_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/CreateThreadRequest_tool_resources_file_search"
      description: |
        A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    CreateTranscriptionResponseJson_logprobs:
      type: object
      properties:
        token:
          type: string
          description: The token in the transcription.
        logprob:
          type: number
          description: The log probability of the token.
        bytes:
          type: array
          description: The bytes of the token.
          items:
            type: number
    EvalJsonlFileContentSource_content:
      required:
      - item
      type: object
      properties:
        item:
          type: object
          additionalProperties: true
        sample:
          type: object
          additionalProperties: true
    EvalRun_result_counts:
      required:
      - errored
      - failed
      - passed
      - total
      type: object
      properties:
        total:
          type: integer
          description: Total number of executed output items.
        errored:
          type: integer
          description: Number of output items that resulted in an error.
        failed:
          type: integer
          description: Number of output items that failed to pass the evaluation.
        passed:
          type: integer
          description: Number of output items that passed the evaluation.
      description: Counters summarizing the outcomes of the evaluation run.
    EvalRun_per_model_usage:
      required:
      - cached_tokens
      - completion_tokens
      - invocation_count
      - model_name
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        model_name:
          type: string
          description: The name of the model.
        invocation_count:
          type: integer
          description: The number of invocations.
        prompt_tokens:
          type: integer
          description: The number of prompt tokens used.
        completion_tokens:
          type: integer
          description: The number of completion tokens generated.
        total_tokens:
          type: integer
          description: The total number of tokens used.
        cached_tokens:
          type: integer
          description: The number of tokens retrieved from cache.
    EvalRun_per_testing_criteria_results:
      required:
      - failed
      - passed
      - testing_criteria
      type: object
      properties:
        testing_criteria:
          type: string
          description: A description of the testing criteria.
        passed:
          type: integer
          description: Number of tests passed for this criteria.
        failed:
          type: integer
          description: Number of tests failed for this criteria.
    EvalRunOutputItem_sample_input:
      required:
      - content
      - role
      type: object
      properties:
        role:
          type: string
          description: "The role of the message sender (e.g., system, user, developer)."
        content:
          type: string
          description: The content of the message.
      description: An input message.
    EvalRunOutputItem_sample_output:
      type: object
      properties:
        role:
          type: string
          description: "The role of the message (e.g. \"system\", \"assistant\", \"\
            user\")."
        content:
          type: string
          description: The content of the message.
    EvalRunOutputItem_sample_usage:
      required:
      - cached_tokens
      - completion_tokens
      - prompt_tokens
      - total_tokens
      type: object
      properties:
        total_tokens:
          type: integer
          description: The total number of tokens used.
        completion_tokens:
          type: integer
          description: The number of completion tokens generated.
        prompt_tokens:
          type: integer
          description: The number of prompt tokens used.
        cached_tokens:
          type: integer
          description: The number of tokens retrieved from cache.
      description: Token usage details for the sample.
    EvalRunOutputItem_sample:
      required:
      - error
      - finish_reason
      - input
      - max_completion_tokens
      - model
      - output
      - seed
      - temperature
      - top_p
      - usage
      type: object
      properties:
        input:
          type: array
          description: An array of input messages.
          items:
            $ref: "#/components/schemas/EvalRunOutputItem_sample_input"
        output:
          type: array
          description: An array of output messages.
          items:
            $ref: "#/components/schemas/EvalRunOutputItem_sample_output"
        finish_reason:
          type: string
          description: The reason why the sample generation was finished.
        model:
          type: string
          description: The model used for generating the sample.
        usage:
          $ref: "#/components/schemas/EvalRunOutputItem_sample_usage"
        error:
          $ref: "#/components/schemas/EvalApiError"
        temperature:
          type: number
          description: The sampling temperature used.
        max_completion_tokens:
          type: integer
          description: The maximum number of tokens allowed for completion.
        top_p:
          type: number
          description: The top_p value used for sampling.
        seed:
          type: integer
          description: The seed used for generating the sample.
      description: A sample containing the input and output of the evaluation run.
    FileSearchToolCall_results:
      type: object
      properties:
        file_id:
          type: string
          description: |
            The unique ID of the file.
        text:
          type: string
          description: |
            The text that was retrieved from the file.
        filename:
          type: string
          description: |
            The name of the file.
        attributes:
          $ref: "#/components/schemas/VectorStoreFileAttributes"
        score:
          type: number
          description: |
            The relevance score of the file - a value between 0 and 1.
          format: float
    FineTuneDPOMethod_hyperparameters:
      type: object
      properties:
        beta:
          description: |
            The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 2
            minimum: 0
            exclusiveMinimum: true
            type: number
          default: auto
        batch_size:
          description: |
            Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 256
            minimum: 1
            type: integer
          default: auto
        learning_rate_multiplier:
          description: |
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - minimum: 0
            exclusiveMinimum: true
            type: number
          default: auto
        n_epochs:
          description: |
            The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 50
            minimum: 1
            type: integer
          default: auto
      description: The hyperparameters used for the fine-tuning job.
    FineTunePreferenceRequestInput_input:
      type: object
      properties:
        messages:
          minItems: 1
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/ChatCompletionRequestSystemMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestUserMessage"
            - $ref: "#/components/schemas/FineTuneChatCompletionRequestAssistantMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestToolMessage"
            - $ref: "#/components/schemas/ChatCompletionRequestFunctionMessage"
        tools:
          type: array
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: "#/components/schemas/ChatCompletionTool"
        parallel_tool_calls:
          $ref: "#/components/schemas/ParallelToolCalls"
    FineTuneSupervisedMethod_hyperparameters:
      type: object
      properties:
        batch_size:
          description: |
            Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 256
            minimum: 1
            type: integer
          default: auto
        learning_rate_multiplier:
          description: |
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - minimum: 0
            exclusiveMinimum: true
            type: number
          default: auto
        n_epochs:
          description: |
            The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 50
            minimum: 1
            type: integer
          default: auto
      description: The hyperparameters used for the fine-tuning job.
    FineTuningJob_error:
      required:
      - code
      - message
      - param
      type: object
      properties:
        code:
          type: string
          description: A machine-readable error code.
        message:
          type: string
          description: A human-readable error message.
        param:
          type: string
          description: "The parameter that was invalid, usually `training_file` or\
            \ `validation_file`. This field will be null if the failure was not parameter-specific."
          nullable: true
      description: "For fine-tuning jobs that have `failed`, this will contain more\
        \ information on the cause of the failure."
      nullable: true
    FineTuningJob_hyperparameters:
      type: object
      properties:
        batch_size:
          description: |
            Number of examples in each batch. A larger batch size means that model parameters
            are updated less frequently, but with lower variance.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 256
            minimum: 1
            type: integer
          default: auto
        learning_rate_multiplier:
          description: |
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
            overfitting.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - minimum: 0
            exclusiveMinimum: true
            type: number
          default: auto
        n_epochs:
          description: |
            The number of epochs to train the model for. An epoch refers to one full cycle
            through the training dataset.
          oneOf:
          - type: string
            enum:
            - auto
            x-stainless-const: true
          - maximum: 50
            minimum: 1
            type: integer
          default: auto
      description: The hyperparameters used for the fine-tuning job. This value will
        only be returned when running `supervised` jobs.
    FineTuningJobCheckpoint_metrics:
      type: object
      properties:
        step:
          type: number
        train_loss:
          type: number
        train_mean_token_accuracy:
          type: number
        valid_loss:
          type: number
        valid_mean_token_accuracy:
          type: number
        full_valid_loss:
          type: number
        full_valid_mean_token_accuracy:
          type: number
      description: Metrics at the step number during the fine-tuning job.
    ImagesResponse_usage_input_tokens_details:
      required:
      - image_tokens
      - text_tokens
      type: object
      properties:
        text_tokens:
          type: integer
          description: The number of text tokens in the input prompt.
        image_tokens:
          type: integer
          description: The number of image tokens in the input prompt.
      description: The input tokens detailed information for the image generation.
    ImagesResponse_usage:
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - total_tokens
      type: object
      properties:
        total_tokens:
          type: integer
          description: The total number of tokens (images and text) used for the image
            generation.
        input_tokens:
          type: integer
          description: The number of tokens (images and text) in the input prompt.
        output_tokens:
          type: integer
          description: The number of image tokens in the output image.
        input_tokens_details:
          $ref: "#/components/schemas/ImagesResponse_usage_input_tokens_details"
      description: |
        For `gpt-image-1` only, the token usage information for the image generation.
    Invite_projects:
      type: object
      properties:
        id:
          type: string
          description: Project's public ID
        role:
          type: string
          description: Project membership role
          enum:
          - member
          - owner
    InviteRequest_projects:
      required:
      - id
      - role
      type: object
      properties:
        id:
          type: string
          description: Project's public ID
        role:
          type: string
          description: Project membership role
          enum:
          - member
          - owner
    MessageContentImageFileObject_image_file:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: "The [File](/docs/api-reference/files) ID of the image in the\
            \ message content. Set `purpose=\"vision\"` when uploading the File if\
            \ you need to later display the file content."
        detail:
          type: string
          description: "Specifies the detail level of the image if specified by the\
            \ user. `low` uses fewer tokens, you can opt in to high resolution using\
            \ `high`."
          default: auto
          enum:
          - auto
          - low
          - high
    MessageContentImageUrlObject_image_url:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: "The external URL of the image, must be a supported image types:\
            \ jpeg, jpg, png, gif, webp."
          format: uri
        detail:
          type: string
          description: "Specifies the detail level of the image. `low` uses fewer\
            \ tokens, you can opt in to high resolution using `high`. Default value\
            \ is `auto`"
          default: auto
          enum:
          - auto
          - low
          - high
    MessageContentTextAnnotationsFileCitationObject_file_citation:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the specific File the citation is from.
    MessageContentTextAnnotationsFilePathObject_file_path:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the file that was generated.
    MessageContentTextObject_text:
      required:
      - annotations
      - value
      type: object
      properties:
        value:
          type: string
          description: The data that makes up the text.
        annotations:
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/MessageContentTextAnnotationsFileCitationObject"
            - $ref: "#/components/schemas/MessageContentTextAnnotationsFilePathObject"
    MessageDeltaContentImageFileObject_image_file:
      type: object
      properties:
        file_id:
          type: string
          description: "The [File](/docs/api-reference/files) ID of the image in the\
            \ message content. Set `purpose=\"vision\"` when uploading the File if\
            \ you need to later display the file content."
        detail:
          type: string
          description: "Specifies the detail level of the image if specified by the\
            \ user. `low` uses fewer tokens, you can opt in to high resolution using\
            \ `high`."
          default: auto
          enum:
          - auto
          - low
          - high
    MessageDeltaContentImageUrlObject_image_url:
      type: object
      properties:
        url:
          type: string
          description: "The URL of the image, must be a supported image types: jpeg,\
            \ jpg, png, gif, webp."
        detail:
          type: string
          description: "Specifies the detail level of the image. `low` uses fewer\
            \ tokens, you can opt in to high resolution using `high`."
          default: auto
          enum:
          - auto
          - low
          - high
    MessageDeltaContentTextAnnotationsFileCitationObject_file_citation:
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the specific File the citation is from.
        quote:
          type: string
          description: The specific quote in the file.
    MessageDeltaContentTextAnnotationsFilePathObject_file_path:
      type: object
      properties:
        file_id:
          type: string
          description: The ID of the file that was generated.
    MessageDeltaContentTextObject_text:
      type: object
      properties:
        value:
          type: string
          description: The data that makes up the text.
        annotations:
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject"
            - $ref: "#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject"
    MessageDeltaObject_delta:
      type: object
      properties:
        role:
          type: string
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
          - user
          - assistant
        content:
          type: array
          description: The content of the message in array of text and/or images.
          items:
            oneOf:
            - $ref: "#/components/schemas/MessageDeltaContentImageFileObject"
            - $ref: "#/components/schemas/MessageDeltaContentTextObject"
            - $ref: "#/components/schemas/MessageDeltaContentRefusalObject"
            - $ref: "#/components/schemas/MessageDeltaContentImageUrlObject"
      description: The delta containing the fields that have changed on the Message.
    MessageObject_incomplete_details:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
          description: The reason the message is incomplete.
          enum:
          - content_filter
          - max_tokens
          - run_cancelled
          - run_expired
          - run_failed
      description: "On an incomplete message, details about why the message is incomplete."
      nullable: true
    ModifyAssistantRequest_tool_resources_code_interpreter:
      type: object
      properties:
        file_ids:
          maxItems: 20
          type: array
          description: |
            Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
          items:
            type: string
          default: []
    ModifyAssistantRequest_tool_resources_file_search:
      type: object
      properties:
        vector_store_ids:
          maxItems: 1
          type: array
          description: |
            Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          items:
            type: string
    ModifyAssistantRequest_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/ModifyAssistantRequest_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/ModifyAssistantRequest_tool_resources_file_search"
      description: |
        A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    ModifyThreadRequest_tool_resources_file_search:
      type: object
      properties:
        vector_store_ids:
          maxItems: 1
          type: array
          description: |
            The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
          items:
            type: string
    ModifyThreadRequest_tool_resources:
      type: object
      properties:
        code_interpreter:
          $ref: "#/components/schemas/CreateAssistantRequest_tool_resources_code_interpreter"
        file_search:
          $ref: "#/components/schemas/ModifyThreadRequest_tool_resources_file_search"
      description: |
        A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
      nullable: true
    ProjectApiKey_owner:
      type: object
      properties:
        type:
          type: string
          description: '`user` or `service_account`'
          enum:
          - user
          - service_account
        user:
          $ref: "#/components/schemas/ProjectUser"
        service_account:
          $ref: "#/components/schemas/ProjectServiceAccount"
    RealtimeConversationItem_content:
      type: object
      properties:
        type:
          type: string
          description: |
            The content type (`input_text`, `input_audio`, `item_reference`, `text`).
          enum:
          - input_audio
          - input_text
          - item_reference
          - text
        text:
          type: string
          description: |
            The text content, used for `input_text` and `text` content types.
        id:
          type: string
          description: |
            ID of a previous conversation item to reference (for `item_reference`
            content types in `response.create` events). These can reference both
            client and server created items.
        audio:
          type: string
          description: |
            Base64-encoded audio bytes, used for `input_audio` content type.
        transcript:
          type: string
          description: |
            The transcript of the audio, used for `input_audio` content type.
    RealtimeResponse_status_details_error:
      type: object
      properties:
        type:
          type: string
          description: The type of error.
        code:
          type: string
          description: "Error code, if any."
      description: "A description of the error that caused the response to fail, \n\
        populated when the `status` is `failed`.\n"
    RealtimeResponse_status_details:
      type: object
      properties:
        type:
          type: string
          description: "The type of error that caused the response to fail, corresponding\
            \ \nwith the `status` field (`completed`, `cancelled`, `incomplete`, \n\
            `failed`).\n"
          enum:
          - completed
          - cancelled
          - failed
          - incomplete
        reason:
          type: string
          description: "The reason the Response did not complete. For a `cancelled`\
            \ Response, \none of `turn_detected` (the server VAD detected a new start\
            \ of speech) \nor `client_cancelled` (the client sent a cancel event).\
            \ For an \n`incomplete` Response, one of `max_output_tokens` or `content_filter`\
            \ \n(the server-side safety filter activated and cut off the response).\n"
          enum:
          - turn_detected
          - client_cancelled
          - max_output_tokens
          - content_filter
        error:
          $ref: "#/components/schemas/RealtimeResponse_status_details_error"
      description: Additional details about the status.
    RealtimeResponse_usage_input_token_details:
      type: object
      properties:
        cached_tokens:
          type: integer
          description: The number of cached tokens used in the Response.
        text_tokens:
          type: integer
          description: The number of text tokens used in the Response.
        audio_tokens:
          type: integer
          description: The number of audio tokens used in the Response.
      description: Details about the input tokens used in the Response.
    RealtimeResponse_usage_output_token_details:
      type: object
      properties:
        text_tokens:
          type: integer
          description: The number of text tokens used in the Response.
        audio_tokens:
          type: integer
          description: The number of audio tokens used in the Response.
      description: Details about the output tokens used in the Response.
    RealtimeResponse_usage:
      type: object
      properties:
        total_tokens:
          type: integer
          description: "The total number of tokens in the Response including input\
            \ and output \ntext and audio tokens.\n"
        input_tokens:
          type: integer
          description: "The number of input tokens used in the Response, including\
            \ text and \naudio tokens.\n"
        output_tokens:
          type: integer
          description: "The number of output tokens sent in the Response, including\
            \ text and \naudio tokens.\n"
        input_token_details:
          $ref: "#/components/schemas/RealtimeResponse_usage_input_token_details"
        output_token_details:
          $ref: "#/components/schemas/RealtimeResponse_usage_output_token_details"
      description: "Usage statistics for the Response, this will correspond to billing.\
        \ A \nRealtime API session will maintain a conversation context and append\
        \ new \nItems to the Conversation, thus output from previous turns (text and\
        \ \naudio tokens) will become the input for later turns.\n"
    RealtimeResponseCreateParams_tools:
      type: object
      properties:
        type:
          type: string
          description: "The type of the tool, i.e. `function`."
          enum:
          - function
          x-stainless-const: true
        name:
          type: string
          description: The name of the function.
        description:
          type: string
          description: "The description of the function, including guidance on when\
            \ and how \nto call it, and guidance about what to tell the user when\
            \ calling \n(if anything).\n"
        parameters:
          type: object
          description: Parameters of the function in JSON Schema.
    RealtimeServerEventConversationCreated_conversation:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the conversation.
        object:
          type: string
          description: "The object type, must be `realtime.conversation`."
      description: The conversation resource.
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed_error:
      type: object
      properties:
        type:
          type: string
          description: The type of error.
        code:
          type: string
          description: "Error code, if any."
        message:
          type: string
          description: A human-readable error message.
        param:
          type: string
          description: "Parameter related to the error, if any."
      description: Details of the transcription error.
    RealtimeServerEventError_error:
      required:
      - message
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of error (e.g., "invalid_request_error", "server_error").
        code:
          type: string
          description: "Error code, if any."
          nullable: true
        message:
          type: string
          description: A human-readable error message.
        param:
          type: string
          description: "Parameter related to the error, if any."
          nullable: true
        event_id:
          type: string
          description: |
            The event_id of the client event that caused the error, if applicable.
          nullable: true
      description: Details of the error.
    RealtimeServerEventRateLimitsUpdated_rate_limits:
      type: object
      properties:
        name:
          type: string
          description: |
            The name of the rate limit (`requests`, `tokens`).
          enum:
          - requests
          - tokens
        limit:
          type: integer
          description: The maximum allowed value for the rate limit.
        remaining:
          type: integer
          description: The remaining value before the limit is reached.
        reset_seconds:
          type: number
          description: Seconds until the rate limit resets.
    RealtimeServerEventResponseContentPartAdded_part:
      type: object
      properties:
        type:
          type: string
          description: "The content type (\"text\", \"audio\")."
          enum:
          - audio
          - text
        text:
          type: string
          description: The text content (if type is "text").
        audio:
          type: string
          description: Base64-encoded audio data (if type is "audio").
        transcript:
          type: string
          description: The transcript of the audio (if type is "audio").
      description: The content part that was added.
    RealtimeServerEventResponseContentPartDone_part:
      type: object
      properties:
        type:
          type: string
          description: "The content type (\"text\", \"audio\")."
          enum:
          - audio
          - text
        text:
          type: string
          description: The text content (if type is "text").
        audio:
          type: string
          description: Base64-encoded audio data (if type is "audio").
        transcript:
          type: string
          description: The transcript of the audio (if type is "audio").
      description: The content part that is done.
    RealtimeSession_input_audio_transcription:
      type: object
      properties:
        model:
          type: string
          description: |
            The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
        language:
          type: string
          description: |
            The language of the input audio. Supplying the input language in
            [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
            will improve accuracy and latency.
        prompt:
          type: string
          description: |
            An optional text to guide the model's style or continue a previous audio
            segment.
            For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).
            For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
      description: |
        Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
    RealtimeSession_turn_detection:
      type: object
      properties:
        type:
          type: string
          description: |
            Type of turn detection.
          default: server_vad
          enum:
          - server_vad
          - semantic_vad
        eagerness:
          type: string
          description: |
            Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
          default: auto
          enum:
          - low
          - medium
          - high
          - auto
        threshold:
          type: number
          description: "Used only for `server_vad` mode. Activation threshold for\
            \ VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require\
            \ louder audio to activate the model, and \nthus might perform better\
            \ in noisy environments.\n"
        prefix_padding_ms:
          type: integer
          description: "Used only for `server_vad` mode. Amount of audio to include\
            \ before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
        silence_duration_ms:
          type: integer
          description: "Used only for `server_vad` mode. Duration of silence to detect\
            \ speech stop (in milliseconds). Defaults \nto 500ms. With shorter values\
            \ the model will respond more quickly, \nbut may jump in on short pauses\
            \ from the user.\n"
        create_response:
          type: boolean
          description: |
            Whether or not to automatically generate a response when a VAD stop event occurs.
          default: true
        interrupt_response:
          type: boolean
          description: |
            Whether or not to automatically interrupt any ongoing response with output to the default
            conversation (i.e. `conversation` of `auto`) when a VAD start event occurs.
          default: true
      description: |
        Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
        Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
        Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
    RealtimeSession_input_audio_noise_reduction:
      type: object
      properties:
        type:
          type: string
          description: |
            Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
          enum:
          - near_field
          - far_field
      description: |
        Configuration for input audio noise reduction. This can be set to `null` to turn off.
        Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
        Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
    RealtimeSessionCreateResponse_client_secret:
      required:
      - expires_at
      - value
      type: object
      properties:
        value:
          type: string
          description: |
            Ephemeral key usable in client environments to authenticate connections
            to the Realtime API. Use this in client-side environments rather than
            a standard API token, which should only be used server-side.
        expires_at:
          type: integer
          description: |
            Timestamp for when the token expires. Currently, all tokens expire
            after one minute.
      description: Ephemeral key returned by the API.
    RealtimeSessionCreateResponse_input_audio_transcription:
      type: object
      properties:
        model:
          type: string
          description: "The model to use for transcription, `whisper-1` is the only\
            \ currently \nsupported model.\n"
      description: "Configuration for input audio transcription, defaults to off and\
        \ can be \nset to `null` to turn off once on. Input audio transcription is\
        \ not native \nto the model, since the model consumes audio directly. Transcription\
        \ runs \nasynchronously through Whisper and should be treated as rough guidance\
        \ \nrather than the representation understood by the model.\n"
    RealtimeSessionCreateResponse_turn_detection:
      type: object
      properties:
        type:
          type: string
          description: |
            Type of turn detection, only `server_vad` is currently supported.
        threshold:
          type: number
          description: "Activation threshold for VAD (0.0 to 1.0), this defaults to\
            \ 0.5. A \nhigher threshold will require louder audio to activate the\
            \ model, and \nthus might perform better in noisy environments.\n"
        prefix_padding_ms:
          type: integer
          description: "Amount of audio to include before the VAD detected speech\
            \ (in \nmilliseconds). Defaults to 300ms.\n"
        silence_duration_ms:
          type: integer
          description: "Duration of silence to detect speech stop (in milliseconds).\
            \ Defaults \nto 500ms. With shorter values the model will respond more\
            \ quickly, \nbut may jump in on short pauses from the user.\n"
      description: "Configuration for turn detection. Can be set to `null` to turn\
        \ off. Server \nVAD means that the model will detect the start and end of\
        \ speech based on \naudio volume and respond at the end of user speech.\n"
    RealtimeTranscriptionSessionCreateRequest_input_audio_transcription:
      type: object
      properties:
        model:
          type: string
          description: |
            The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
          enum:
          - gpt-4o-transcribe
          - gpt-4o-mini-transcribe
          - whisper-1
        language:
          type: string
          description: |
            The language of the input audio. Supplying the input language in
            [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
            will improve accuracy and latency.
        prompt:
          type: string
          description: |
            An optional text to guide the model's style or continue a previous audio
            segment.
            For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).
            For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
      description: |
        Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
    RealtimeTranscriptionSessionCreateRequest_turn_detection:
      type: object
      properties:
        type:
          type: string
          description: |
            Type of turn detection.
          default: server_vad
          enum:
          - server_vad
          - semantic_vad
        eagerness:
          type: string
          description: |
            Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
          default: auto
          enum:
          - low
          - medium
          - high
          - auto
        threshold:
          type: number
          description: "Used only for `server_vad` mode. Activation threshold for\
            \ VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require\
            \ louder audio to activate the model, and \nthus might perform better\
            \ in noisy environments.\n"
        prefix_padding_ms:
          type: integer
          description: "Used only for `server_vad` mode. Amount of audio to include\
            \ before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
        silence_duration_ms:
          type: integer
          description: "Used only for `server_vad` mode. Duration of silence to detect\
            \ speech stop (in milliseconds). Defaults \nto 500ms. With shorter values\
            \ the model will respond more quickly, \nbut may jump in on short pauses\
            \ from the user.\n"
        create_response:
          type: boolean
          description: |
            Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.
          default: true
        interrupt_response:
          type: boolean
          description: |
            Whether or not to automatically interrupt any ongoing response with output to the default
            conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.
          default: true
      description: |
        Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
        Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
        Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
    RealtimeTranscriptionSessionCreateResponse_client_secret:
      required:
      - expires_at
      - value
      type: object
      properties:
        value:
          type: string
          description: |
            Ephemeral key usable in client environments to authenticate connections
            to the Realtime API. Use this in client-side environments rather than
            a standard API token, which should only be used server-side.
        expires_at:
          type: integer
          description: |
            Timestamp for when the token expires. Currently, all tokens expire
            after one minute.
      description: |
        Ephemeral key returned by the API. Only present when the session is
        created on the server via REST API.
    RealtimeTranscriptionSessionCreateResponse_input_audio_transcription:
      type: object
      properties:
        model:
          type: string
          description: |
            The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.
          enum:
          - gpt-4o-transcribe
          - gpt-4o-mini-transcribe
          - whisper-1
        language:
          type: string
          description: |
            The language of the input audio. Supplying the input language in
            [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
            will improve accuracy and latency.
        prompt:
          type: string
          description: |
            An optional text to guide the model's style or continue a previous audio
            segment. The [prompt](/docs/guides/speech-to-text#prompting) should match
            the audio language.
      description: |
        Configuration of the transcription model.
    ReasoningItem_summary:
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of the object. Always `summary_text`.
          enum:
          - summary_text
          x-stainless-const: true
        text:
          type: string
          description: |
            A short summary of the reasoning used by the model when generating
            the response.
    Response_incomplete_details:
      type: object
      properties:
        reason:
          type: string
          description: The reason why the response is incomplete.
          enum:
          - max_output_tokens
          - content_filter
      description: |
        Details about why the response is incomplete.
      nullable: true
    JSON schema:
      title: JSON schema
      required:
      - name
      type: object
      properties:
        description:
          type: string
          description: |
            A description of what the response format is for, used by the model to
            determine how to respond in the format.
        name:
          type: string
          description: |
            The name of the response format. Must be a-z, A-Z, 0-9, or contain
            underscores and dashes, with a maximum length of 64.
        schema:
          $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
        strict:
          type: boolean
          description: |
            Whether to enable strict schema adherence when generating the output.
            If set to true, the model will always follow the exact schema defined
            in the `schema` field. Only a subset of JSON Schema is supported when
            `strict` is `true`. To learn more, read the [Structured Outputs
            guide](/docs/guides/structured-outputs).
          nullable: true
          default: false
      description: |
        Structured Outputs configuration options, including a JSON Schema.
    ResponseProperties_text:
      type: object
      properties:
        format:
          $ref: "#/components/schemas/TextResponseFormatConfiguration"
      description: |
        Configuration options for a text response from the model. Can be plain
        text or structured JSON data. Learn more:
        - [Text inputs and outputs](/docs/guides/text)
        - [Structured Outputs](/docs/guides/structured-outputs)
    ResponseReasoningSummaryPartAddedEvent_part:
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the summary part. Always `summary_text`.
          enum:
          - summary_text
          x-stainless-const: true
        text:
          type: string
          description: The text of the summary part.
      description: |
        The summary part that was added.
    ResponseReasoningSummaryPartDoneEvent_part:
      required:
      - text
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of the summary part. Always `summary_text`.
          enum:
          - summary_text
          x-stainless-const: true
        text:
          type: string
          description: The text of the summary part.
      description: |
        The completed summary part.
    ResponseUsage_input_tokens_details:
      required:
      - cached_tokens
      type: object
      properties:
        cached_tokens:
          type: integer
          description: "The number of tokens that were retrieved from the cache. \n\
            [More on prompt caching](/docs/guides/prompt-caching).\n"
      description: A detailed breakdown of the input tokens.
    ResponseUsage_output_tokens_details:
      required:
      - reasoning_tokens
      type: object
      properties:
        reasoning_tokens:
          type: integer
          description: The number of reasoning tokens.
      description: A detailed breakdown of the output tokens.
    RunObject_required_action_submit_tool_outputs:
      required:
      - tool_calls
      type: object
      properties:
        tool_calls:
          type: array
          description: A list of the relevant tool calls.
          items:
            $ref: "#/components/schemas/RunToolCallObject"
      description: Details on the tool outputs needed for this run to continue.
    RunObject_required_action:
      required:
      - submit_tool_outputs
      - type
      type: object
      properties:
        type:
          type: string
          description: "For now, this is always `submit_tool_outputs`."
          enum:
          - submit_tool_outputs
          x-stainless-const: true
        submit_tool_outputs:
          $ref: "#/components/schemas/RunObject_required_action_submit_tool_outputs"
      description: Details on the action required to continue the run. Will be `null`
        if no action is required.
      nullable: true
    RunObject_last_error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`."
          enum:
          - server_error
          - rate_limit_exceeded
          - invalid_prompt
        message:
          type: string
          description: A human-readable description of the error.
      description: The last error associated with this run. Will be `null` if there
        are no errors.
      nullable: true
    RunObject_incomplete_details:
      type: object
      properties:
        reason:
          type: string
          description: The reason why the run is incomplete. This will point to which
            specific token limit was reached over the course of the run.
          enum:
          - max_completion_tokens
          - max_prompt_tokens
      description: Details on why the run is incomplete. Will be `null` if the run
        is not incomplete.
      nullable: true
    RunStepDeltaObject_delta:
      type: object
      properties:
        step_details:
          type: object
          description: The details of the run step.
          oneOf:
          - $ref: "#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject"
          - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsObject"
      description: The delta containing the fields that have changed on the run step.
    RunStepDeltaStepDetailsMessageCreationObject_message_creation:
      type: object
      properties:
        message_id:
          type: string
          description: The ID of the message that was created by this run step.
    RunStepDeltaStepDetailsToolCallsCodeObject_code_interpreter:
      type: object
      properties:
        input:
          type: string
          description: The input to the Code Interpreter tool call.
        outputs:
          type: array
          description: "The outputs from the Code Interpreter tool call. Code Interpreter\
            \ can output one or more items, including text (`logs`) or images (`image`).\
            \ Each of these are represented by a different object type."
          items:
            type: object
            oneOf:
            - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject"
            - $ref: "#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject"
      description: The Code Interpreter tool call definition.
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject_image:
      type: object
      properties:
        file_id:
          type: string
          description: "The [file](/docs/api-reference/files) ID of the image."
    RunStepDeltaStepDetailsToolCallsFunctionObject_function:
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        arguments:
          type: string
          description: The arguments passed to the function.
        output:
          type: string
          description: "The output of the function. This will be `null` if the outputs\
            \ have not been [submitted](/docs/api-reference/runs/submitToolOutputs)\
            \ yet."
          nullable: true
      description: The definition of the function that was called.
    RunStepDetailsMessageCreationObject_message_creation:
      required:
      - message_id
      type: object
      properties:
        message_id:
          type: string
          description: The ID of the message that was created by this run step.
    RunStepDetailsToolCallsCodeObject_code_interpreter:
      required:
      - input
      - outputs
      type: object
      properties:
        input:
          type: string
          description: The input to the Code Interpreter tool call.
        outputs:
          type: array
          description: "The outputs from the Code Interpreter tool call. Code Interpreter\
            \ can output one or more items, including text (`logs`) or images (`image`).\
            \ Each of these are represented by a different object type."
          items:
            type: object
            oneOf:
            - $ref: "#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject"
            - $ref: "#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject"
      description: The Code Interpreter tool call definition.
    RunStepDetailsToolCallsCodeOutputImageObject_image:
      required:
      - file_id
      type: object
      properties:
        file_id:
          type: string
          description: "The [file](/docs/api-reference/files) ID of the image."
    RunStepDetailsToolCallsFileSearchObject_file_search:
      type: object
      properties:
        ranking_options:
          $ref: "#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject"
        results:
          type: array
          description: The results of the file search.
          items:
            $ref: "#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject"
      description: "For now, this is always going to be an empty object."
    RunStepDetailsToolCallsFileSearchResultObject_content:
      type: object
      properties:
        type:
          type: string
          description: The type of the content.
          enum:
          - text
          x-stainless-const: true
        text:
          type: string
          description: The text content of the file.
    RunStepDetailsToolCallsFunctionObject_function:
      required:
      - arguments
      - name
      - output
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        arguments:
          type: string
          description: The arguments passed to the function.
        output:
          type: string
          description: "The output of the function. This will be `null` if the outputs\
            \ have not been [submitted](/docs/api-reference/runs/submitToolOutputs)\
            \ yet."
          nullable: true
      description: The definition of the function that was called.
    RunStepObject_last_error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: One of `server_error` or `rate_limit_exceeded`.
          enum:
          - server_error
          - rate_limit_exceeded
        message:
          type: string
          description: A human-readable description of the error.
      description: The last error associated with this run step. Will be `null` if
        there are no errors.
      nullable: true
    RunToolCallObject_function:
      required:
      - arguments
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the function.
        arguments:
          type: string
          description: The arguments that the model expects you to pass to the function.
      description: The function definition.
    SubmitToolOutputsRunRequest_tool_outputs:
      type: object
      properties:
        tool_call_id:
          type: string
          description: The ID of the tool call in the `required_action` object within
            the run object the output is being submitted for.
        output:
          type: string
          description: The output of the tool call to be submitted to continue the
            run.
    TranscriptTextDeltaEvent_logprobs:
      type: object
      properties:
        token:
          type: string
          description: |
            The token that was used to generate the log probability.
        logprob:
          type: number
          description: |
            The log probability of the token.
        bytes:
          type: array
          description: |
            The bytes that were used to generate the log probability.
    VectorStoreFileBatchObject_file_counts:
      required:
      - cancelled
      - completed
      - failed
      - in_progress
      - total
      type: object
      properties:
        in_progress:
          type: integer
          description: The number of files that are currently being processed.
        completed:
          type: integer
          description: The number of files that have been processed.
        failed:
          type: integer
          description: The number of files that have failed to process.
        cancelled:
          type: integer
          description: The number of files that where cancelled.
        total:
          type: integer
          description: The total number of files.
    VectorStoreFileContentResponse_data:
      type: object
      properties:
        type:
          type: string
          description: The content type (currently only `"text"`)
        text:
          type: string
          description: The text content
    VectorStoreFileObject_last_error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: One of `server_error` or `rate_limit_exceeded`.
          enum:
          - server_error
          - unsupported_file
          - invalid_file
        message:
          type: string
          description: A human-readable description of the error.
      description: The last error associated with this vector store file. Will be
        `null` if there are no errors.
      nullable: true
    VectorStoreObject_file_counts:
      required:
      - cancelled
      - completed
      - failed
      - in_progress
      - total
      type: object
      properties:
        in_progress:
          type: integer
          description: The number of files that are currently being processed.
        completed:
          type: integer
          description: The number of files that have been successfully processed.
        failed:
          type: integer
          description: The number of files that have failed to process.
        cancelled:
          type: integer
          description: The number of files that were cancelled.
        total:
          type: integer
          description: The total number of files.
    VectorStoreSearchRequest_ranking_options:
      type: object
      properties:
        ranker:
          type: string
          default: auto
          enum:
          - auto
          - default-2024-11-15
        score_threshold:
          maximum: 1
          minimum: 0
          type: number
          default: 0
      additionalProperties: false
      description: Ranking options for search.
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
x-oaiMeta:
  navigationGroups:
  - id: responses
    title: Responses
  - id: chat
    title: Chat Completions
  - id: realtime
    title: Realtime
    beta: true
  - id: endpoints
    title: Platform APIs
  - id: vector_stores
    title: Vector stores
  - id: assistants
    title: Assistants
    beta: true
  - id: administration
    title: Administration
  - id: legacy
    title: Legacy
  groups:
  - id: responses
    title: Responses
    description: |
      OpenAI's most advanced interface for generating model responses. Supports
      text and image inputs, and text outputs. Create stateful interactions
      with the model, using the output of previous responses as input. Extend
      the model's capabilities with built-in tools for file search, web search,
      computer use, and more. Allow the model access to external systems and data
      using function calling.

      Related guides:
      - [Quickstart](/docs/quickstart?api-mode=responses)
      - [Text inputs and outputs](/docs/guides/text?api-mode=responses)
      - [Image inputs](/docs/guides/images?api-mode=responses)
      - [Structured Outputs](/docs/guides/structured-outputs?api-mode=responses)
      - [Function calling](/docs/guides/function-calling?api-mode=responses)
      - [Conversation state](/docs/guides/conversation-state?api-mode=responses)
      - [Extend the models with tools](/docs/guides/tools?api-mode=responses)
    navigationGroup: responses
    sections:
    - type: endpoint
      key: createResponse
      path: create
    - type: endpoint
      key: getResponse
      path: get
    - type: endpoint
      key: deleteResponse
      path: delete
    - type: endpoint
      key: listInputItems
      path: input-items
    - type: object
      key: Response
      path: object
    - type: object
      key: ResponseItemList
      path: list
  - id: responses-streaming
    title: Streaming
    description: |
      When you [create a Response](/docs/api-reference/responses/create) with
      `stream` set to `true`, the server will emit server-sent events to the
      client as the Response is generated. This section contains the events that
      are emitted by the server.

      [Learn more about streaming responses](/docs/guides/streaming-responses?api-mode=responses).
    navigationGroup: responses
    sections:
    - type: object
      key: ResponseCreatedEvent
      path: <auto>
    - type: object
      key: ResponseInProgressEvent
      path: <auto>
    - type: object
      key: ResponseCompletedEvent
      path: <auto>
    - type: object
      key: ResponseFailedEvent
      path: <auto>
    - type: object
      key: ResponseIncompleteEvent
      path: <auto>
    - type: object
      key: ResponseOutputItemAddedEvent
      path: <auto>
    - type: object
      key: ResponseOutputItemDoneEvent
      path: <auto>
    - type: object
      key: ResponseContentPartAddedEvent
      path: <auto>
    - type: object
      key: ResponseContentPartDoneEvent
      path: <auto>
    - type: object
      key: ResponseTextDeltaEvent
      path: <auto>
    - type: object
      key: ResponseTextAnnotationDeltaEvent
      path: <auto>
    - type: object
      key: ResponseTextDoneEvent
      path: <auto>
    - type: object
      key: ResponseRefusalDeltaEvent
      path: <auto>
    - type: object
      key: ResponseRefusalDoneEvent
      path: <auto>
    - type: object
      key: ResponseFunctionCallArgumentsDeltaEvent
      path: <auto>
    - type: object
      key: ResponseFunctionCallArgumentsDoneEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallInProgressEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallSearchingEvent
      path: <auto>
    - type: object
      key: ResponseFileSearchCallCompletedEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallInProgressEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallSearchingEvent
      path: <auto>
    - type: object
      key: ResponseWebSearchCallCompletedEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryPartAddedEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryPartDoneEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryTextDeltaEvent
      path: <auto>
    - type: object
      key: ResponseReasoningSummaryTextDoneEvent
      path: <auto>
    - type: object
      key: ResponseErrorEvent
      path: <auto>
  - id: chat
    title: Chat Completions
    description: |
      The Chat Completions API endpoint will generate a model response from a
      list of messages comprising a conversation.

      Related guides:
      - [Quickstart](/docs/quickstart?api-mode=chat)
      - [Text inputs and outputs](/docs/guides/text?api-mode=chat)
      - [Image inputs](/docs/guides/images?api-mode=chat)
      - [Audio inputs and outputs](/docs/guides/audio?api-mode=chat)
      - [Structured Outputs](/docs/guides/structured-outputs?api-mode=chat)
      - [Function calling](/docs/guides/function-calling?api-mode=chat)
      - [Conversation state](/docs/guides/conversation-state?api-mode=chat)

      **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses)
      to take advantage of the latest OpenAI platform features. Compare
      [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).
    navigationGroup: chat
    sections:
    - type: endpoint
      key: createChatCompletion
      path: create
    - type: endpoint
      key: getChatCompletion
      path: get
    - type: endpoint
      key: getChatCompletionMessages
      path: getMessages
    - type: endpoint
      key: listChatCompletions
      path: list
    - type: endpoint
      key: updateChatCompletion
      path: update
    - type: endpoint
      key: deleteChatCompletion
      path: delete
    - type: object
      key: CreateChatCompletionResponse
      path: object
    - type: object
      key: ChatCompletionList
      path: list-object
    - type: object
      key: ChatCompletionMessageList
      path: message-list
  - id: chat-streaming
    title: Streaming
    description: |
      Stream Chat Completions in real time. Receive chunks of completions
      returned from the model using server-sent events.
      [Learn more](/docs/guides/streaming-responses?api-mode=chat).
    navigationGroup: chat
    sections:
    - type: object
      key: CreateChatCompletionStreamResponse
      path: streaming
  - id: realtime
    title: Realtime
    beta: true
    description: |
      Communicate with a GPT-4o class model in real time using WebRTC or
      WebSockets. Supports text and audio inputs and ouputs, along with audio
      transcriptions.
      [Learn more about the Realtime API](/docs/guides/realtime).
    navigationGroup: realtime
  - id: realtime-sessions
    title: Session tokens
    description: |
      REST API endpoint to generate ephemeral session tokens for use in client-side
      applications.
    navigationGroup: realtime
    sections:
    - type: endpoint
      key: create-realtime-session
      path: create
    - type: endpoint
      key: create-realtime-transcription-session
      path: create-transcription
    - type: object
      key: RealtimeSessionCreateResponse
      path: session_object
    - type: object
      key: RealtimeTranscriptionSessionCreateResponse
      path: transcription_session_object
  - id: realtime-client-events
    title: Client events
    description: |
      These are events that the OpenAI Realtime WebSocket server will accept from the client.
    navigationGroup: realtime
    sections:
    - type: object
      key: RealtimeClientEventSessionUpdate
      path: <auto>
    - type: object
      key: RealtimeClientEventInputAudioBufferAppend
      path: <auto>
    - type: object
      key: RealtimeClientEventInputAudioBufferCommit
      path: <auto>
    - type: object
      key: RealtimeClientEventInputAudioBufferClear
      path: <auto>
    - type: object
      key: RealtimeClientEventConversationItemCreate
      path: <auto>
    - type: object
      key: RealtimeClientEventConversationItemRetrieve
      path: <auto>
    - type: object
      key: RealtimeClientEventConversationItemTruncate
      path: <auto>
    - type: object
      key: RealtimeClientEventConversationItemDelete
      path: <auto>
    - type: object
      key: RealtimeClientEventResponseCreate
      path: <auto>
    - type: object
      key: RealtimeClientEventResponseCancel
      path: <auto>
    - type: object
      key: RealtimeClientEventTranscriptionSessionUpdate
      path: <auto>
    - type: object
      key: RealtimeClientEventOutputAudioBufferClear
      path: <auto>
  - id: realtime-server-events
    title: Server events
    description: |
      These are events emitted from the OpenAI Realtime WebSocket server to the client.
    navigationGroup: realtime
    sections:
    - type: object
      key: RealtimeServerEventError
      path: <auto>
    - type: object
      key: RealtimeServerEventSessionCreated
      path: <auto>
    - type: object
      key: RealtimeServerEventSessionUpdated
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationCreated
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemCreated
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemRetrieved
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemInputAudioTranscriptionDelta
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemTruncated
      path: <auto>
    - type: object
      key: RealtimeServerEventConversationItemDeleted
      path: <auto>
    - type: object
      key: RealtimeServerEventInputAudioBufferCommitted
      path: <auto>
    - type: object
      key: RealtimeServerEventInputAudioBufferCleared
      path: <auto>
    - type: object
      key: RealtimeServerEventInputAudioBufferSpeechStarted
      path: <auto>
    - type: object
      key: RealtimeServerEventInputAudioBufferSpeechStopped
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseCreated
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseOutputItemAdded
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseOutputItemDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseContentPartAdded
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseContentPartDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseTextDelta
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseTextDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseAudioTranscriptDelta
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseAudioTranscriptDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseAudioDelta
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseAudioDone
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseFunctionCallArgumentsDelta
      path: <auto>
    - type: object
      key: RealtimeServerEventResponseFunctionCallArgumentsDone
      path: <auto>
    - type: object
      key: RealtimeServerEventTranscriptionSessionUpdated
      path: <auto>
    - type: object
      key: RealtimeServerEventRateLimitsUpdated
      path: <auto>
    - type: object
      key: RealtimeServerEventOutputAudioBufferStarted
      path: <auto>
    - type: object
      key: RealtimeServerEventOutputAudioBufferStopped
      path: <auto>
    - type: object
      key: RealtimeServerEventOutputAudioBufferCleared
      path: <auto>
  - id: audio
    title: Audio
    description: |
      Learn how to turn audio into text or text into audio.

      Related guide: [Speech to text](/docs/guides/speech-to-text)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createSpeech
      path: createSpeech
    - type: endpoint
      key: createTranscription
      path: createTranscription
    - type: endpoint
      key: createTranslation
      path: createTranslation
    - type: object
      key: CreateTranscriptionResponseJson
      path: json-object
    - type: object
      key: CreateTranscriptionResponseVerboseJson
      path: verbose-json-object
    - type: object
      key: TranscriptTextDeltaEvent
      path: transcript-text-delta-event
    - type: object
      key: TranscriptTextDoneEvent
      path: transcript-text-done-event
  - id: images
    title: Images
    description: |
      Given a prompt and/or an input image, the model will generate a new image.
      Related guide: [Image generation](/docs/guides/images)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createImage
      path: create
    - type: endpoint
      key: createImageEdit
      path: createEdit
    - type: endpoint
      key: createImageVariation
      path: createVariation
    - type: object
      key: ImagesResponse
      path: object
  - id: embeddings
    title: Embeddings
    description: |
      Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      Related guide: [Embeddings](/docs/guides/embeddings)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createEmbedding
      path: create
    - type: object
      key: Embedding
      path: object
  - id: evals
    title: Evals
    description: |
      Create, manage, and run evals in the OpenAI platform.
      Related guide: [Evals](/docs/guides/evals)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createEval
      path: create
    - type: endpoint
      key: getEval
      path: get
    - type: endpoint
      key: updateEval
      path: update
    - type: endpoint
      key: deleteEval
      path: delete
    - type: endpoint
      key: listEvals
      path: list
    - type: endpoint
      key: getEvalRuns
      path: getRuns
    - type: endpoint
      key: getEvalRun
      path: getRun
    - type: endpoint
      key: createEvalRun
      path: createRun
    - type: endpoint
      key: cancelEvalRun
      path: cancelRun
    - type: endpoint
      key: deleteEvalRun
      path: deleteRun
    - type: endpoint
      key: getEvalRunOutputItem
      path: getRunOutputItem
    - type: endpoint
      key: getEvalRunOutputItems
      path: getRunOutputItems
    - type: object
      key: Eval
      path: object
    - type: object
      key: EvalRun
      path: run-object
    - type: object
      key: EvalRunOutputItem
      path: run-output-item-object
  - id: fine-tuning
    title: Fine-tuning
    description: |
      Manage fine-tuning jobs to tailor a model to your specific training data.
      Related guide: [Fine-tune models](/docs/guides/fine-tuning)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createFineTuningJob
      path: create
    - type: endpoint
      key: listPaginatedFineTuningJobs
      path: list
    - type: endpoint
      key: listFineTuningEvents
      path: list-events
    - type: endpoint
      key: listFineTuningJobCheckpoints
      path: list-checkpoints
    - type: endpoint
      key: listFineTuningCheckpointPermissions
      path: list-permissions
    - type: endpoint
      key: createFineTuningCheckpointPermission
      path: create-permission
    - type: endpoint
      key: deleteFineTuningCheckpointPermission
      path: delete-permission
    - type: endpoint
      key: retrieveFineTuningJob
      path: retrieve
    - type: endpoint
      key: cancelFineTuningJob
      path: cancel
    - type: object
      key: FineTuneChatRequestInput
      path: chat-input
    - type: object
      key: FineTunePreferenceRequestInput
      path: preference-input
    - type: object
      key: FineTuneCompletionRequestInput
      path: completions-input
    - type: object
      key: FineTuningJob
      path: object
    - type: object
      key: FineTuningJobEvent
      path: event-object
    - type: object
      key: FineTuningJobCheckpoint
      path: checkpoint-object
    - type: object
      key: FineTuningCheckpointPermission
      path: permission-object
  - id: batch
    title: Batch
    description: |
      Create large batches of API requests for asynchronous processing. The Batch API returns completions within 24 hours for a 50% discount.
      Related guide: [Batch](/docs/guides/batch)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createBatch
      path: create
    - type: endpoint
      key: retrieveBatch
      path: retrieve
    - type: endpoint
      key: cancelBatch
      path: cancel
    - type: endpoint
      key: listBatches
      path: list
    - type: object
      key: Batch
      path: object
    - type: object
      key: BatchRequestInput
      path: request-input
    - type: object
      key: BatchRequestOutput
      path: request-output
  - id: files
    title: Files
    description: |
      Files are used to upload documents that can be used with features like [Assistants](/docs/api-reference/assistants), [Fine-tuning](/docs/api-reference/fine-tuning), and [Batch API](/docs/guides/batch).
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createFile
      path: create
    - type: endpoint
      key: listFiles
      path: list
    - type: endpoint
      key: retrieveFile
      path: retrieve
    - type: endpoint
      key: deleteFile
      path: delete
    - type: endpoint
      key: downloadFile
      path: retrieve-contents
    - type: object
      key: OpenAIFile
      path: object
  - id: uploads
    title: Uploads
    description: |
      Allows you to upload large files in multiple parts.
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createUpload
      path: create
    - type: endpoint
      key: addUploadPart
      path: add-part
    - type: endpoint
      key: completeUpload
      path: complete
    - type: endpoint
      key: cancelUpload
      path: cancel
    - type: object
      key: Upload
      path: object
    - type: object
      key: UploadPart
      path: part-object
  - id: models
    title: Models
    description: |
      List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: listModels
      path: list
    - type: endpoint
      key: retrieveModel
      path: retrieve
    - type: endpoint
      key: deleteModel
      path: delete
    - type: object
      key: Model
      path: object
  - id: moderations
    title: Moderations
    description: |
      Given text and/or image inputs, classifies if those inputs are potentially harmful across several categories.
      Related guide: [Moderations](/docs/guides/moderation)
    navigationGroup: endpoints
    sections:
    - type: endpoint
      key: createModeration
      path: create
    - type: object
      key: CreateModerationResponse
      path: object
  - id: vector-stores
    title: Vector stores
    description: |
      Vector stores power semantic search for the Retrieval API and the `file_search` tool in the Responses and Assistants APIs.

      Related guide: [File Search](/docs/assistants/tools/file-search)
    navigationGroup: vector_stores
    sections:
    - type: endpoint
      key: createVectorStore
      path: create
    - type: endpoint
      key: listVectorStores
      path: list
    - type: endpoint
      key: getVectorStore
      path: retrieve
    - type: endpoint
      key: modifyVectorStore
      path: modify
    - type: endpoint
      key: deleteVectorStore
      path: delete
    - type: endpoint
      key: searchVectorStore
      path: search
    - type: object
      key: VectorStoreObject
      path: object
  - id: vector-stores-files
    title: Vector store files
    description: |
      Vector store files represent files inside a vector store.

      Related guide: [File Search](/docs/assistants/tools/file-search)
    navigationGroup: vector_stores
    sections:
    - type: endpoint
      key: createVectorStoreFile
      path: createFile
    - type: endpoint
      key: listVectorStoreFiles
      path: listFiles
    - type: endpoint
      key: getVectorStoreFile
      path: getFile
    - type: endpoint
      key: retrieveVectorStoreFileContent
      path: getContent
    - type: endpoint
      key: updateVectorStoreFileAttributes
      path: updateAttributes
    - type: endpoint
      key: deleteVectorStoreFile
      path: deleteFile
    - type: object
      key: VectorStoreFileObject
      path: file-object
  - id: vector-stores-file-batches
    title: Vector store file batches
    description: |
      Vector store file batches represent operations to add multiple files to a vector store.
      Related guide: [File Search](/docs/assistants/tools/file-search)
    navigationGroup: vector_stores
    sections:
    - type: endpoint
      key: createVectorStoreFileBatch
      path: createBatch
    - type: endpoint
      key: getVectorStoreFileBatch
      path: getBatch
    - type: endpoint
      key: cancelVectorStoreFileBatch
      path: cancelBatch
    - type: endpoint
      key: listFilesInVectorStoreBatch
      path: listBatchFiles
    - type: object
      key: VectorStoreFileBatchObject
      path: batch-object
  - id: assistants
    title: Assistants
    beta: true
    description: |
      Build assistants that can call models and use tools to perform tasks.

      [Get started with the Assistants API](/docs/assistants)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createAssistant
      path: createAssistant
    - type: endpoint
      key: listAssistants
      path: listAssistants
    - type: endpoint
      key: getAssistant
      path: getAssistant
    - type: endpoint
      key: modifyAssistant
      path: modifyAssistant
    - type: endpoint
      key: deleteAssistant
      path: deleteAssistant
    - type: object
      key: AssistantObject
      path: object
  - id: threads
    title: Threads
    beta: true
    description: |
      Create threads that assistants can interact with.

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createThread
      path: createThread
    - type: endpoint
      key: getThread
      path: getThread
    - type: endpoint
      key: modifyThread
      path: modifyThread
    - type: endpoint
      key: deleteThread
      path: deleteThread
    - type: object
      key: ThreadObject
      path: object
  - id: messages
    title: Messages
    beta: true
    description: |
      Create messages within threads

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createMessage
      path: createMessage
    - type: endpoint
      key: listMessages
      path: listMessages
    - type: endpoint
      key: getMessage
      path: getMessage
    - type: endpoint
      key: modifyMessage
      path: modifyMessage
    - type: endpoint
      key: deleteMessage
      path: deleteMessage
    - type: object
      key: MessageObject
      path: object
  - id: runs
    title: Runs
    beta: true
    description: |
      Represents an execution run on a thread.

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: createRun
      path: createRun
    - type: endpoint
      key: createThreadAndRun
      path: createThreadAndRun
    - type: endpoint
      key: listRuns
      path: listRuns
    - type: endpoint
      key: getRun
      path: getRun
    - type: endpoint
      key: modifyRun
      path: modifyRun
    - type: endpoint
      key: submitToolOuputsToRun
      path: submitToolOutputs
    - type: endpoint
      key: cancelRun
      path: cancelRun
    - type: object
      key: RunObject
      path: object
  - id: run-steps
    title: Run steps
    beta: true
    description: |
      Represents the steps (model and tool calls) taken during the run.

      Related guide: [Assistants](/docs/assistants/overview)
    navigationGroup: assistants
    sections:
    - type: endpoint
      key: listRunSteps
      path: listRunSteps
    - type: endpoint
      key: getRunStep
      path: getRunStep
    - type: object
      key: RunStepObject
      path: step-object
  - id: assistants-streaming
    title: Streaming
    beta: true
    description: |
      Stream the result of executing a Run or resuming a Run after submitting tool outputs.
      You can stream events from the [Create Thread and Run](/docs/api-reference/runs/createThreadAndRun),
      [Create Run](/docs/api-reference/runs/createRun), and [Submit Tool Outputs](/docs/api-reference/runs/submitToolOutputs)
      endpoints by passing `"stream": true`. The response will be a [Server-Sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events) stream.
      Our Node and Python SDKs provide helpful utilities to make streaming easy. Reference the
      [Assistants API quickstart](/docs/assistants/overview) to learn more.
    navigationGroup: assistants
    sections:
    - type: object
      key: MessageDeltaObject
      path: message-delta-object
    - type: object
      key: RunStepDeltaObject
      path: run-step-delta-object
    - type: object
      key: AssistantStreamEvent
      path: events
  - id: administration
    title: Administration
    description: |
      Programmatically manage your organization.
      The Audit Logs endpoint provides a log of all actions taken in the organization for security and monitoring purposes.
      To access these endpoints please generate an Admin API Key through the [API Platform Organization overview](/organization/admin-keys). Admin API keys cannot be used for non-administration endpoints.
      For best practices on setting up your organization, please refer to this [guide](/docs/guides/production-best-practices#setting-up-your-organization)
    navigationGroup: administration
  - id: admin-api-keys
    title: Admin API Keys
    description: |
      Admin API keys enable Organization Owners to programmatically manage various aspects of their organization, including users, projects, and API keys. These keys provide administrative capabilities, such as creating, updating, and deleting users; managing projects; and overseeing API key lifecycles.

      Key Features of Admin API Keys:

      - User Management: Invite new users, update roles, and remove users from the organization.

      - Project Management: Create, update, archive projects, and manage user assignments within projects.

      - API Key Oversight: List, retrieve, and delete API keys associated with projects.

      Only Organization Owners have the authority to create and utilize Admin API keys. To manage these keys, Organization Owners can navigate to the Admin Keys section of their API Platform dashboard.

      For direct access to the Admin Keys management page, Organization Owners can use the following link:

      [https://platform.openai.com/settings/organization/admin-keys](https://platform.openai.com/settings/organization/admin-keys)

      It's crucial to handle Admin API keys with care due to their elevated permissions. Adhering to best practices, such as regular key rotation and assigning appropriate permissions, enhances security and ensures proper governance within the organization.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: admin-api-keys-list
      path: list
    - type: endpoint
      key: admin-api-keys-create
      path: create
    - type: endpoint
      key: admin-api-keys-get
      path: listget
    - type: endpoint
      key: admin-api-keys-delete
      path: delete
    - type: object
      key: AdminApiKey
      path: object
  - id: invite
    title: Invites
    description: Invite and manage invitations for an organization.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-invites
      path: list
    - type: endpoint
      key: inviteUser
      path: create
    - type: endpoint
      key: retrieve-invite
      path: retrieve
    - type: endpoint
      key: delete-invite
      path: delete
    - type: object
      key: Invite
      path: object
  - id: users
    title: Users
    description: |
      Manage users and their role in an organization.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-users
      path: list
    - type: endpoint
      key: modify-user
      path: modify
    - type: endpoint
      key: retrieve-user
      path: retrieve
    - type: endpoint
      key: delete-user
      path: delete
    - type: object
      key: User
      path: object
  - id: projects
    title: Projects
    description: |
      Manage the projects within an orgnanization includes creation, updating, and archiving or projects.
      The Default project cannot be archived.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-projects
      path: list
    - type: endpoint
      key: create-project
      path: create
    - type: endpoint
      key: retrieve-project
      path: retrieve
    - type: endpoint
      key: modify-project
      path: modify
    - type: endpoint
      key: archive-project
      path: archive
    - type: object
      key: Project
      path: object
  - id: project-users
    title: Project users
    description: |
      Manage users within a project, including adding, updating roles, and removing users.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-project-users
      path: list
    - type: endpoint
      key: create-project-user
      path: creeate
    - type: endpoint
      key: retrieve-project-user
      path: retrieve
    - type: endpoint
      key: modify-project-user
      path: modify
    - type: endpoint
      key: delete-project-user
      path: delete
    - type: object
      key: ProjectUser
      path: object
  - id: project-service-accounts
    title: Project service accounts
    description: |
      Manage service accounts within a project. A service account is a bot user that is not associated with a user.
      If a user leaves an organization, their keys and membership in projects will no longer work. Service accounts
      do not have this limitation. However, service accounts can also be deleted from a project.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-project-service-accounts
      path: list
    - type: endpoint
      key: create-project-service-account
      path: create
    - type: endpoint
      key: retrieve-project-service-account
      path: retrieve
    - type: endpoint
      key: delete-project-service-account
      path: delete
    - type: object
      key: ProjectServiceAccount
      path: object
  - id: project-api-keys
    title: Project API keys
    description: |
      Manage API keys for a given project. Supports listing and deleting keys for users.
      This API does not allow issuing keys for users, as users need to authorize themselves to generate keys.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-project-api-keys
      path: list
    - type: endpoint
      key: retrieve-project-api-key
      path: retrieve
    - type: endpoint
      key: delete-project-api-key
      path: delete
    - type: object
      key: ProjectApiKey
      path: object
  - id: project-rate-limits
    title: Project rate limits
    description: |
      Manage rate limits per model for projects. Rate limits may be configured to be equal to or lower than the organization's rate limits.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-project-rate-limits
      path: list
    - type: endpoint
      key: update-project-rate-limits
      path: update
    - type: object
      key: ProjectRateLimit
      path: object
  - id: audit-logs
    title: Audit logs
    description: |
      Logs of user actions and configuration changes within this organization.
      To log events, you must activate logging in the [Organization Settings](/settings/organization/general).
      Once activated, for security reasons, logging cannot be deactivated.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: list-audit-logs
      path: list
    - type: object
      key: AuditLog
      path: object
  - id: usage
    title: Usage
    description: |
      The **Usage API** provides detailed insights into your activity across the OpenAI API. It also includes a separate [Costs endpoint](/docs/api-reference/usage/costs), which offers visibility into your spend, breaking down consumption by invoice line items and project IDs.

      While the Usage API delivers granular usage data, it may not always reconcile perfectly with the Costs due to minor differences in how usage and spend are recorded. For financial purposes, we recommend using the [Costs endpoint](/docs/api-reference/usage/costs) or the [Costs tab](/settings/organization/usage) in the Usage Dashboard, which will reconcile back to your billing invoice.
    navigationGroup: administration
    sections:
    - type: endpoint
      key: usage-completions
      path: completions
    - type: object
      key: UsageCompletionsResult
      path: completions_object
    - type: endpoint
      key: usage-embeddings
      path: embeddings
    - type: object
      key: UsageEmbeddingsResult
      path: embeddings_object
    - type: endpoint
      key: usage-moderations
      path: moderations
    - type: object
      key: UsageModerationsResult
      path: moderations_object
    - type: endpoint
      key: usage-images
      path: images
    - type: object
      key: UsageImagesResult
      path: images_object
    - type: endpoint
      key: usage-audio-speeches
      path: audio_speeches
    - type: object
      key: UsageAudioSpeechesResult
      path: audio_speeches_object
    - type: endpoint
      key: usage-audio-transcriptions
      path: audio_transcriptions
    - type: object
      key: UsageAudioTranscriptionsResult
      path: audio_transcriptions_object
    - type: endpoint
      key: usage-vector-stores
      path: vector_stores
    - type: object
      key: UsageVectorStoresResult
      path: vector_stores_object
    - type: endpoint
      key: usage-code-interpreter-sessions
      path: code_interpreter_sessions
    - type: object
      key: UsageCodeInterpreterSessionsResult
      path: code_interpreter_sessions_object
    - type: endpoint
      key: usage-costs
      path: costs
    - type: object
      key: CostsResult
      path: costs_object
  - id: certificates
    beta: true
    title: Certificates
    description: |
      Manage Mutual TLS certificates across your organization and projects.

      [Learn more about Mutual TLS.](https://help.openai.com/en/articles/10876024-openai-mutual-tls-beta-program)
    navigationGroup: administration
    sections:
    - type: endpoint
      key: uploadCertificate
      path: uploadCertificate
    - type: endpoint
      key: getCertificate
      path: getCertificate
    - type: endpoint
      key: modifyCertificate
      path: modifyCertificate
    - type: endpoint
      key: deleteCertificate
      path: deleteCertificate
    - type: endpoint
      key: listOrganizationCertificates
      path: listOrganizationCertificates
    - type: endpoint
      key: listProjectCertificates
      path: listProjectCertificates
    - type: endpoint
      key: activateOrganizationCertificates
      path: activateOrganizationCertificates
    - type: endpoint
      key: deactivateOrganizationCertificates
      path: deactivateOrganizationCertificates
    - type: endpoint
      key: activateProjectCertificates
      path: activateProjectCertificates
    - type: endpoint
      key: deactivateProjectCertificates
      path: deactivateProjectCertificates
    - type: object
      key: Certificate
      path: object
  - id: completions
    title: Completions
    legacy: true
    navigationGroup: legacy
    description: |
      Given a prompt, the model will return one or more predicted completions along with the probabilities of alternative tokens at each position. Most developer should use our [Chat Completions API](/docs/guides/text-generation#text-generation-models) to leverage our best and newest models.
    sections:
    - type: endpoint
      key: createCompletion
      path: create
    - type: object
      key: CreateCompletionResponse
      path: object
